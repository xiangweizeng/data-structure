{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/","text":"0. \u7eea\u8bba \u00b6 0.1 \u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5 \u00b6 0.1.1 \u57fa\u672c\u6982\u5ff5\u548c\u672f\u8bed \u00b6 \u672f\u8bed \u5b9a\u4e49 \u6570\u636e \u6570\u636e\u662f\u4fe1\u606f\u7684\u8f7d\u4f53\uff0c\u662f\u63cf\u8ff0\u5ba2\u89c2\u4e8b\u7269\u5c5e\u6027\u7684\u6570\u3001\u5b57\u7b26\u53ca\u6240\u6709\u80fd\u8f93\u5165\u5230\u8ba1\u7b97\u673a\u4e2d\u5e76\u88ab\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bc6\u522b\u548c\u5904\u7406\u7684\u7b26\u53f7\u7684\u96c6\u5408 \u6570\u636e\u5143\u7d20 \u6570\u636e\u5143\u7d20\u662f\u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u901a\u5e38\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u8003\u8651\u548c\u5904\u7406\uff0c\u542b\u6709\u591a\u4e2a\u6570\u636e\u9879 \u6570\u636e\u9879 \u662f\u6784\u6210\u6570\u636e\u5143\u7d20\u7684\u4e0d\u53ef\u5206\u5272\u7684\u6700\u5c0f\u5355\u4f4d \u6570\u636e\u5bf9\u8c61 \u5177\u6709\u76f8\u540c\u6027\u8d28\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\uff0c\u662f\u6570\u636e\u7684\u4e00\u4e2a\u5b50\u96c6 \u6570\u636e\u7c7b\u578b \u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u6b64\u96c6\u5408\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0 \u6570\u636e\u7ed3\u6784 \u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u6216\u591a\u79cd\u7279\u5b9a\u5173\u7cfb\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408 \u6570\u636e\u7c7b\u578b \u00b6 \u6570\u636e\u7c7b\u578b \u5b9a\u4e49 \u539f\u5b50\u7c7b\u578b \u5176\u503c\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u7c7b\u578b \u7ed3\u6784\u7c7b\u578b \u5176\u503c\u53ef\u4ee5\u518d\u5206\u89e3\u4e3a\u82e5\u5e72\u6210\u5206\u7684\u6570\u636e\u7c7b\u578b \u62bd\u8c61\u6570\u636e\u7c7b\u578b ADT \u62bd\u8c61\u6570\u636e\u7ec4\u7ec7\u53ca\u4e0e\u4e4b\u76f8\u5173\u7684\u64cd\u4f5c \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49\u683c\u5f0f \u00b6 ADT \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u540d { //\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u683c\u5f0f \u6570\u636e\u5bf9\u8c61 : < \u6570\u636e\u5bf9\u8c61\u7684\u5b9a\u4e49 > //\u81ea\u7136\u8bed\u8a00 \u6570\u636e\u5173\u7cfb : < \u6570\u636e\u5173\u7cfb\u7684\u5b9a\u4e49 > //\u81ea\u7136\u8bed\u8a00 \u57fa\u672c\u64cd\u4f5c : < \u57fa\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49 > } ADT \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u540d ; //\u57fa\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49\u683c\u5f0f \u57fa\u672c\u64cd\u4f5c\u540d ( \u53c2\u6570\u8868 ) //\u53c2\u6570\u8868\u4e2d\u8d4b\u503c\u53c2\u6570\u53ea\u63d0\u4f9b\u8f93\u5165\u503c\uff0c\u5f15\u7528\u53c2\u6570\u4ee5&\u6253\u5934\uff0c\u53ef\u63d0\u4f9b\u8f93\u5165\u503c\u548c\u8fd4\u56de\u64cd\u4f5c\u7ed3\u679c \u521d\u59cb\u6761\u4ef6 : < \u521d\u59cb\u6761\u4ef6\u63cf\u8ff0 > \u64cd\u4f5c\u7ed3\u679c : < \u64cd\u4f5c\u7ed3\u679c\u63cf\u8ff0 > 0.1.2 \u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20 \u00b6 \u903b\u8f91\u7ed3\u6784 \u00b6 \u5b9a\u4e49\uff1a\u903b\u8f91\u7ed3\u6784\u662f\u6307\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb\uff0c\u5373\u4ece\u903b\u8f91\u5173\u7cfb\u4e0a\u63cf\u8ff0\u6570\u636e\u3002 \u5206\u7c7b\uff1a \u7ebf\u6027\u7ed3\u6784\uff1a\u4e00\u822c\u7ebf\u6027\u8868\u3001\u53d7\u9650\u7ebf\u6027\u8868\uff08\u6808\u548c\u961f\u5217\uff09\u3001\u7ebf\u6027\u8868\u63a8\u5e7f\uff08\u6570\u7ec4\uff09 \u975e\u7ebf\u6027\u7ed3\u6784\uff1a\u96c6\u5408\u7ed3\u6784\u3001\u6811\u7ed3\u6784\u3001\u56fe\u7ed3\u6784 \u5b58\u50a8\u7ed3\u6784 \u00b6 \u5b9a\u4e49\uff1a\u5b58\u50a8\u7ed3\u6784\u662f\u6307\u6570\u636e\u7ed3\u6784\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u8868\u793a\uff0c\u4e5f\u79f0\u7269\u7406\u7ed3\u6784 \u5206\u7c7b\uff1a \u5b58\u50a8\u7ed3\u6784 \u5b9a\u4e49 \u4f18\u70b9 \u7f3a\u70b9 \u987a\u5e8f\u5b58\u50a8 \u628a\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u5143\u7d20\u5b58\u50a8\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb\u7684\u5b58\u50a8\u5355\u5143\u4e2d\uff0c\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u7531\u5b58\u50a8\u5355\u5143\u7684\u90bb\u63a5\u5173\u7cfb\u6765\u4f53\u73b0 \u968f\u673a\u5b58\u53d6\uff0c\u5360\u7528\u7a7a\u95f4\u5c11 \u4f7f\u7528\u4e00\u6574\u5757\u76f8\u90bb\u7684\u5b58\u50a8\u5355\u5143\uff0c\u4ea7\u751f\u8f83\u591a\u788e\u7247 \u94fe\u5f0f\u5b58\u50a8 \u4e0d\u8981\u6c42\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u5143\u7d20\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb\uff0c\u501f\u52a9\u6307\u793a\u5143\u7d20\u5b58\u50a8\u5730\u5740\u7684\u6307\u9488\u6765\u8868\u793a\u5143\u7d20\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb \u4e0d\u4f1a\u51fa\u73b0\u788e\u7247\uff0c\u5145\u5206\u5229\u7528\u6240\u6709\u5b58\u50a8\u5355\u5143 \u9700\u8981\u989d\u5916\u7a7a\u95f4\uff0c\u53ea\u80fd\u987a\u5e8f\u5b58\u53d6 \u7d22\u5f15\u5b58\u50a8 \u5728\u5b58\u50a8\u5143\u7d20\u4fe1\u606f\u7684\u540c\u65f6\uff0c\u8fd8\u5efa\u7acb\u9644\u52a0\u7684\u7d22\u5f15\u8868\u3002 \u68c0\u7d22\u901f\u5ea6\u5feb \u9644\u52a0\u7684\u7d22\u5f15\u8868\u9700\u8981\u989d\u5916\u7a7a\u95f4\u3002\u589e\u5220\u6570\u636e\u4fee\u6539\u7d22\u5f15\u8868\u65f6\u82b1\u8d39\u65f6\u95f4 \u6563\u5217\u5b58\u50a8 \u6839\u636e\u5143\u7d20\u7684\u5173\u952e\u5b57\u76f4\u63a5\u8ba1\u7b97\u51fa\u8be5\u5143\u7d20\u7684\u5b58\u50a8\u5730\u5740\uff0c\u53c8\u79f0\u54c8\u5e0c(Hash)\u5b58\u50a8\u3002 \u68c0\u7d22\u3001\u589e\u52a0\u548c\u5220\u9664\u7ed3\u70b9\u7684\u64cd\u4f5c\u5f88\u5feb \u53ef\u80fd\u51fa\u73b0\u5143\u7d20\u5b58\u50a8\u5355\u5143\u7684\u51b2\u7a81\uff0c\u89e3\u51b3\u51b2\u7a81\u4f1a\u589e\u52a0\u65f6\u95f4\u548c\u7a7a\u95f4\u5f00\u9500 \u6570\u636e\u7684\u8fd0\u7b97 \u00b6 \u5b9a\u4e49\uff1a\u65bd\u52a0\u5728\u6570\u636e\u4e0a\u7684\u8fd0\u7b97\u5305\u62ec\u8fd0\u7b97\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0\u3002 \u5b9a\u4e49\u662f\u9488\u5bf9\u903b\u8f91\u7ed3\u6784\u7684\uff0c\u6307\u51fa\u8fd0\u7b97\u7684\u529f\u80fd\uff1b \u8fd0\u7b97\u7684\u5b9e\u73b0\u662f\u9488\u5bf9\u5b58\u50a8\u7ed3\u6784\u7684\uff0c\u6307\u51fa\u8fd0\u7b97\u7684\u5177\u4f53\u64cd\u4f5c\u6b65\u9aa4\u3002 0.2 \u7b97\u6cd5\u548c\u7b97\u6cd5\u8bc4\u4ef7 \u00b6 0.2.1 \u7b97\u6cd5\u7684\u5b9a\u4e49\u3001\u7279\u6027\u548c\u8bc4\u4ef7\u6807\u51c6 \u00b6 \u5b9a\u4e49\uff1a\u7b97\u6cd5\u662f\u9488\u5bf9\u7279\u5b9a\u95ee\u9898\u6c42\u89e3\u6b65\u9aa4\u7684\u4e00\u79cd\u63cf\u8ff0\uff0c\u5b83\u662f\u6307\u4ee4\u7684\u6709\u9650\u5e8f\u5217\uff0c\u5176\u4e2d\u7684\u6bcf\u6761\u6307\u4ee4\u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u3002 \u7279\u6027\uff1a \u8f93\u5165\uff0c\u96f6\u4e2a\u6216\u591a\u4e2a \u8f93\u51fa\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a \u786e\u5b9a\u6027\uff0c\u6bcf\u6761\u6307\u4ee4\u542b\u6709\u786e\u5b9a\uff0c\u76f8\u540c\u7684\u8f93\u5165\u5f97\u51fa\u76f8\u540c\u7684\u7ed3\u679c \u6709\u7a77\u6027 \u53ef\u884c\u6027\uff0c\u6240\u6709\u53ef\u4ee5\u901a\u8fc7\u5df2\u7ecf\u5b9e\u73b0\u7684\u57fa\u7840\u8fd0\u7b97\u64cd\u4f5c\u6709\u9650\u6b21\u6765\u5b9e\u73b0 \u8bc4\u4ef7\u6807\u51c6: \u6b63\u786e\u6027\uff1a\u6b63\u786e\u7ed3\u679c \u53ef\u8bfb\u6027 \u5065\u58ee\u6027\uff1a\u8f93\u5165\u6570\u636e\u975e\u6cd5\u65f6\uff0c\u80fd\u591f\u9002\u5f53\u7684\u4f5c\u51fa\u53cd\u5e94\u6216\u76f8\u5e94\u5904\u7406\uff0c\u4e0d\u4f1a\u4ea7\u751f\u83ab\u540d\u5176\u5999\u7684\u8f93\u51fa\u7ed3\u679c \u9ad8\u6548\u6027\uff1a\u65f6\u95f4\u548c\u7a7a\u95f4 0.2.2 \u7b97\u6cd5\u6548\u7387\u7684\u5ea6\u91cf \u00b6 \u7b97\u6cd5\u6548\u7387\u5206\u4e3a\u65f6\u95f4\u6548\u7387\u548c\u7a7a\u95f4\u6548\u7387 \u65f6\u95f4\u590d\u6742\u5ea6\u5b9a\u4e49: \\(T(n)=O(f(n)\\) \u7a7a\u95f4\u590d\u6742\u5ea6\u5b9a\u4e49: \\(S(n)=O(g(n))\\) \u51fd\u6570\u6e10\u8fd1\u7684\u754c \\(O(g(n))\\) ,\u5b58\u5728\u6b63\u6570 \\(c\\) \u548c \\(n_0\\) \u4f7f\u5f97\u5bf9\u4e8e\u4e00\u5207 \\(n\\geq n_0, 0\\leq f(n)\\leq cg(n)\\) \u6ce8\u610f\uff1a \u539f\u5730\u5de5\u4f5c\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1); \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u4ec5\u4ec5\u4f9d\u8d56\u4e8e\u6570\u636e\u7684\u89c4\u6a21\uff0c\u4e5f\u53d6\u51b3\u4e8e\u5f85\u8f93\u5165\u6570\u636e\u7684\u6027\u8d28\uff0c\u5982\u6570\u636e\u7684\u521d\u59cb\u72b6\u6001\uff1b \u7b97\u6cd5\u590d\u6742\u5ea6\u5206\u6790\u6b65\u9aa4 \u00b6 \u786e\u5b9a\u8868\u793a\u8f93\u5165\u89c4\u6a21\u7684\u53c2\u6570 \u627e\u51fa\u7b97\u6cd5\u7684\u57fa\u672c\u64cd\u4f5c \u68c0\u67e5\u57fa\u672c\u64cd\u4f5c\u7684\u6267\u884c\u6b21\u6570\u662f\u5426\u53ea\u4f9d\u8d56\u4e8e\u8f93\u5165\u89c4\u6a21\u3002\u8fd9\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8003\u8651\u6700\u5dee\u3001\u5e73\u5747\u4ee5\u53ca\u6700\u4f18\u60c5\u51b5\u4e0b\u7684\u590d\u6742\u6027 \u5bf9\u4e8e\u975e\u9012\u5f52\u7b97\u6cd5\uff0c\u5efa\u7acb\u7b97\u6cd5\u57fa\u672c\u64cd\u4f5c\u6267\u884c\u6b21\u6570\u7684\u6c42\u548c\u8868\u8fbe\u5f0f\uff1b\u5bf9\u4e8e\u9012\u5f52\u7b97\u6cd5\uff0c- \u5efa\u7acb\u7b97\u6cd5\u57fa\u672c\u64cd\u4f5c\u6267\u884c\u6b21\u6570\u7684\u9012\u63a8\u5173\u7cfb\u53ca\u5176\u521d\u59cb\u6761\u4ef6 \u5229\u7528\u6c42\u548c\u516c\u5f0f\u548c\u6cd5\u5219\u5efa\u7acb\u4e00\u4e2a\u64cd\u4f5c\u6b21\u6570\u7684\u95ed\u5408\u516c\u5f0f\uff0c\u6216\u8005\u6c42\u89e3\u9012\u63a8\u516c\u5f0f\uff0c\u786e\u5b9a\u589e\u957f\u7684\u9636 \u52a0\u6cd5\u6cd5\u5219\uff1a \\[T(n)=T_1(n)+T_2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n)))\\] \u4e58\u6cd5\u6cd5\u5219\uff1a \\[T(n)=T_1(n)\\times T_2(n)=O(f(n))\\times O(g(n))=O(f(n))\\times O(g(n))\\] \u5e38\u89c1\u7684\u590d\u6742\u5ea6\uff1a \\[O(1) \\leq O(log_2n)\\leq O(n) \\leq O(n log_2n) \\leq O(n^2)\\] \\[\\leq O(n^3) \\leq O(2^n) \\leq O(n!) \\leq O(n^n)\\] \u4e24\u7c7b\u9012\u5f52\u7b97\u6cd5\u95ee\u9898\u7684\u590d\u6742\u5ea6\u6c42\u89e3\uff1a \u7ebf\u6027\u5206\u89e3 \\[T(n)=\\begin{cases} O(1) & n=1\\\\ aT(n-1)+f(n)& n>1 \\end{cases}\\] \\[T (n) = a^{n-1}T(1)+\\sum_{i=2}^n a^{n-i}f(i)\\] \u6307\u6570\u5206\u89e3 \\[T(n)=\\begin{cases} O(1) & n=1\\\\ aT(\\frac nb)+f(n)& n>1 \\end{cases}\\] \\[T(n)=n^{log_b a}T(1)+\\sum_{j=0}^{log_b n-1}a^jf(\\frac n{b^j})\\]","title":"0. \u7eea\u8bba"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#0","text":"","title":"0. \u7eea\u8bba"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#01","text":"","title":"0.1 \u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#011","text":"\u672f\u8bed \u5b9a\u4e49 \u6570\u636e \u6570\u636e\u662f\u4fe1\u606f\u7684\u8f7d\u4f53\uff0c\u662f\u63cf\u8ff0\u5ba2\u89c2\u4e8b\u7269\u5c5e\u6027\u7684\u6570\u3001\u5b57\u7b26\u53ca\u6240\u6709\u80fd\u8f93\u5165\u5230\u8ba1\u7b97\u673a\u4e2d\u5e76\u88ab\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bc6\u522b\u548c\u5904\u7406\u7684\u7b26\u53f7\u7684\u96c6\u5408 \u6570\u636e\u5143\u7d20 \u6570\u636e\u5143\u7d20\u662f\u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u901a\u5e38\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u8003\u8651\u548c\u5904\u7406\uff0c\u542b\u6709\u591a\u4e2a\u6570\u636e\u9879 \u6570\u636e\u9879 \u662f\u6784\u6210\u6570\u636e\u5143\u7d20\u7684\u4e0d\u53ef\u5206\u5272\u7684\u6700\u5c0f\u5355\u4f4d \u6570\u636e\u5bf9\u8c61 \u5177\u6709\u76f8\u540c\u6027\u8d28\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\uff0c\u662f\u6570\u636e\u7684\u4e00\u4e2a\u5b50\u96c6 \u6570\u636e\u7c7b\u578b \u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u6b64\u96c6\u5408\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0 \u6570\u636e\u7ed3\u6784 \u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u6216\u591a\u79cd\u7279\u5b9a\u5173\u7cfb\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408","title":"0.1.1 \u57fa\u672c\u6982\u5ff5\u548c\u672f\u8bed"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#_1","text":"\u6570\u636e\u7c7b\u578b \u5b9a\u4e49 \u539f\u5b50\u7c7b\u578b \u5176\u503c\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u7c7b\u578b \u7ed3\u6784\u7c7b\u578b \u5176\u503c\u53ef\u4ee5\u518d\u5206\u89e3\u4e3a\u82e5\u5e72\u6210\u5206\u7684\u6570\u636e\u7c7b\u578b \u62bd\u8c61\u6570\u636e\u7c7b\u578b ADT \u62bd\u8c61\u6570\u636e\u7ec4\u7ec7\u53ca\u4e0e\u4e4b\u76f8\u5173\u7684\u64cd\u4f5c","title":"\u6570\u636e\u7c7b\u578b"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#_2","text":"ADT \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u540d { //\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u683c\u5f0f \u6570\u636e\u5bf9\u8c61 : < \u6570\u636e\u5bf9\u8c61\u7684\u5b9a\u4e49 > //\u81ea\u7136\u8bed\u8a00 \u6570\u636e\u5173\u7cfb : < \u6570\u636e\u5173\u7cfb\u7684\u5b9a\u4e49 > //\u81ea\u7136\u8bed\u8a00 \u57fa\u672c\u64cd\u4f5c : < \u57fa\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49 > } ADT \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u540d ; //\u57fa\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49\u683c\u5f0f \u57fa\u672c\u64cd\u4f5c\u540d ( \u53c2\u6570\u8868 ) //\u53c2\u6570\u8868\u4e2d\u8d4b\u503c\u53c2\u6570\u53ea\u63d0\u4f9b\u8f93\u5165\u503c\uff0c\u5f15\u7528\u53c2\u6570\u4ee5&\u6253\u5934\uff0c\u53ef\u63d0\u4f9b\u8f93\u5165\u503c\u548c\u8fd4\u56de\u64cd\u4f5c\u7ed3\u679c \u521d\u59cb\u6761\u4ef6 : < \u521d\u59cb\u6761\u4ef6\u63cf\u8ff0 > \u64cd\u4f5c\u7ed3\u679c : < \u64cd\u4f5c\u7ed3\u679c\u63cf\u8ff0 >","title":"\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49\u683c\u5f0f"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#012","text":"","title":"0.1.2 \u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#_3","text":"\u5b9a\u4e49\uff1a\u903b\u8f91\u7ed3\u6784\u662f\u6307\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb\uff0c\u5373\u4ece\u903b\u8f91\u5173\u7cfb\u4e0a\u63cf\u8ff0\u6570\u636e\u3002 \u5206\u7c7b\uff1a \u7ebf\u6027\u7ed3\u6784\uff1a\u4e00\u822c\u7ebf\u6027\u8868\u3001\u53d7\u9650\u7ebf\u6027\u8868\uff08\u6808\u548c\u961f\u5217\uff09\u3001\u7ebf\u6027\u8868\u63a8\u5e7f\uff08\u6570\u7ec4\uff09 \u975e\u7ebf\u6027\u7ed3\u6784\uff1a\u96c6\u5408\u7ed3\u6784\u3001\u6811\u7ed3\u6784\u3001\u56fe\u7ed3\u6784","title":"\u903b\u8f91\u7ed3\u6784"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#_4","text":"\u5b9a\u4e49\uff1a\u5b58\u50a8\u7ed3\u6784\u662f\u6307\u6570\u636e\u7ed3\u6784\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u8868\u793a\uff0c\u4e5f\u79f0\u7269\u7406\u7ed3\u6784 \u5206\u7c7b\uff1a \u5b58\u50a8\u7ed3\u6784 \u5b9a\u4e49 \u4f18\u70b9 \u7f3a\u70b9 \u987a\u5e8f\u5b58\u50a8 \u628a\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u5143\u7d20\u5b58\u50a8\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb\u7684\u5b58\u50a8\u5355\u5143\u4e2d\uff0c\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u7531\u5b58\u50a8\u5355\u5143\u7684\u90bb\u63a5\u5173\u7cfb\u6765\u4f53\u73b0 \u968f\u673a\u5b58\u53d6\uff0c\u5360\u7528\u7a7a\u95f4\u5c11 \u4f7f\u7528\u4e00\u6574\u5757\u76f8\u90bb\u7684\u5b58\u50a8\u5355\u5143\uff0c\u4ea7\u751f\u8f83\u591a\u788e\u7247 \u94fe\u5f0f\u5b58\u50a8 \u4e0d\u8981\u6c42\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u5143\u7d20\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb\uff0c\u501f\u52a9\u6307\u793a\u5143\u7d20\u5b58\u50a8\u5730\u5740\u7684\u6307\u9488\u6765\u8868\u793a\u5143\u7d20\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb \u4e0d\u4f1a\u51fa\u73b0\u788e\u7247\uff0c\u5145\u5206\u5229\u7528\u6240\u6709\u5b58\u50a8\u5355\u5143 \u9700\u8981\u989d\u5916\u7a7a\u95f4\uff0c\u53ea\u80fd\u987a\u5e8f\u5b58\u53d6 \u7d22\u5f15\u5b58\u50a8 \u5728\u5b58\u50a8\u5143\u7d20\u4fe1\u606f\u7684\u540c\u65f6\uff0c\u8fd8\u5efa\u7acb\u9644\u52a0\u7684\u7d22\u5f15\u8868\u3002 \u68c0\u7d22\u901f\u5ea6\u5feb \u9644\u52a0\u7684\u7d22\u5f15\u8868\u9700\u8981\u989d\u5916\u7a7a\u95f4\u3002\u589e\u5220\u6570\u636e\u4fee\u6539\u7d22\u5f15\u8868\u65f6\u82b1\u8d39\u65f6\u95f4 \u6563\u5217\u5b58\u50a8 \u6839\u636e\u5143\u7d20\u7684\u5173\u952e\u5b57\u76f4\u63a5\u8ba1\u7b97\u51fa\u8be5\u5143\u7d20\u7684\u5b58\u50a8\u5730\u5740\uff0c\u53c8\u79f0\u54c8\u5e0c(Hash)\u5b58\u50a8\u3002 \u68c0\u7d22\u3001\u589e\u52a0\u548c\u5220\u9664\u7ed3\u70b9\u7684\u64cd\u4f5c\u5f88\u5feb \u53ef\u80fd\u51fa\u73b0\u5143\u7d20\u5b58\u50a8\u5355\u5143\u7684\u51b2\u7a81\uff0c\u89e3\u51b3\u51b2\u7a81\u4f1a\u589e\u52a0\u65f6\u95f4\u548c\u7a7a\u95f4\u5f00\u9500","title":"\u5b58\u50a8\u7ed3\u6784"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#_5","text":"\u5b9a\u4e49\uff1a\u65bd\u52a0\u5728\u6570\u636e\u4e0a\u7684\u8fd0\u7b97\u5305\u62ec\u8fd0\u7b97\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0\u3002 \u5b9a\u4e49\u662f\u9488\u5bf9\u903b\u8f91\u7ed3\u6784\u7684\uff0c\u6307\u51fa\u8fd0\u7b97\u7684\u529f\u80fd\uff1b \u8fd0\u7b97\u7684\u5b9e\u73b0\u662f\u9488\u5bf9\u5b58\u50a8\u7ed3\u6784\u7684\uff0c\u6307\u51fa\u8fd0\u7b97\u7684\u5177\u4f53\u64cd\u4f5c\u6b65\u9aa4\u3002","title":"\u6570\u636e\u7684\u8fd0\u7b97"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#02","text":"","title":"0.2 \u7b97\u6cd5\u548c\u7b97\u6cd5\u8bc4\u4ef7"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#021","text":"\u5b9a\u4e49\uff1a\u7b97\u6cd5\u662f\u9488\u5bf9\u7279\u5b9a\u95ee\u9898\u6c42\u89e3\u6b65\u9aa4\u7684\u4e00\u79cd\u63cf\u8ff0\uff0c\u5b83\u662f\u6307\u4ee4\u7684\u6709\u9650\u5e8f\u5217\uff0c\u5176\u4e2d\u7684\u6bcf\u6761\u6307\u4ee4\u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u3002 \u7279\u6027\uff1a \u8f93\u5165\uff0c\u96f6\u4e2a\u6216\u591a\u4e2a \u8f93\u51fa\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a \u786e\u5b9a\u6027\uff0c\u6bcf\u6761\u6307\u4ee4\u542b\u6709\u786e\u5b9a\uff0c\u76f8\u540c\u7684\u8f93\u5165\u5f97\u51fa\u76f8\u540c\u7684\u7ed3\u679c \u6709\u7a77\u6027 \u53ef\u884c\u6027\uff0c\u6240\u6709\u53ef\u4ee5\u901a\u8fc7\u5df2\u7ecf\u5b9e\u73b0\u7684\u57fa\u7840\u8fd0\u7b97\u64cd\u4f5c\u6709\u9650\u6b21\u6765\u5b9e\u73b0 \u8bc4\u4ef7\u6807\u51c6: \u6b63\u786e\u6027\uff1a\u6b63\u786e\u7ed3\u679c \u53ef\u8bfb\u6027 \u5065\u58ee\u6027\uff1a\u8f93\u5165\u6570\u636e\u975e\u6cd5\u65f6\uff0c\u80fd\u591f\u9002\u5f53\u7684\u4f5c\u51fa\u53cd\u5e94\u6216\u76f8\u5e94\u5904\u7406\uff0c\u4e0d\u4f1a\u4ea7\u751f\u83ab\u540d\u5176\u5999\u7684\u8f93\u51fa\u7ed3\u679c \u9ad8\u6548\u6027\uff1a\u65f6\u95f4\u548c\u7a7a\u95f4","title":"0.2.1 \u7b97\u6cd5\u7684\u5b9a\u4e49\u3001\u7279\u6027\u548c\u8bc4\u4ef7\u6807\u51c6"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#022","text":"\u7b97\u6cd5\u6548\u7387\u5206\u4e3a\u65f6\u95f4\u6548\u7387\u548c\u7a7a\u95f4\u6548\u7387 \u65f6\u95f4\u590d\u6742\u5ea6\u5b9a\u4e49: \\(T(n)=O(f(n)\\) \u7a7a\u95f4\u590d\u6742\u5ea6\u5b9a\u4e49: \\(S(n)=O(g(n))\\) \u51fd\u6570\u6e10\u8fd1\u7684\u754c \\(O(g(n))\\) ,\u5b58\u5728\u6b63\u6570 \\(c\\) \u548c \\(n_0\\) \u4f7f\u5f97\u5bf9\u4e8e\u4e00\u5207 \\(n\\geq n_0, 0\\leq f(n)\\leq cg(n)\\) \u6ce8\u610f\uff1a \u539f\u5730\u5de5\u4f5c\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1); \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u4ec5\u4ec5\u4f9d\u8d56\u4e8e\u6570\u636e\u7684\u89c4\u6a21\uff0c\u4e5f\u53d6\u51b3\u4e8e\u5f85\u8f93\u5165\u6570\u636e\u7684\u6027\u8d28\uff0c\u5982\u6570\u636e\u7684\u521d\u59cb\u72b6\u6001\uff1b","title":"0.2.2 \u7b97\u6cd5\u6548\u7387\u7684\u5ea6\u91cf"},{"location":"00-%E7%BB%AA%E8%AE%BA/00-%E7%BB%AA%E8%AE%BA/#_6","text":"\u786e\u5b9a\u8868\u793a\u8f93\u5165\u89c4\u6a21\u7684\u53c2\u6570 \u627e\u51fa\u7b97\u6cd5\u7684\u57fa\u672c\u64cd\u4f5c \u68c0\u67e5\u57fa\u672c\u64cd\u4f5c\u7684\u6267\u884c\u6b21\u6570\u662f\u5426\u53ea\u4f9d\u8d56\u4e8e\u8f93\u5165\u89c4\u6a21\u3002\u8fd9\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8003\u8651\u6700\u5dee\u3001\u5e73\u5747\u4ee5\u53ca\u6700\u4f18\u60c5\u51b5\u4e0b\u7684\u590d\u6742\u6027 \u5bf9\u4e8e\u975e\u9012\u5f52\u7b97\u6cd5\uff0c\u5efa\u7acb\u7b97\u6cd5\u57fa\u672c\u64cd\u4f5c\u6267\u884c\u6b21\u6570\u7684\u6c42\u548c\u8868\u8fbe\u5f0f\uff1b\u5bf9\u4e8e\u9012\u5f52\u7b97\u6cd5\uff0c- \u5efa\u7acb\u7b97\u6cd5\u57fa\u672c\u64cd\u4f5c\u6267\u884c\u6b21\u6570\u7684\u9012\u63a8\u5173\u7cfb\u53ca\u5176\u521d\u59cb\u6761\u4ef6 \u5229\u7528\u6c42\u548c\u516c\u5f0f\u548c\u6cd5\u5219\u5efa\u7acb\u4e00\u4e2a\u64cd\u4f5c\u6b21\u6570\u7684\u95ed\u5408\u516c\u5f0f\uff0c\u6216\u8005\u6c42\u89e3\u9012\u63a8\u516c\u5f0f\uff0c\u786e\u5b9a\u589e\u957f\u7684\u9636 \u52a0\u6cd5\u6cd5\u5219\uff1a \\[T(n)=T_1(n)+T_2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n)))\\] \u4e58\u6cd5\u6cd5\u5219\uff1a \\[T(n)=T_1(n)\\times T_2(n)=O(f(n))\\times O(g(n))=O(f(n))\\times O(g(n))\\] \u5e38\u89c1\u7684\u590d\u6742\u5ea6\uff1a \\[O(1) \\leq O(log_2n)\\leq O(n) \\leq O(n log_2n) \\leq O(n^2)\\] \\[\\leq O(n^3) \\leq O(2^n) \\leq O(n!) \\leq O(n^n)\\] \u4e24\u7c7b\u9012\u5f52\u7b97\u6cd5\u95ee\u9898\u7684\u590d\u6742\u5ea6\u6c42\u89e3\uff1a \u7ebf\u6027\u5206\u89e3 \\[T(n)=\\begin{cases} O(1) & n=1\\\\ aT(n-1)+f(n)& n>1 \\end{cases}\\] \\[T (n) = a^{n-1}T(1)+\\sum_{i=2}^n a^{n-i}f(i)\\] \u6307\u6570\u5206\u89e3 \\[T(n)=\\begin{cases} O(1) & n=1\\\\ aT(\\frac nb)+f(n)& n>1 \\end{cases}\\] \\[T(n)=n^{log_b a}T(1)+\\sum_{j=0}^{log_b n-1}a^jf(\\frac n{b^j})\\]","title":"\u7b97\u6cd5\u590d\u6742\u5ea6\u5206\u6790\u6b65\u9aa4"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.1%E7%BA%BF%E6%80%A7%E8%A1%A8/","text":"\u7ebf\u6027\u8868 \u2014\u2014 Linear List \u00b6 \u4e00\u3001\u7ebf\u6027\u8868\u7684\u5b9a\u4e49\uff1a \u00b6 \u7ebf\u6027\u8868 \u662fn\u4e2a\u5177\u6709\u76f8\u540c\u7279\u6027\u7684\u6570\u636e\u5143\u7d20\u7684\u6709\u9650\u5e8f\u5217\u3002 \u4e8c\u3001\u7ebf\u6027\u8868\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u6ce8 \uff1a\u53c2\u6570\u4ee3\u201c&\u201d\u8868\u793a\u5f15\u7528\uff0c\u4f5c\u7528\u76f8\u5f53\u4e8e\u6307\u9488\uff0c\u4f46\u66f4\u5b89\u5168 \u5bf9\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u67e5\u6539 InitList ( & L ); //\u521d\u59cb\u5316\u8868\uff1a\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u7ebf\u6027\u8868L\uff0c\u5206\u914d\u5185\u5b58\u7a7a\u95f4 DestoryList ( & L ); //\u9500\u6bc1\u64cd\u4f5c\uff1a\u9500\u6bc1\u7ebf\u6027\u8868\uff0c\u5e76\u91ca\u653e\u7ebf\u6027\u8868L\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4 ListInsert ( & L , i , e ); //\u63d2\u5165\u64cd\u4f5c\uff1a\u5728\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a\u67e5\u5165\u6307\u5b9a\u5143\u7d20e ListDelete ( & L , i , & e ); //\u5220\u9664\u64cd\u4f5c\uff1a\u5220\u9664\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c/*\u5e76\u7528e\u53cd\u56de\u5220\u9664\u5143\u7d20\u7684\u503c*/ LocateElem ( L , e ); //\u6309\u503c\u67e5\u627e\u64cd\u4f5c GetElem ( L , i ); //\u6309\u4f4d\u67e5\u627e\u64cd\u4f5c //\u5176\u5b83\u5e38\u7528\u64cd\u4f5c Length ( L ); //\u6c42\u8868\u957f Print ( L ); //\u8f93\u51fa\u64cd\u4f5c Empty ( L ); //\u5224\u7a7a\u64cd\u4f5c \u4e09\u3001\u5b58\u50a8\u7ed3\u6784 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8 \u56db\u3001\u7ebf\u6027\u8868\u5206\u7c7b \u00b6 \u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\uff1a\u987a\u5e8f\u8868 \u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8\uff1a\u5355\u53cc\u94fe\u8868\u3001\u5faa\u73af\u94fe\u8868 \u9759\u6001\u94fe\u8868\u6bd4\u8f83\u7279\u6b8a\uff1a\u903b\u8f91\u4e0a\u79bb\u6563\uff0c\u7269\u7406\u4e0a\u8fde\u7eed","title":"1.1\u7ebf\u6027\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.1%E7%BA%BF%E6%80%A7%E8%A1%A8/#linear-list","text":"","title":"\u7ebf\u6027\u8868 \u2014\u2014 Linear List"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.1%E7%BA%BF%E6%80%A7%E8%A1%A8/#_1","text":"\u7ebf\u6027\u8868 \u662fn\u4e2a\u5177\u6709\u76f8\u540c\u7279\u6027\u7684\u6570\u636e\u5143\u7d20\u7684\u6709\u9650\u5e8f\u5217\u3002","title":"\u4e00\u3001\u7ebf\u6027\u8868\u7684\u5b9a\u4e49\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.1%E7%BA%BF%E6%80%A7%E8%A1%A8/#_2","text":"\u6ce8 \uff1a\u53c2\u6570\u4ee3\u201c&\u201d\u8868\u793a\u5f15\u7528\uff0c\u4f5c\u7528\u76f8\u5f53\u4e8e\u6307\u9488\uff0c\u4f46\u66f4\u5b89\u5168 \u5bf9\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u67e5\u6539 InitList ( & L ); //\u521d\u59cb\u5316\u8868\uff1a\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u7ebf\u6027\u8868L\uff0c\u5206\u914d\u5185\u5b58\u7a7a\u95f4 DestoryList ( & L ); //\u9500\u6bc1\u64cd\u4f5c\uff1a\u9500\u6bc1\u7ebf\u6027\u8868\uff0c\u5e76\u91ca\u653e\u7ebf\u6027\u8868L\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4 ListInsert ( & L , i , e ); //\u63d2\u5165\u64cd\u4f5c\uff1a\u5728\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a\u67e5\u5165\u6307\u5b9a\u5143\u7d20e ListDelete ( & L , i , & e ); //\u5220\u9664\u64cd\u4f5c\uff1a\u5220\u9664\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c/*\u5e76\u7528e\u53cd\u56de\u5220\u9664\u5143\u7d20\u7684\u503c*/ LocateElem ( L , e ); //\u6309\u503c\u67e5\u627e\u64cd\u4f5c GetElem ( L , i ); //\u6309\u4f4d\u67e5\u627e\u64cd\u4f5c //\u5176\u5b83\u5e38\u7528\u64cd\u4f5c Length ( L ); //\u6c42\u8868\u957f Print ( L ); //\u8f93\u51fa\u64cd\u4f5c Empty ( L ); //\u5224\u7a7a\u64cd\u4f5c","title":"\u4e8c\u3001\u7ebf\u6027\u8868\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.1%E7%BA%BF%E6%80%A7%E8%A1%A8/#_3","text":"\u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8","title":"\u4e09\u3001\u5b58\u50a8\u7ed3\u6784"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.1%E7%BA%BF%E6%80%A7%E8%A1%A8/#_4","text":"\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\uff1a\u987a\u5e8f\u8868 \u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8\uff1a\u5355\u53cc\u94fe\u8868\u3001\u5faa\u73af\u94fe\u8868 \u9759\u6001\u94fe\u8868\u6bd4\u8f83\u7279\u6b8a\uff1a\u903b\u8f91\u4e0a\u79bb\u6563\uff0c\u7269\u7406\u4e0a\u8fde\u7eed","title":"\u56db\u3001\u7ebf\u6027\u8868\u5206\u7c7b"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/","text":"\u987a\u5e8f\u8868\u2014\u2014 Sequence List \u00b6 \u4e00\u3001\u987a\u5e8f\u8868\u7684\u5b9a\u4e49 \u00b6 \u987a\u5e8f\u8868 \uff1a\u7ebf\u6027\u8868\u7684 \u987a\u5e8f\u5b58\u50a8 \uff0c\u5b83\u662f\u7528\u4e00\u7ec4\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u4f9d\u6b21\u5b58\u50a8\u7ebf\u6027\u8868\u4e2d\u7684\u6570\u636e\u5143\u7d20\uff0c\u4f7f\u5f97 \u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb \u3002 \u4e8c\u3001\u987a\u5e8f\u8868\u7684\u7279\u70b9 \u00b6 \u2460\u968f\u673a\u8bbf\u95ee\uff1a\u53ef\u76f4\u63a5\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee \u2461\u5b58\u50a8\u5bc6\u5ea6\u9ad8\uff1a\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u6570\u636e\u5143\u7d20 \u2462\u62d3\u5c55\u5bb9\u91cf\u4e0d\u65b9\u4fbf\uff1a\u5373\u4fbf\u91c7\u7528\u52a8\u6001\u5206\u914d\u65b9\u5f0f\uff0c\u8fc1\u79fb\u6570\u636e\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u6bd4\u8f83\u9ad8 \u2463\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u4e0d\u65b9\u4fbf\uff1a\u9700\u8981\u79fb\u52a8\u5927\u91cf\u5143\u7d20 \u4e09\u3001\u987a\u5e8f\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u9759\u6001\u5206\u914d \u548c \u52a8\u6001\u5206\u914d \u56db\u3001\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u4e0a\u7684\u64cd\u4f5c \u00b6 \u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u7684\u4f18\u7f3a\u70b9 \u00b6 \u7f3a\u70b9 \uff1a\u987a\u5e8f\u8868\u7684\u8868\u957f\u786e\u5b9a\u540e\u65e0\u6cd5\u4fee\u6539\uff0c\u5b58\u6ee1\u4e86\u5c31\u5b58\u4e0d\u4e86\u4e86 \u987a\u5e8f\u8868\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 #define MaxSize 10; //\u5b9a\u4e49\u6700\u5927\u957f\u5ea6 typedef struct { int data [ MaxSize ]; //\u201c\u9759\u6001\u201d\u7684\u6570\u7ec4\u5b58\u6570\u636e\uff0c\u5b58int\u6570\u636e int length ; //\u987a\u5e8f\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SqList ; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316 void InitList ( SqList & L ){ for ( int i = 0 ; i < MaxSize ; i ++ ){ L . data = [ i ] = 0 ; //\u5c06\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u4e3a\u9ed8\u8ba4\u503c0 } L . length = 0 ; //\u987a\u5e8f\u8868\u957f\u5ea6\u521d\u59cb\u4e3a0 } \u63d2\u5165 \u00b6 //\u63d2\u5165\u64cd\u4f5c\uff1a\u5728\u987a\u5e8f\u8868L\u7684\u7b2ci\u4e2a(\u4f4d\u5e8f)\u4e0a\u63d2\u5165x bool ListInsert ( SqList & L , int i , int e ){ if ( i < 1 || i > L . length + 1 ) //\u5224\u65adi\u7684\u8303\u56f4\u662f\u5426\u6709\u6548 return false ; if ( L . length >= MaxSize ) //\u5f53\u5b58\u50a8\u7a7a\u95f4\u5df2\u6ee1\u65f6\uff0c\u4e0d\u80fd\u63d2\u5165 return false ; for ( int j = L . length ; j >= i ; j -- ) L . data [ j ] = L . data [ j -1 ]; //\u5c06\u7b2ci\u4e2a\u53ca\u540e\u9762\u7684\u5143\u7d20\u540e\u79fb L . data [ i -1 ] = e ; //\u5c06e\u653e\u5230\u7b2ci\u4e2a\u4f4d\u7f6e L . length ++ ; //\u957f\u5ea6+1 } \u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u00b6 \u6700\u597d\u60c5\u51b5\uff1a\u63d2\u5230\u8868\u5c3e\uff0c\u4e0d\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u63d2\u5230\u8868\u5934\uff0c\u79fb\u52a8n\u4e2a\u5143\u7d20\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u63d2\u5165\u6982\u7387\u4e3ap=1/n+1\uff0c\u5219\u5faa\u73afnp+(n-1)p+\u2026+1p=n/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5220\u9664 \u00b6 //\u5220\u9664\u64cd\u4f5c\uff1a\u5220\u9664\u987a\u5e8f\u8868L\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u5143\u7d20\u503c bool ListDelete ( SqList & L , int i , int & e ){ if ( i < 1 || i > L . length + 1 ){ //\u5224\u65adi\u7684\u8303\u56f4\u662f\u5426\u6709\u6548 return false ; } else { e = L . data [ i -1 ]; //\u5c06\u88ab\u5220\u9664\u7684\u5143\u7d20\u8d4b\u503c\u7ed9e for ( int j = i ; j < L . length ; j ++ ){ L . data [ j ] = L . data [ j -1 ]; //\u5c06\u7b2ci\u4e2a\u540e\u9762\u7684\u5143\u7d20\u524d\u79fb } L . length -- ; //\u957f\u5ea6-1 return ture ; } } \u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u00b6 \u6700\u597d\u60c5\u51b5\uff1a\u5220\u9664\u8868\u5c3e\uff0c\u4e0d\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u5220\u9664\u8868\u5934\uff0c\u79fb\u52a8n-1\u4e2a\u5143\u7d20\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u5220\u9664\u6982\u7387\u4e3ap=1/n\uff0c\u5219\u5faa\u73af(n-1)p+(n-2)p+\u2026+1p=(n-1)/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u67e5\u627e \u00b6 \u6309\u4f4d\u67e5\u627e \u00b6 //\u6309\u4f4d\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u5143\u7d20\u503c int GetElem ( Sqlist L , int i ){ return L . data [ i -1 ]; } \u6309\u4f4d\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6=O(1) \u6309\u503c\u67e5\u627e \u00b6 //\u6309\u503c\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868L\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3ax\u7684\u5143\u7d20\u7684\u4f4d\u7f6e int LocateElem ( Sqlist L , int e ){ for ( int i = 0 ; i < L . length ; i ++ ){ if ( L . data [ i ] == e ) return i + 1 ; //\u8fd4\u56de\u5143\u7d20\u4f4d\u7f6e } return -1 ; //\u67e5\u627e\u5931\u8d25\uff0c\u8fd4\u56de-1 } \u6309\u503c\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u6700\u597d\u60c5\u51b5\uff1a\u76ee\u6807\u5728\u8868\u5934\uff0c\u5faa\u73af1\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u76ee\u6807\u5728\u8868\u5c3e\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u5220\u9664\u6982\u7387\u4e3ap=1/n\uff0c\u5219\u5faa\u73af(n-1)p+(n-2)p+\u2026+1p=(n+1)/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u65e0\u9500\u6bc1 \u00b6 \u7cfb\u7edf\u81ea\u52a8\u9500\u6bc1 \u4e94\u3001\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u4e0a\u7684\u64cd\u4f5c \u00b6 \u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u7684\u4f18\u7f3a\u70b9\uff1a \u00b6 \u4f18\u70b9 \uff1a\u53ef\u4ee5\u52a8\u6001\u589e\u52a0\u957f\u5ea6 \u7f3a\u70b9 \uff1a\u52a8\u6001\u589e\u52a0\u957f\u5ea6\u4e2d\u7684\u8fc1\u79fb\u5de5\u4f5c\u65f6\u95f4\u5f00\u9500\u5927 \u987a\u5e8f\u8868\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct { int * data ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u6570\u7ec4\u7684\u6307\u9488 int MaxSize ; //\u987a\u5e8f\u8868\u7684\u6700\u5927\u957f\u5ea6 int length ; //\u987a\u5e8f\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SqList ; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316 void InitList ( SqList & L ){ //\u7528malloc\u51fd\u6570\u7533\u8bf7\u4e00\u7247\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4 L . data = ( int * ) malloc ( InitSize * sizeof ( int )); L . MaxSize = InitSize ; L . length = 0 ; //\u987a\u5e8f\u8868\u957f\u5ea6\u521d\u59cb\u4e3a0 } \u52a8\u6001\u589e\u52a0\u6570\u7ec4\u957f\u5ea6 \u00b6 \u65b9\u6cd5\uff1a\u501f\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u539f\u6765\u987a\u5e8f\u8868\uff0c\u65b0\u5efa\u4e00\u4e2a\u66f4\u5927\u7684\u987a\u5e8f\u8868\uff0c\u5c06\u539f\u6570\u636e\u8fc1\u79fb\u8fc7\u6765\uff0c\u5e76\u66f4\u6539\u987a\u5e8f\u8868\u5927\u5c0f\uff0c\u6700\u540e\u91ca\u653e\u539f\u987a\u5e8f\u8868\u7a7a\u95f4 //\u52a8\u6001\u5206\u914d void IncreaseSize ( SqlList & L , int len ){ int * p = L . data ; L . data = ( int * ) malloc (( L . InitSize + len ) * sizeof ( int )); for ( int i = 0 ; i < L . length ; i ++ ){ L . data [ i ] = p [ i ]; //\u5c06\u6570\u636e\u8fc1\u79fb\u81f3\u65b0\u533a\u57df } L . MaxSize = L . MaxSize + len ; //\u987a\u5e8f\u8868\u6700\u5927\u957f\u5ea6+len free ( p ); //\u91ca\u653e\u539f\u6765\u7684\u5185\u5b58\u7a7a\u95f4 } \u63d2\u5165 \u00b6 \u5728\u9759\u6001\u5206\u914d\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u679c\u5bb9\u91cf\u4e0d\u591f\uff0c\u5219\u52a8\u6001\u589e\u52a0 //\u63d2\u5165\u64cd\u4f5c\uff1a\u5728\u987a\u5e8f\u8868L\u7684\u7b2ci\u4e2a(\u4f4d\u5e8f)\u4e0a\u63d2\u5165x bool ListInsert ( SqList & L , int i , int e ){ if ( i < 1 || i > L . length + 1 ) //\u5224\u65adi\u7684\u8303\u56f4\u662f\u5426\u6709\u6548 return false ; if ( L . length >= MaxSize ) //\u5f53\u5b58\u50a8\u7a7a\u95f4\u5df2\u6ee1\u65f6\uff0c\u52a8\u6001\u589e\u52a0\u6570\u7ec4\u957f\u5ea6 IncreaseSize ( L , 10 ); for ( int j = L . length ; j >= i ; j -- ) L . data [ j ] = L . data [ j -1 ]; //\u5c06\u7b2ci\u4e2a\u53ca\u540e\u9762\u7684\u5143\u7d20\u540e\u79fb L . data [ i -1 ] = e ; //\u5c06e\u653e\u5230\u7b2ci\u4e2a\u4f4d\u7f6e L . length ++ ; //\u957f\u5ea6+1 } \u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u00b6 \u6700\u597d\u60c5\u51b5\uff1a\u63d2\u5230\u8868\u5c3e\uff0c\u4e0d\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u63d2\u5230\u8868\u5934\uff0c\u79fb\u52a8n\u4e2a\u5143\u7d20\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u63d2\u5165\u6982\u7387\u4e3ap=1/n+1\uff0c\u5219\u5faa\u73afnp+(n-1)p+\u2026+1p=n/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5220\u9664(\u4e0e\u9759\u6001\u4e00\u6837) \u00b6 //\u5220\u9664\u64cd\u4f5c\uff1a\u5220\u9664\u987a\u5e8f\u8868L\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u5143\u7d20\u503c bool ListDelete ( SqList & L , int i , int & e ){ if ( i < 1 || i > L . length + 1 ){ //\u5224\u65adi\u7684\u8303\u56f4\u662f\u5426\u6709\u6548 return false ; } else { e = L . data [ i -1 ]; //\u5c06\u88ab\u5220\u9664\u7684\u5143\u7d20\u8d4b\u503c\u7ed9e for ( int j = i ; j < L . length ; j ++ ){ L . data [ j ] = L . data [ j -1 ]; //\u5c06\u7b2ci\u4e2a\u540e\u9762\u7684\u5143\u7d20\u524d\u79fb } L . length -- ; //\u957f\u5ea6-1 return ture ; } } \u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u00b6 \u6700\u597d\u60c5\u51b5\uff1a\u5220\u9664\u8868\u5c3e\uff0c\u4e0d\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u5220\u9664\u8868\u5934\uff0c\u79fb\u52a8n-1\u4e2a\u5143\u7d20\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u5220\u9664\u6982\u7387\u4e3ap=1/n\uff0c\u5219\u5faa\u73af(n-1)p+(n-2)p+\u2026+1p=(n-1)/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u67e5\u627e(\u4e0e\u9759\u6001\u4e00\u6837) \u00b6 \u6309\u4f4d\u67e5\u627e \u00b6 //\u6309\u4f4d\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u5143\u7d20\u503c int GetElem ( Sqlist L , int i ){ return L . data [ i -1 ]; } \u6309\u4f4d\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6=O(1) \u6309\u503c\u67e5\u627e \u00b6 //\u6309\u503c\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868L\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3ax\u7684\u5143\u7d20\u7684\u4f4d\u7f6e int LocateElem ( Sqlist L , int e ){ for ( int i = 0 ; i < L . length ; i ++ ){ if ( L . data [ i ] == e ) return i + 1 ; //\u8fd4\u56de\u5143\u7d20\u4f4d\u7f6e } return -1 ; //\u67e5\u627e\u5931\u8d25\uff0c\u8fd4\u56de-1 } \u6309\u503c\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u6700\u597d\u60c5\u51b5\uff1a\u76ee\u6807\u5728\u8868\u5934\uff0c\u5faa\u73af1\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u76ee\u6807\u5728\u8868\u5c3e\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u5220\u9664\u6982\u7387\u4e3ap=1/n\uff0c\u5219\u5faa\u73af(n-1)p+(n-2)p+\u2026+1p=(n+1)/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u9500\u6bc1 \u00b6 //\u9500\u6bc1\u64cd\u4f5c void DestroyList ( Sqlist & L ){ free ( L . data ); L . length = 0 ; L . MaxSize = 0 ; L . data = nullptr ; //\u4ee4\u5176\u4e3a\u7a7a\u6307\u9488 } \u516d\u3001\u5171\u540c\u7684\u64cd\u4f5c \u00b6 \u6c42\u8868\u957f \u00b6 //\u6c42\u8868\u957f int Length ( Sqlist L ){ return L . length ; } \u904d\u5386 \u00b6 //\u904d\u5386\u64cd\u4f5c void PrintList ( Sqlist L ){ for ( int i = 0 ; i < L . length ; i ++ ){ cout << L . data [ i ] << \" \" ; } cout << endl ; } \u5224\u7a7a \u00b6 //\u5224\u7a7a\u64cd\u4f5c int Empty ( Sqlist L ){ return L . length == 0 ? 1 : 0 ; } \u4e03\u3001\u5b8c\u6574\u4ee3\u7801 \u00b6 //\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u7684\u5b8c\u6574\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; #define MaxSize 100 //\u5b9a\u4e49\u7ebf\u6027\u8868\u7684\u6700\u5927\u957f\u5ea6 typedef struct Sqlist { int data [ MaxSize ]; int length ; } Sqlist ; //\u521d\u59cb\u5316 void Init ( Sqlist & L ){ L . length = 0 ; } //\u6c42\u8868\u957f int Length ( Sqlist L ){ return L . length ; } //\u63d2\u5165\u64cd\u4f5c\uff1a\u5728\u8868\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a\u63d2\u5165x void Insert ( Sqlist & L , int i , int x ){ if ( i < 1 || i > L . length + 1 || L . length >= MaxSize ){ cout << x << \" Insert failed.\" << endl ; return ; } for ( int j = L . length ; j >= i ; j -- ){ //\u7b2ci\u4e2a\u53ca\u4ee5\u540e\u7684\u5143\u7d20\u540e\u79fb L . data [ j ] = L . data [ j -1 ]; } L . data [ i -1 ] = x ; L . length ++ ; } //\u904d\u5386\u64cd\u4f5c void PrintList ( Sqlist L ){ cout << \"L: \" ; for ( int i = 0 ; i < L . length ; i ++ ){ cout << L . data [ i ] << \" \" ; } cout << endl ; } //\u6309\u503c\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868L\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3ax\u7684\u5143\u7d20\u7684\u4f4d\u7f6e int LocateElem ( Sqlist L , int x ){ for ( int i = 0 ; i < L . length ; i ++ ){ if ( L . data [ i ] == x ) return i + 1 ; //\u8fd4\u56de\u5143\u7d20\u4f4d\u7f6e } return -1 ; //\u67e5\u627e\u5931\u8d25\uff0c\u8fd4\u56de-1 } //\u6309\u4f4d\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u5143\u7d20\u503c int GetElem ( Sqlist L , int i ){ return L . data [ i -1 ]; } //\u5220\u9664\u64cd\u4f5c\uff1a\u5220\u9664\u987a\u5e8f\u8868L\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u5143\u7d20\u503c int Delete ( Sqlist & L , int i , int & x ){ if ( i < 1 || i > L . length ){ return -1 ; } else { x = L . data [ i -1 ]; for ( int j = i ; j < L . length ; j ++ ){ L . data [ j -1 ] = L . data [ j ]; } L . length -- ; return x ; } } //\u5224\u7a7a\u64cd\u4f5c int Empty ( Sqlist L ){ return L . length == 0 ? 1 : 0 ; } int main (){ Sqlist L ; Init ( L ); Insert ( L , 1 , 50 ); Insert ( L , 2 , 60 ); Insert ( L , 1 , 40 ); Insert ( L , 1 , 666 ); Insert ( L , 5 , 70 ); Insert ( L , 6 , 40 ); Insert ( L , 7 , 100 ); cout << \"\u957f\u5ea6\uff1a\" << Length ( L ) << endl ; PrintList ( L ); int x ; cout << \"\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\uff1a\" << GetElem ( L , 3 ) << endl ; cout << \"40\u5728\u7b2c\" << LocateElem ( L , 40 ) << \"\u4f4d\" << endl ; cout << \"\u5220\u9664\" << Delete ( L , 6 , x ) << endl ; PrintList ( L ); if ( ! Empty ( L )){ cout << \"L\u4e0d\u4e3a\u7a7a\" << endl ; } else { cout << \"L\u4e3a\u7a7a\" << endl ; } return 0 ; }","title":"1.2\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#sequence-list","text":"","title":"\u987a\u5e8f\u8868\u2014\u2014 Sequence List"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_1","text":"\u987a\u5e8f\u8868 \uff1a\u7ebf\u6027\u8868\u7684 \u987a\u5e8f\u5b58\u50a8 \uff0c\u5b83\u662f\u7528\u4e00\u7ec4\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u4f9d\u6b21\u5b58\u50a8\u7ebf\u6027\u8868\u4e2d\u7684\u6570\u636e\u5143\u7d20\uff0c\u4f7f\u5f97 \u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb \u3002","title":"\u4e00\u3001\u987a\u5e8f\u8868\u7684\u5b9a\u4e49"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_2","text":"\u2460\u968f\u673a\u8bbf\u95ee\uff1a\u53ef\u76f4\u63a5\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee \u2461\u5b58\u50a8\u5bc6\u5ea6\u9ad8\uff1a\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u6570\u636e\u5143\u7d20 \u2462\u62d3\u5c55\u5bb9\u91cf\u4e0d\u65b9\u4fbf\uff1a\u5373\u4fbf\u91c7\u7528\u52a8\u6001\u5206\u914d\u65b9\u5f0f\uff0c\u8fc1\u79fb\u6570\u636e\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u6bd4\u8f83\u9ad8 \u2463\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u4e0d\u65b9\u4fbf\uff1a\u9700\u8981\u79fb\u52a8\u5927\u91cf\u5143\u7d20","title":"\u4e8c\u3001\u987a\u5e8f\u8868\u7684\u7279\u70b9"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_3","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u9759\u6001\u5206\u914d \u548c \u52a8\u6001\u5206\u914d","title":"\u4e09\u3001\u987a\u5e8f\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_4","text":"","title":"\u56db\u3001\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u4e0a\u7684\u64cd\u4f5c"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_5","text":"\u7f3a\u70b9 \uff1a\u987a\u5e8f\u8868\u7684\u8868\u957f\u786e\u5b9a\u540e\u65e0\u6cd5\u4fee\u6539\uff0c\u5b58\u6ee1\u4e86\u5c31\u5b58\u4e0d\u4e86\u4e86","title":"\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u7684\u4f18\u7f3a\u70b9"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_6","text":"#define MaxSize 10; //\u5b9a\u4e49\u6700\u5927\u957f\u5ea6 typedef struct { int data [ MaxSize ]; //\u201c\u9759\u6001\u201d\u7684\u6570\u7ec4\u5b58\u6570\u636e\uff0c\u5b58int\u6570\u636e int length ; //\u987a\u5e8f\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SqList ;","title":"\u987a\u5e8f\u8868\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_7","text":"//\u521d\u59cb\u5316 void InitList ( SqList & L ){ for ( int i = 0 ; i < MaxSize ; i ++ ){ L . data = [ i ] = 0 ; //\u5c06\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u4e3a\u9ed8\u8ba4\u503c0 } L . length = 0 ; //\u987a\u5e8f\u8868\u957f\u5ea6\u521d\u59cb\u4e3a0 }","title":"\u521d\u59cb\u5316"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_8","text":"//\u63d2\u5165\u64cd\u4f5c\uff1a\u5728\u987a\u5e8f\u8868L\u7684\u7b2ci\u4e2a(\u4f4d\u5e8f)\u4e0a\u63d2\u5165x bool ListInsert ( SqList & L , int i , int e ){ if ( i < 1 || i > L . length + 1 ) //\u5224\u65adi\u7684\u8303\u56f4\u662f\u5426\u6709\u6548 return false ; if ( L . length >= MaxSize ) //\u5f53\u5b58\u50a8\u7a7a\u95f4\u5df2\u6ee1\u65f6\uff0c\u4e0d\u80fd\u63d2\u5165 return false ; for ( int j = L . length ; j >= i ; j -- ) L . data [ j ] = L . data [ j -1 ]; //\u5c06\u7b2ci\u4e2a\u53ca\u540e\u9762\u7684\u5143\u7d20\u540e\u79fb L . data [ i -1 ] = e ; //\u5c06e\u653e\u5230\u7b2ci\u4e2a\u4f4d\u7f6e L . length ++ ; //\u957f\u5ea6+1 }","title":"\u63d2\u5165"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_9","text":"\u6700\u597d\u60c5\u51b5\uff1a\u63d2\u5230\u8868\u5c3e\uff0c\u4e0d\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u63d2\u5230\u8868\u5934\uff0c\u79fb\u52a8n\u4e2a\u5143\u7d20\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u63d2\u5165\u6982\u7387\u4e3ap=1/n+1\uff0c\u5219\u5faa\u73afnp+(n-1)p+\u2026+1p=n/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n)","title":"\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_10","text":"//\u5220\u9664\u64cd\u4f5c\uff1a\u5220\u9664\u987a\u5e8f\u8868L\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u5143\u7d20\u503c bool ListDelete ( SqList & L , int i , int & e ){ if ( i < 1 || i > L . length + 1 ){ //\u5224\u65adi\u7684\u8303\u56f4\u662f\u5426\u6709\u6548 return false ; } else { e = L . data [ i -1 ]; //\u5c06\u88ab\u5220\u9664\u7684\u5143\u7d20\u8d4b\u503c\u7ed9e for ( int j = i ; j < L . length ; j ++ ){ L . data [ j ] = L . data [ j -1 ]; //\u5c06\u7b2ci\u4e2a\u540e\u9762\u7684\u5143\u7d20\u524d\u79fb } L . length -- ; //\u957f\u5ea6-1 return ture ; } }","title":"\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_11","text":"\u6700\u597d\u60c5\u51b5\uff1a\u5220\u9664\u8868\u5c3e\uff0c\u4e0d\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u5220\u9664\u8868\u5934\uff0c\u79fb\u52a8n-1\u4e2a\u5143\u7d20\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u5220\u9664\u6982\u7387\u4e3ap=1/n\uff0c\u5219\u5faa\u73af(n-1)p+(n-2)p+\u2026+1p=(n-1)/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n)","title":"\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_12","text":"","title":"\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_13","text":"//\u6309\u4f4d\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u5143\u7d20\u503c int GetElem ( Sqlist L , int i ){ return L . data [ i -1 ]; }","title":"\u6309\u4f4d\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_14","text":"\u65f6\u95f4\u590d\u6742\u5ea6=O(1)","title":"\u6309\u4f4d\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_15","text":"//\u6309\u503c\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868L\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3ax\u7684\u5143\u7d20\u7684\u4f4d\u7f6e int LocateElem ( Sqlist L , int e ){ for ( int i = 0 ; i < L . length ; i ++ ){ if ( L . data [ i ] == e ) return i + 1 ; //\u8fd4\u56de\u5143\u7d20\u4f4d\u7f6e } return -1 ; //\u67e5\u627e\u5931\u8d25\uff0c\u8fd4\u56de-1 }","title":"\u6309\u503c\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_16","text":"\u6700\u597d\u60c5\u51b5\uff1a\u76ee\u6807\u5728\u8868\u5934\uff0c\u5faa\u73af1\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u76ee\u6807\u5728\u8868\u5c3e\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u5220\u9664\u6982\u7387\u4e3ap=1/n\uff0c\u5219\u5faa\u73af(n-1)p+(n-2)p+\u2026+1p=(n+1)/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n)","title":"\u6309\u503c\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_17","text":"\u7cfb\u7edf\u81ea\u52a8\u9500\u6bc1","title":"\u65e0\u9500\u6bc1"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_18","text":"","title":"\u4e94\u3001\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u4e0a\u7684\u64cd\u4f5c"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_19","text":"\u4f18\u70b9 \uff1a\u53ef\u4ee5\u52a8\u6001\u589e\u52a0\u957f\u5ea6 \u7f3a\u70b9 \uff1a\u52a8\u6001\u589e\u52a0\u957f\u5ea6\u4e2d\u7684\u8fc1\u79fb\u5de5\u4f5c\u65f6\u95f4\u5f00\u9500\u5927","title":"\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u7684\u4f18\u7f3a\u70b9\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_20","text":"typedef struct { int * data ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u6570\u7ec4\u7684\u6307\u9488 int MaxSize ; //\u987a\u5e8f\u8868\u7684\u6700\u5927\u957f\u5ea6 int length ; //\u987a\u5e8f\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SqList ;","title":"\u987a\u5e8f\u8868\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_21","text":"//\u521d\u59cb\u5316 void InitList ( SqList & L ){ //\u7528malloc\u51fd\u6570\u7533\u8bf7\u4e00\u7247\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4 L . data = ( int * ) malloc ( InitSize * sizeof ( int )); L . MaxSize = InitSize ; L . length = 0 ; //\u987a\u5e8f\u8868\u957f\u5ea6\u521d\u59cb\u4e3a0 }","title":"\u521d\u59cb\u5316"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_22","text":"\u65b9\u6cd5\uff1a\u501f\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u539f\u6765\u987a\u5e8f\u8868\uff0c\u65b0\u5efa\u4e00\u4e2a\u66f4\u5927\u7684\u987a\u5e8f\u8868\uff0c\u5c06\u539f\u6570\u636e\u8fc1\u79fb\u8fc7\u6765\uff0c\u5e76\u66f4\u6539\u987a\u5e8f\u8868\u5927\u5c0f\uff0c\u6700\u540e\u91ca\u653e\u539f\u987a\u5e8f\u8868\u7a7a\u95f4 //\u52a8\u6001\u5206\u914d void IncreaseSize ( SqlList & L , int len ){ int * p = L . data ; L . data = ( int * ) malloc (( L . InitSize + len ) * sizeof ( int )); for ( int i = 0 ; i < L . length ; i ++ ){ L . data [ i ] = p [ i ]; //\u5c06\u6570\u636e\u8fc1\u79fb\u81f3\u65b0\u533a\u57df } L . MaxSize = L . MaxSize + len ; //\u987a\u5e8f\u8868\u6700\u5927\u957f\u5ea6+len free ( p ); //\u91ca\u653e\u539f\u6765\u7684\u5185\u5b58\u7a7a\u95f4 }","title":"\u52a8\u6001\u589e\u52a0\u6570\u7ec4\u957f\u5ea6"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_23","text":"\u5728\u9759\u6001\u5206\u914d\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u679c\u5bb9\u91cf\u4e0d\u591f\uff0c\u5219\u52a8\u6001\u589e\u52a0 //\u63d2\u5165\u64cd\u4f5c\uff1a\u5728\u987a\u5e8f\u8868L\u7684\u7b2ci\u4e2a(\u4f4d\u5e8f)\u4e0a\u63d2\u5165x bool ListInsert ( SqList & L , int i , int e ){ if ( i < 1 || i > L . length + 1 ) //\u5224\u65adi\u7684\u8303\u56f4\u662f\u5426\u6709\u6548 return false ; if ( L . length >= MaxSize ) //\u5f53\u5b58\u50a8\u7a7a\u95f4\u5df2\u6ee1\u65f6\uff0c\u52a8\u6001\u589e\u52a0\u6570\u7ec4\u957f\u5ea6 IncreaseSize ( L , 10 ); for ( int j = L . length ; j >= i ; j -- ) L . data [ j ] = L . data [ j -1 ]; //\u5c06\u7b2ci\u4e2a\u53ca\u540e\u9762\u7684\u5143\u7d20\u540e\u79fb L . data [ i -1 ] = e ; //\u5c06e\u653e\u5230\u7b2ci\u4e2a\u4f4d\u7f6e L . length ++ ; //\u957f\u5ea6+1 }","title":"\u63d2\u5165"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_24","text":"\u6700\u597d\u60c5\u51b5\uff1a\u63d2\u5230\u8868\u5c3e\uff0c\u4e0d\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u63d2\u5230\u8868\u5934\uff0c\u79fb\u52a8n\u4e2a\u5143\u7d20\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u63d2\u5165\u6982\u7387\u4e3ap=1/n+1\uff0c\u5219\u5faa\u73afnp+(n-1)p+\u2026+1p=n/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n)","title":"\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_25","text":"//\u5220\u9664\u64cd\u4f5c\uff1a\u5220\u9664\u987a\u5e8f\u8868L\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u5143\u7d20\u503c bool ListDelete ( SqList & L , int i , int & e ){ if ( i < 1 || i > L . length + 1 ){ //\u5224\u65adi\u7684\u8303\u56f4\u662f\u5426\u6709\u6548 return false ; } else { e = L . data [ i -1 ]; //\u5c06\u88ab\u5220\u9664\u7684\u5143\u7d20\u8d4b\u503c\u7ed9e for ( int j = i ; j < L . length ; j ++ ){ L . data [ j ] = L . data [ j -1 ]; //\u5c06\u7b2ci\u4e2a\u540e\u9762\u7684\u5143\u7d20\u524d\u79fb } L . length -- ; //\u957f\u5ea6-1 return ture ; } }","title":"\u5220\u9664(\u4e0e\u9759\u6001\u4e00\u6837)"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_26","text":"\u6700\u597d\u60c5\u51b5\uff1a\u5220\u9664\u8868\u5c3e\uff0c\u4e0d\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u5220\u9664\u8868\u5934\uff0c\u79fb\u52a8n-1\u4e2a\u5143\u7d20\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u5220\u9664\u6982\u7387\u4e3ap=1/n\uff0c\u5219\u5faa\u73af(n-1)p+(n-2)p+\u2026+1p=(n-1)/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n)","title":"\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_27","text":"","title":"\u67e5\u627e(\u4e0e\u9759\u6001\u4e00\u6837)"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_28","text":"//\u6309\u4f4d\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u5143\u7d20\u503c int GetElem ( Sqlist L , int i ){ return L . data [ i -1 ]; }","title":"\u6309\u4f4d\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_29","text":"\u65f6\u95f4\u590d\u6742\u5ea6=O(1)","title":"\u6309\u4f4d\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_30","text":"//\u6309\u503c\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868L\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3ax\u7684\u5143\u7d20\u7684\u4f4d\u7f6e int LocateElem ( Sqlist L , int e ){ for ( int i = 0 ; i < L . length ; i ++ ){ if ( L . data [ i ] == e ) return i + 1 ; //\u8fd4\u56de\u5143\u7d20\u4f4d\u7f6e } return -1 ; //\u67e5\u627e\u5931\u8d25\uff0c\u8fd4\u56de-1 }","title":"\u6309\u503c\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_31","text":"\u6700\u597d\u60c5\u51b5\uff1a\u76ee\u6807\u5728\u8868\u5934\uff0c\u5faa\u73af1\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u76ee\u6807\u5728\u8868\u5c3e\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u8bbe\u5220\u9664\u6982\u7387\u4e3ap=1/n\uff0c\u5219\u5faa\u73af(n-1)p+(n-2)p+\u2026+1p=(n+1)/2\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n)","title":"\u6309\u503c\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_32","text":"//\u9500\u6bc1\u64cd\u4f5c void DestroyList ( Sqlist & L ){ free ( L . data ); L . length = 0 ; L . MaxSize = 0 ; L . data = nullptr ; //\u4ee4\u5176\u4e3a\u7a7a\u6307\u9488 }","title":"\u9500\u6bc1"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_33","text":"","title":"\u516d\u3001\u5171\u540c\u7684\u64cd\u4f5c"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_34","text":"//\u6c42\u8868\u957f int Length ( Sqlist L ){ return L . length ; }","title":"\u6c42\u8868\u957f"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_35","text":"//\u904d\u5386\u64cd\u4f5c void PrintList ( Sqlist L ){ for ( int i = 0 ; i < L . length ; i ++ ){ cout << L . data [ i ] << \" \" ; } cout << endl ; }","title":"\u904d\u5386"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_36","text":"//\u5224\u7a7a\u64cd\u4f5c int Empty ( Sqlist L ){ return L . length == 0 ? 1 : 0 ; }","title":"\u5224\u7a7a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA/#_37","text":"//\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u7684\u5b8c\u6574\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; #define MaxSize 100 //\u5b9a\u4e49\u7ebf\u6027\u8868\u7684\u6700\u5927\u957f\u5ea6 typedef struct Sqlist { int data [ MaxSize ]; int length ; } Sqlist ; //\u521d\u59cb\u5316 void Init ( Sqlist & L ){ L . length = 0 ; } //\u6c42\u8868\u957f int Length ( Sqlist L ){ return L . length ; } //\u63d2\u5165\u64cd\u4f5c\uff1a\u5728\u8868\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a\u63d2\u5165x void Insert ( Sqlist & L , int i , int x ){ if ( i < 1 || i > L . length + 1 || L . length >= MaxSize ){ cout << x << \" Insert failed.\" << endl ; return ; } for ( int j = L . length ; j >= i ; j -- ){ //\u7b2ci\u4e2a\u53ca\u4ee5\u540e\u7684\u5143\u7d20\u540e\u79fb L . data [ j ] = L . data [ j -1 ]; } L . data [ i -1 ] = x ; L . length ++ ; } //\u904d\u5386\u64cd\u4f5c void PrintList ( Sqlist L ){ cout << \"L: \" ; for ( int i = 0 ; i < L . length ; i ++ ){ cout << L . data [ i ] << \" \" ; } cout << endl ; } //\u6309\u503c\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868L\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3ax\u7684\u5143\u7d20\u7684\u4f4d\u7f6e int LocateElem ( Sqlist L , int x ){ for ( int i = 0 ; i < L . length ; i ++ ){ if ( L . data [ i ] == x ) return i + 1 ; //\u8fd4\u56de\u5143\u7d20\u4f4d\u7f6e } return -1 ; //\u67e5\u627e\u5931\u8d25\uff0c\u8fd4\u56de-1 } //\u6309\u4f4d\u67e5\u627e\uff1a\u8fd4\u56de\u987a\u5e8f\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u5143\u7d20\u503c int GetElem ( Sqlist L , int i ){ return L . data [ i -1 ]; } //\u5220\u9664\u64cd\u4f5c\uff1a\u5220\u9664\u987a\u5e8f\u8868L\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u5143\u7d20\u503c int Delete ( Sqlist & L , int i , int & x ){ if ( i < 1 || i > L . length ){ return -1 ; } else { x = L . data [ i -1 ]; for ( int j = i ; j < L . length ; j ++ ){ L . data [ j -1 ] = L . data [ j ]; } L . length -- ; return x ; } } //\u5224\u7a7a\u64cd\u4f5c int Empty ( Sqlist L ){ return L . length == 0 ? 1 : 0 ; } int main (){ Sqlist L ; Init ( L ); Insert ( L , 1 , 50 ); Insert ( L , 2 , 60 ); Insert ( L , 1 , 40 ); Insert ( L , 1 , 666 ); Insert ( L , 5 , 70 ); Insert ( L , 6 , 40 ); Insert ( L , 7 , 100 ); cout << \"\u957f\u5ea6\uff1a\" << Length ( L ) << endl ; PrintList ( L ); int x ; cout << \"\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\uff1a\" << GetElem ( L , 3 ) << endl ; cout << \"40\u5728\u7b2c\" << LocateElem ( L , 40 ) << \"\u4f4d\" << endl ; cout << \"\u5220\u9664\" << Delete ( L , 6 , x ) << endl ; PrintList ( L ); if ( ! Empty ( L )){ cout << \"L\u4e0d\u4e3a\u7a7a\" << endl ; } else { cout << \"L\u4e3a\u7a7a\" << endl ; } return 0 ; }","title":"\u4e03\u3001\u5b8c\u6574\u4ee3\u7801"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/","text":"\u5355\u94fe\u8868\u2014\u2014 Singly Linked List \u00b6 \u4e00\u3001\u5355\u94fe\u8868\u7684\u5b9a\u4e49 \u00b6 \u5355\u94fe\u8868 \uff1a\u7ebf\u6027\u8868\u7684 \u94fe\u5f0f\u5b58\u50a8 \uff0c\u5b83\u662f\u901a\u8fc7\u4e00\u7ec4\u4efb\u610f\u7684\u5b58\u50a8\u5355\u5143\u6765\u5b58\u50a8\u7ebf\u6027\u8868\u4e2d\u7684\u6570\u636e\u5143\u7d20\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\uff0c\u56e0\u6b64\u5b83\u4e0d\u8981\u6c42\u5728\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb\u3002 \u4e8c\u3001\u5355\u94fe\u8868\u7684\u7279\u70b9 \u00b6 \u2460\u4e0d\u80fd\u968f\u673a\u8bbf\u95ee\uff1a\u904d\u5386\u67e5\u627e\u8bbf\u95ee \u2461\u5b58\u50a8\u5bc6\u5ea6\u4e0d\u9ad8\uff1a\u6bcf\u4e2a\u8282\u70b9\u65e2\u8981\u5b58\u6570\u636e\u5143\u7d20\u53c8\u8981\u5b58\u6307\u9488 \u2462\u62d3\u5c55\u5bb9\u91cf\u65b9\u4fbf\uff1a\u76f4\u63a5\u7528\u5efa\u7acb\u5355\u94fe\u8868\u62d3\u5c55 \u2463\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u65b9\u4fbf\uff1a\u77e5\u9053\u4f4d\u7f6e\u76f4\u63a5\u63d2\u5165\u548c\u5220\u9664 \u4e09\u3001\u5355\u94fe\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u65b9\u4fbf\uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9\uff0c\u4e0d\u660e\u786e\u7684\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684 \u4e0d\u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u9ebb\u70e6\uff0c\u8981\u533a\u5206\u7b2c\u4e00\u4e2a\u6570\u636e\u548c\u540e\u7eed\u6570\u636e\u7684\u5904\u7406 \u6ce8 \uff1a\u8fd9\u4e24\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\uff1a\u7c7b\u578b\u63cf\u8ff0\u76f8\u540c\uff0c\u521d\u59cb\u5316\u548c\u5224\u7a7a\u4e0d\u540c \u56db\u3001\u5355\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c \u00b6 \u5355\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b int data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode , * LinkList ; \u521d\u59cb\u5316\u548c\u5224\u7a7a \u00b6 \u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u521d\u59cb\u5316\u548c\u5224\u7a7a \u00b6 //\u521d\u59cb\u5316 void InitList ( LinkList & L ){ L = NULL ; L -> next = NULL ; } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( LinkList L ){ if ( L == NULL ){ return true ; } else { return false ; } } \u5e26\u5934\u7ed3\u70b9\u7684\u521d\u59cb\u5316\u548c\u5224\u7a7a \u00b6 //\u521d\u59cb\u5316 void InitList ( LinkList & L ){ L = ( LNode * ) malloc ( sizeof ( LinkList )); L -> next = NULL ; } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( LinkList L ){ if ( L -> next == NULL ){ return true ; } else { return false ; } } \u5efa\u7acb\u5355\u94fe\u8868 \u00b6 \u5934\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 \u00b6 \u7528\u4e8e\u94fe\u8868\u7684\u9006\u7f6e //\u5934\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList HeadInsert ( LinkList & L ){ InitList ( L ); //\u521d\u59cb\u5316 int x ; cin >> x ; while ( x != 9999 ){ //\u8f93\u51659999\u8868\u793a\u7ed3\u675f LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; s -> next = L -> next ; L -> next = s ; cin >> x ; } return L ; } \u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 \u00b6 //\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList TailInsert ( LinkList & L ){ InitList ( L ); LNode * s , * r = L ; int x ; cin >> x ; while ( x != 9999 ){ s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; r -> next = s ; r = s ; cin >> x ; } r -> next = NULL ; return L ; } \u63d2\u5165 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u5e26\u5934\u7ed3\u70b9\u7684\u63d2\u5165 \u00b6 //\u5c06x\u63d2\u5165\u5230\u5355\u94fe\u8868L\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a bool Insert ( LinkList & L , int i , int e ){ if ( i < 1 ) return false ; LNode * p = GetElem ( L , i -1 ); //\u67e5\u627e\u7b2ci\u4e2a\u4f4d\u7f6e return InsertNextNode ( p , e ); //\u7528\u540e\u63d2\u64cd\u4f5c\uff0c\u63d2\u5728p\u540e\u9762 } \u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u63d2\u5165 \u00b6 //\u5c06x\u63d2\u5165\u5230\u5355\u94fe\u8868L\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a bool Insert ( LinkList & L , int i , int e ){ if ( i < 1 ) return false ; if ( i == 1 ){ LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = e ; s -> next = L ; L = s ; return true ; } LNode * p = GetElem ( L , i -1 ); //\u67e5\u627e\u7b2ci\u4e2a\u4f4d\u7f6e return InsertNextNode ( p , e ); //\u7528\u540e\u63d2\u64cd\u4f5c\uff0c\u63d2\u5728p\u540e\u9762 } \u6307\u5b9a\u7ed3\u70b9\u7684\u540e\u63d2\u64cd\u4f5c \u00b6 //\u540e\u63d2\u64cd\u4f5c\uff1a\u5728p\u7ed3\u70b9\u4e4b\u540e\u63d2\u5165\u5143\u7d20e bool InsertNextNode ( LNode * p , int e ){ if ( p == NULL ) return false ; LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); if ( s == NULL ) return false ; s -> data = e ; s -> next = p -> next ; p -> next = s ; return true ; } \u6307\u5b9a\u7ed3\u70b9\u7684\u524d\u63d2\u64cd\u4f5c \u00b6 \u8fd8\u662f\u63d2\u5728p\u540e\u9762\uff0c\u53ea\u4e0d\u8fc7\u8ba9p\u548c\u63d2\u5165\u7ed3\u70b9\u7684\u503c\u4ea4\u6362 //\u524d\u63d2\u64cd\u4f5c\uff1a\u5728p\u7ed3\u70b9\u4e4b\u524d\u63d2\u5165\u5143\u7d20e bool InsertPriorNode ( LNode * p , int e ){ if ( p == NULL ) return false ; LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); if ( s == NULL ) return false ; s -> next = p -> next ; p -> next = s ; s -> data = p -> data ; p -> data = e ; return true ; } \u5220\u9664 \u00b6 \u6309\u4f4d\u5e8f\u5220\u9664 \u00b6 //\u5220\u9664\u64cd\u4f5c:\u5c06\u5355\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 bool Delete ( LinkList & L , int i int & e ){ if ( i < 1 || i > Length ( L )) return false ; LNode * p = GetElem ( L , i -1 ); //\u67e5\u627e\u7b2ci\u4e2a\u4f4d\u7f6e LNode * q = p -> next ; e = q -> data ; p -> next = q -> next ; free ( q ); return true ; } \u6309\u4f4d\u5e8f\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u00b6 \u6700\u597d\u60c5\u51b5\uff1a\u5220\u9664\u7b2c\u4e00\u4e2a\uff0c\u4e0d\u9700\u67e5\u627e\u4f4d\u7f6e\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u5220\u9664\u6700\u540e\u4e00\u4e2a\uff0c\u9700\u67e5\u627e\u7b2cn\u4f4d\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u5220\u9664\u4efb\u610f\u4e00\u4e2a\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u6307\u5b9a\u7ed3\u70b9\u7684\u5220\u9664 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u65b9\u6cd5\uff1ap\u7684\u540e\u4e00\u4e2a\u4e3aq\uff0cp\u6307\u5411q\u7684\u4e0b\u4e00\u4e2a\uff0c\u628aq\u7684\u503c\u7ed9p\uff0c\u6700\u540e\u91ca\u653eq //\u5220\u9664\u6307\u5b9a\u7ed3\u70b9p bool Delete ( LNode * p ){ if ( p == NULL ) return false ; LNode * q = p -> next ; p -> data = q -> data p -> next = q -> next ; free ( q ); return true ; } \u67e5\u627e \u00b6 \u6309\u4f4d\u67e5\u627e \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u5355\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 LNode * GetElem ( LinkList L , int i ){ int j = 0 ; LNode * p = L ; if ( i < 0 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef } \u6309\u503c\u67e5\u627e \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ee\u5728L\u4e2d\u7684\u4f4d\u7f6e LNode * LocateElem ( LinkList L , int e ){ LNode * p = L -> next ; while ( p && p -> data != e ){ p = p -> next ; } return p ; } \u6c42\u8868\u957f \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6c42\u8868\u7684\u957f\u5ea6 int Length ( LinkList L ){ int len = 0 ; LNode * p = L ; while ( P -> next ){ p = p -> next ; len ++ ; } return len ; } \u904d\u5386 \u00b6 //\u904d\u5386\u64cd\u4f5c void PrintList ( LinkList L ){ LNode * p = L -> next ; while ( p ){ cout << p -> data << \" \" ; p = p -> next ; } cout << endl ; } \u4e94\u3001\u5b8c\u6574\u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef struct LNode { int data ; struct LNode * next ; } LNode , * LinkList ; //\u521d\u59cb\u5316 void InitList ( LinkList & L ){ L = ( LNode * ) malloc ( sizeof ( LinkList )); L -> next = NULL ; } //\u904d\u5386\u64cd\u4f5c void PrintList ( LinkList L ){ LNode * p = L -> next ; while ( p ){ cout << p -> data << \" \" ; p = p -> next ; } cout << endl ; } //\u6c42\u5355\u94fe\u8868\u7684\u957f\u5ea6 int Length ( LinkList L ){ LNode * p = L -> next ; int len = 0 ; while ( p ){ len ++ ; p = p -> next ; } return len ; } //\u5934\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList HeadInsert ( LinkList & L ){ InitList ( L ); //\u521d\u59cb\u5316 int x ; cin >> x ; while ( x != 9999 ){ LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; s -> next = L -> next ; L -> next = s ; cin >> x ; } return L ; } //\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList TailInsert ( LinkList & L ){ InitList ( L ); LNode * s , * r = L ; int x ; cin >> x ; while ( x != 9999 ){ s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; r -> next = s ; r = s ; cin >> x ; } r -> next = NULL ; return L ; } //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ex\u5728L\u4e2d\u7684\u4f4d\u7f6e LNode * LocateElem ( LinkList L , int x ){ LNode * p = L -> next ; while ( p && p -> data != x ){ p = p -> next ; } return p ; } //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u5355\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 LNode * GetElem ( LinkList L , int i ){ int j = 1 ; LNode * p = L -> next ; if ( i == 0 ) return L ; if ( i < 1 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef } //\u5c06x\u63d2\u5165\u5230\u5355\u94fe\u8868L\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a void Insert ( LinkList & L , int i , int x ){ LNode * p = GetElem ( L , i -1 ); LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; s -> next = p -> next ; p -> next = s ; } //\u5220\u9664\u64cd\u4f5c:\u5c06\u5355\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 void Delete ( LinkList & L , int i ){ if ( i < 1 || i > Length ( L )){ cout << \"delete failed: index is wrong.\" << endl ; return ; } LNode * p = GetElem ( L , i -1 ); LNode * q = p -> next ; p -> next = q -> next ; free ( q ); } int main (){ //\u521d\u59cb\u5316\uff0c\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList L = TailInsert ( L ); //\u63d2\u5165\uff1a\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u63d2\u5165\u7ed3\u70b9\uff0c\u6570\u636e\u57df\u4e3a888\uff0c\u5e76\u904d\u5386\u5355\u94fe\u8868 Insert ( L , 2 , 888 ); cout << \"\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u63d2\u5165888\uff1a \" ; PrintList ( L ); //\u5220\u9664\uff1a\u5220\u9664\u7b2c\u56db\u4e2a\u7ed3\u70b9 Delete ( L , 4 ); cout << \"\u5220\u9664\u7b2c\u56db\u4e2a\u7ed3\u70b9\u540e\uff1a\" ; PrintList ( L ); //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u7b2c\u4e09\u4e2a\u7ed3\u70b9\uff0c\u5e76\u8f93\u51fa\u5176\u6570\u636e\u57df\u7684\u503c LNode * p = GetElem ( L , 3 ); cout << \"\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u7684\u503c\u4e3a\uff1a\" << p -> data << endl ; //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627e\u6570\u636e\u57df\u4e3a2\u7684\u7ed3\u70b9\u7684\u6307\u9488 LNode * q = LocateElem ( L , 2 ); cout << \"\u6570\u636e\u4e3a2\u7684\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u4e3a\uff1a\" << q -> next -> data << endl ; //\u8f93\u51fa\u5355\u94fe\u8868\u7684\u957f\u5ea6 cout << \"\u5355\u94fe\u8868\u7684\u957f\u5ea6\uff1a\" << Length ( L ) << endl ; return 0 ; } \u8fd0\u884c\u7ed3\u679c\uff1a \u00b6","title":"1.3\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#singly-linked-list","text":"","title":"\u5355\u94fe\u8868\u2014\u2014 Singly Linked List"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_1","text":"\u5355\u94fe\u8868 \uff1a\u7ebf\u6027\u8868\u7684 \u94fe\u5f0f\u5b58\u50a8 \uff0c\u5b83\u662f\u901a\u8fc7\u4e00\u7ec4\u4efb\u610f\u7684\u5b58\u50a8\u5355\u5143\u6765\u5b58\u50a8\u7ebf\u6027\u8868\u4e2d\u7684\u6570\u636e\u5143\u7d20\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\uff0c\u56e0\u6b64\u5b83\u4e0d\u8981\u6c42\u5728\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb\u3002","title":"\u4e00\u3001\u5355\u94fe\u8868\u7684\u5b9a\u4e49"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_2","text":"\u2460\u4e0d\u80fd\u968f\u673a\u8bbf\u95ee\uff1a\u904d\u5386\u67e5\u627e\u8bbf\u95ee \u2461\u5b58\u50a8\u5bc6\u5ea6\u4e0d\u9ad8\uff1a\u6bcf\u4e2a\u8282\u70b9\u65e2\u8981\u5b58\u6570\u636e\u5143\u7d20\u53c8\u8981\u5b58\u6307\u9488 \u2462\u62d3\u5c55\u5bb9\u91cf\u65b9\u4fbf\uff1a\u76f4\u63a5\u7528\u5efa\u7acb\u5355\u94fe\u8868\u62d3\u5c55 \u2463\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u65b9\u4fbf\uff1a\u77e5\u9053\u4f4d\u7f6e\u76f4\u63a5\u63d2\u5165\u548c\u5220\u9664","title":"\u4e8c\u3001\u5355\u94fe\u8868\u7684\u7279\u70b9"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_3","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u65b9\u4fbf\uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9\uff0c\u4e0d\u660e\u786e\u7684\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684 \u4e0d\u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u9ebb\u70e6\uff0c\u8981\u533a\u5206\u7b2c\u4e00\u4e2a\u6570\u636e\u548c\u540e\u7eed\u6570\u636e\u7684\u5904\u7406 \u6ce8 \uff1a\u8fd9\u4e24\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\uff1a\u7c7b\u578b\u63cf\u8ff0\u76f8\u540c\uff0c\u521d\u59cb\u5316\u548c\u5224\u7a7a\u4e0d\u540c","title":"\u4e09\u3001\u5355\u94fe\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_4","text":"","title":"\u56db\u3001\u5355\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_5","text":"typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b int data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode , * LinkList ;","title":"\u5355\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_6","text":"","title":"\u521d\u59cb\u5316\u548c\u5224\u7a7a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_7","text":"//\u521d\u59cb\u5316 void InitList ( LinkList & L ){ L = NULL ; L -> next = NULL ; } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( LinkList L ){ if ( L == NULL ){ return true ; } else { return false ; } }","title":"\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u521d\u59cb\u5316\u548c\u5224\u7a7a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_8","text":"//\u521d\u59cb\u5316 void InitList ( LinkList & L ){ L = ( LNode * ) malloc ( sizeof ( LinkList )); L -> next = NULL ; } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( LinkList L ){ if ( L -> next == NULL ){ return true ; } else { return false ; } }","title":"\u5e26\u5934\u7ed3\u70b9\u7684\u521d\u59cb\u5316\u548c\u5224\u7a7a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_9","text":"","title":"\u5efa\u7acb\u5355\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_10","text":"\u7528\u4e8e\u94fe\u8868\u7684\u9006\u7f6e //\u5934\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList HeadInsert ( LinkList & L ){ InitList ( L ); //\u521d\u59cb\u5316 int x ; cin >> x ; while ( x != 9999 ){ //\u8f93\u51659999\u8868\u793a\u7ed3\u675f LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; s -> next = L -> next ; L -> next = s ; cin >> x ; } return L ; }","title":"\u5934\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_11","text":"//\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList TailInsert ( LinkList & L ){ InitList ( L ); LNode * s , * r = L ; int x ; cin >> x ; while ( x != 9999 ){ s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; r -> next = s ; r = s ; cin >> x ; } r -> next = NULL ; return L ; }","title":"\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_12","text":"\u65f6\u95f4\u590d\u6742\u5ea6 =O(1)","title":"\u63d2\u5165"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_13","text":"//\u5c06x\u63d2\u5165\u5230\u5355\u94fe\u8868L\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a bool Insert ( LinkList & L , int i , int e ){ if ( i < 1 ) return false ; LNode * p = GetElem ( L , i -1 ); //\u67e5\u627e\u7b2ci\u4e2a\u4f4d\u7f6e return InsertNextNode ( p , e ); //\u7528\u540e\u63d2\u64cd\u4f5c\uff0c\u63d2\u5728p\u540e\u9762 }","title":"\u5e26\u5934\u7ed3\u70b9\u7684\u63d2\u5165"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_14","text":"//\u5c06x\u63d2\u5165\u5230\u5355\u94fe\u8868L\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a bool Insert ( LinkList & L , int i , int e ){ if ( i < 1 ) return false ; if ( i == 1 ){ LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = e ; s -> next = L ; L = s ; return true ; } LNode * p = GetElem ( L , i -1 ); //\u67e5\u627e\u7b2ci\u4e2a\u4f4d\u7f6e return InsertNextNode ( p , e ); //\u7528\u540e\u63d2\u64cd\u4f5c\uff0c\u63d2\u5728p\u540e\u9762 }","title":"\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u63d2\u5165"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_15","text":"//\u540e\u63d2\u64cd\u4f5c\uff1a\u5728p\u7ed3\u70b9\u4e4b\u540e\u63d2\u5165\u5143\u7d20e bool InsertNextNode ( LNode * p , int e ){ if ( p == NULL ) return false ; LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); if ( s == NULL ) return false ; s -> data = e ; s -> next = p -> next ; p -> next = s ; return true ; }","title":"\u6307\u5b9a\u7ed3\u70b9\u7684\u540e\u63d2\u64cd\u4f5c"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_16","text":"\u8fd8\u662f\u63d2\u5728p\u540e\u9762\uff0c\u53ea\u4e0d\u8fc7\u8ba9p\u548c\u63d2\u5165\u7ed3\u70b9\u7684\u503c\u4ea4\u6362 //\u524d\u63d2\u64cd\u4f5c\uff1a\u5728p\u7ed3\u70b9\u4e4b\u524d\u63d2\u5165\u5143\u7d20e bool InsertPriorNode ( LNode * p , int e ){ if ( p == NULL ) return false ; LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); if ( s == NULL ) return false ; s -> next = p -> next ; p -> next = s ; s -> data = p -> data ; p -> data = e ; return true ; }","title":"\u6307\u5b9a\u7ed3\u70b9\u7684\u524d\u63d2\u64cd\u4f5c"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_17","text":"","title":"\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_18","text":"//\u5220\u9664\u64cd\u4f5c:\u5c06\u5355\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 bool Delete ( LinkList & L , int i int & e ){ if ( i < 1 || i > Length ( L )) return false ; LNode * p = GetElem ( L , i -1 ); //\u67e5\u627e\u7b2ci\u4e2a\u4f4d\u7f6e LNode * q = p -> next ; e = q -> data ; p -> next = q -> next ; free ( q ); return true ; }","title":"\u6309\u4f4d\u5e8f\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_19","text":"\u6700\u597d\u60c5\u51b5\uff1a\u5220\u9664\u7b2c\u4e00\u4e2a\uff0c\u4e0d\u9700\u67e5\u627e\u4f4d\u7f6e\uff0c\u5faa\u73af0\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u6700\u574f\u60c5\u51b5\uff1a\u5220\u9664\u6700\u540e\u4e00\u4e2a\uff0c\u9700\u67e5\u627e\u7b2cn\u4f4d\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u5e73\u5747\u60c5\u51b5\uff1a\u5220\u9664\u4efb\u610f\u4e00\u4e2a\uff0c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n)","title":"\u6309\u4f4d\u5e8f\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_20","text":"\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u65b9\u6cd5\uff1ap\u7684\u540e\u4e00\u4e2a\u4e3aq\uff0cp\u6307\u5411q\u7684\u4e0b\u4e00\u4e2a\uff0c\u628aq\u7684\u503c\u7ed9p\uff0c\u6700\u540e\u91ca\u653eq //\u5220\u9664\u6307\u5b9a\u7ed3\u70b9p bool Delete ( LNode * p ){ if ( p == NULL ) return false ; LNode * q = p -> next ; p -> data = q -> data p -> next = q -> next ; free ( q ); return true ; }","title":"\u6307\u5b9a\u7ed3\u70b9\u7684\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_21","text":"","title":"\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_22","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u5355\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 LNode * GetElem ( LinkList L , int i ){ int j = 0 ; LNode * p = L ; if ( i < 0 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef }","title":"\u6309\u4f4d\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_23","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ee\u5728L\u4e2d\u7684\u4f4d\u7f6e LNode * LocateElem ( LinkList L , int e ){ LNode * p = L -> next ; while ( p && p -> data != e ){ p = p -> next ; } return p ; }","title":"\u6309\u503c\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_24","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6c42\u8868\u7684\u957f\u5ea6 int Length ( LinkList L ){ int len = 0 ; LNode * p = L ; while ( P -> next ){ p = p -> next ; len ++ ; } return len ; }","title":"\u6c42\u8868\u957f"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_25","text":"//\u904d\u5386\u64cd\u4f5c void PrintList ( LinkList L ){ LNode * p = L -> next ; while ( p ){ cout << p -> data << \" \" ; p = p -> next ; } cout << endl ; }","title":"\u904d\u5386"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_26","text":"#include <bits/stdc++.h> using namespace std ; typedef struct LNode { int data ; struct LNode * next ; } LNode , * LinkList ; //\u521d\u59cb\u5316 void InitList ( LinkList & L ){ L = ( LNode * ) malloc ( sizeof ( LinkList )); L -> next = NULL ; } //\u904d\u5386\u64cd\u4f5c void PrintList ( LinkList L ){ LNode * p = L -> next ; while ( p ){ cout << p -> data << \" \" ; p = p -> next ; } cout << endl ; } //\u6c42\u5355\u94fe\u8868\u7684\u957f\u5ea6 int Length ( LinkList L ){ LNode * p = L -> next ; int len = 0 ; while ( p ){ len ++ ; p = p -> next ; } return len ; } //\u5934\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList HeadInsert ( LinkList & L ){ InitList ( L ); //\u521d\u59cb\u5316 int x ; cin >> x ; while ( x != 9999 ){ LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; s -> next = L -> next ; L -> next = s ; cin >> x ; } return L ; } //\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList TailInsert ( LinkList & L ){ InitList ( L ); LNode * s , * r = L ; int x ; cin >> x ; while ( x != 9999 ){ s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; r -> next = s ; r = s ; cin >> x ; } r -> next = NULL ; return L ; } //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ex\u5728L\u4e2d\u7684\u4f4d\u7f6e LNode * LocateElem ( LinkList L , int x ){ LNode * p = L -> next ; while ( p && p -> data != x ){ p = p -> next ; } return p ; } //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u5355\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 LNode * GetElem ( LinkList L , int i ){ int j = 1 ; LNode * p = L -> next ; if ( i == 0 ) return L ; if ( i < 1 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef } //\u5c06x\u63d2\u5165\u5230\u5355\u94fe\u8868L\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a void Insert ( LinkList & L , int i , int x ){ LNode * p = GetElem ( L , i -1 ); LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = x ; s -> next = p -> next ; p -> next = s ; } //\u5220\u9664\u64cd\u4f5c:\u5c06\u5355\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 void Delete ( LinkList & L , int i ){ if ( i < 1 || i > Length ( L )){ cout << \"delete failed: index is wrong.\" << endl ; return ; } LNode * p = GetElem ( L , i -1 ); LNode * q = p -> next ; p -> next = q -> next ; free ( q ); } int main (){ //\u521d\u59cb\u5316\uff0c\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 LinkList L = TailInsert ( L ); //\u63d2\u5165\uff1a\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u63d2\u5165\u7ed3\u70b9\uff0c\u6570\u636e\u57df\u4e3a888\uff0c\u5e76\u904d\u5386\u5355\u94fe\u8868 Insert ( L , 2 , 888 ); cout << \"\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u63d2\u5165888\uff1a \" ; PrintList ( L ); //\u5220\u9664\uff1a\u5220\u9664\u7b2c\u56db\u4e2a\u7ed3\u70b9 Delete ( L , 4 ); cout << \"\u5220\u9664\u7b2c\u56db\u4e2a\u7ed3\u70b9\u540e\uff1a\" ; PrintList ( L ); //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u7b2c\u4e09\u4e2a\u7ed3\u70b9\uff0c\u5e76\u8f93\u51fa\u5176\u6570\u636e\u57df\u7684\u503c LNode * p = GetElem ( L , 3 ); cout << \"\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u7684\u503c\u4e3a\uff1a\" << p -> data << endl ; //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627e\u6570\u636e\u57df\u4e3a2\u7684\u7ed3\u70b9\u7684\u6307\u9488 LNode * q = LocateElem ( L , 2 ); cout << \"\u6570\u636e\u4e3a2\u7684\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u4e3a\uff1a\" << q -> next -> data << endl ; //\u8f93\u51fa\u5355\u94fe\u8868\u7684\u957f\u5ea6 cout << \"\u5355\u94fe\u8868\u7684\u957f\u5ea6\uff1a\" << Length ( L ) << endl ; return 0 ; }","title":"\u4e94\u3001\u5b8c\u6574\u4ee3\u7801"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_27","text":"","title":"\u8fd0\u884c\u7ed3\u679c\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/","text":"\u53cc\u94fe\u8868\u2014\u2014 Double Linked List \u00b6 \u4e00\u3001\u5355\u94fe\u8868\u7684\u5b9a\u4e49 \u00b6 \u5355\u94fe\u8868\u7684\u7ed3\u70b9\u4e2d\u53ea\u6709\u4e00\u4e2a\u6307\u5411\u5176\u540e\u7ee7\u7684\u6307\u9488\uff0c\u4f7f\u5f97\u5355\u94fe\u8868\u8981\u8bbf\u95ee\u67d0\u4e2a\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u65f6\uff0c\u53ea\u80fd\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u8bbf\u95ee\u540e\u9a71\u7ed3\u70b9\u7684\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u8bbf\u95ee\u524d\u9a71\u7ed3\u70b9\u7684\u590d\u6742\u5ea6\u4e3aO(n)\u3002\u4e3a\u4e86\u514b\u670d\u4e0a\u8ff0\u7f3a\u70b9\uff0c\u5f15\u5165\u4e86\u53cc\u94fe\u8868\u3002 \u53cc\u94fe\u8868 \u7684\u7ed3\u70b9\u4e2d\u6709\u4e24\u4e2a\u6307\u9488 prior \u548c next \uff0c\u5206\u522b\u6307\u5411\u524d\u9a71\u7ed3\u70b9\u548c\u540e\u7ee7\u7ed3\u70b9\u3002 \u4e8c\u3001\u53cc\u94fe\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u65b9\u4fbf\uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9\uff0c\u4e0d\u660e\u786e\u7684\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684 \u4e0d\u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u9ebb\u70e6\uff0c\u8981\u533a\u5206\u7b2c\u4e00\u4e2a\u6570\u636e\u548c\u540e\u7eed\u6570\u636e\u7684\u5904\u7406 \u4e09\u3001\u53cc\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c\uff08\u5e26\u5934\u7ed3\u70b9\uff09 \u00b6 \u53cc\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct DNode { int data ; //\u6570\u636e\u57df struct DNode * prior , * next ; //\u524d\u9a71\u548c\u540e\u7ee7\u6307\u9488 } DNode , * DLinkList ; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316 bool InitList ( DLinkList & L ){ L = ( LNode * ) malloc ( sizeof ( DLinkList )); if ( L == NULL ) return false ; L -> prior = NULL ; L -> next = NULL ; return true ; } \u5224\u7a7a \u00b6 //\u5224\u7a7a\u64cd\u4f5c bool Empty ( DLinkList L ){ if ( L -> next == NULL ){ return true ; } else { return false ; } } \u5efa\u7acb\u53cc\u94fe\u8868 \u00b6 \u5934\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 \u00b6 \u7528\u4e8e\u94fe\u8868\u7684\u9006\u7f6e //\u5934\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 DLinkList HeadInsert ( DLinkList & L ){ InitList ( L ); //\u521d\u59cb\u5316 int x ; cin >> x ; while ( x != 9999 ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; if ( L -> next == NULL ){ s -> next = NULL ; s -> prior = L ; L -> next = s ; } else { s -> next = L -> next ; L -> next -> prior = s ; s -> prior = L ; L -> next = s ; } cin >> x ; } return L ; } \u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 \u00b6 //\u5c3e\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 DLinkList TailInsert ( DLinkList & L ){ InitList ( L ); DNode * s , * r = L ; int x ; cin >> x ; while ( x != 9999 ){ s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; s -> next = NULL ; s -> prior = r ; r -> next = s ; r = s ; cin >> x ; } return L ; } \u63d2\u5165 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 =O(1) //\u5c06x\u63d2\u5165\u5230\u53cc\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 bool Insert ( DNode * p , int x ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); if ( p == NULL || s == NULL ) return false ; s -> data = x ; s -> next = p -> next ; //1 if ( p -> next != NULL ) p -> next -> prior = s ; //2 s -> prior = p ; //3 p -> next = s ; //4 return true ; } //\u5728\u53cc\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u540e\u63d2\u5165s\u7ed3\u70b9 bool Insert ( DNode * p , DNode * s ){ if ( p == NULL || s == NULL ) return false ; s -> next = p -> next ; //1 if ( p -> next != NULL ) p -> next -> prior = s ; //2 s -> prior = p ; //3 p -> next = s ; //4 return true ; } \u5220\u9664 \u00b6 \u6309\u4f4d\u5e8f\u5220\u9664 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u5220\u9664\u64cd\u4f5c:\u5c06\u53cc\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 bool Delete ( DLinkList & L , int i ){ if ( i < 1 || i > Length ( L )) return false ; DNode * p = GetElem ( L , i -1 ); if ( p == NULL ) return false ; DNode * q = p -> next ; p -> next = q -> next ; //1 if ( p -> next != NULL ) q -> next -> prior = p ; //2 free ( q ); return true ; } \u6307\u5b9a\u7ed3\u70b9\u7684\u5220\u9664 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 =O(1) //\u5220\u9664\u64cd\u4f5c:\u5220\u9664\u53cc\u94fe\u8868\u4e2d\u7684p\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9 void DeleteNextNode ( DNode * p ){ if ( p == NULL ) return false ; DNode * q = p -> next ; if ( q == NULL ) return false ; p -> next = q -> next ; //1 if ( p -> next != NULL ) q -> next -> prior = p ; //2 free ( q ); } \u67e5\u627e(\u4e0e\u5355\u94fe\u8868\u5b8c\u5168\u4e00\u6837) \u00b6 \u6309\u4f4d\u67e5\u627e \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u5355\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 DNode * GetElem ( DLinkList L , int i ){ int j = 0 ; DNode * p = L ; if ( i < 0 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef } \u6309\u503c\u67e5\u627e \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ee\u5728L\u4e2d\u7684\u4f4d\u7f6e DNode * LocateElem ( DLinkList L , int e ){ DNode * p = L -> next ; while ( p && p -> data != e ){ p = p -> next ; } return p ; } \u6c42\u8868\u957f(\u4e0e\u5355\u94fe\u8868\u5b8c\u5168\u4e00\u6837) \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6c42\u8868\u7684\u957f\u5ea6 int Length ( DLinkList L ){ int len = 0 ; DNode * p = L ; while ( P -> next ){ p = p -> next ; len ++ ; } return len ; } \u904d\u5386(\u4e0e\u5355\u94fe\u8868\u5b8c\u5168\u4e00\u6837) \u00b6 //\u904d\u5386\u64cd\u4f5c void PrintList ( DLinkList L ){ DNode * p = L -> next ; while ( p ){ cout << p -> data << \" \" ; p = p -> next ; } cout << endl ; } \u9500\u6bc1 \u00b6 //\u9500\u6bc1\u64cd\u4f5c void DestoryList ( DLinkList L ){ //\u5faa\u73af\u91ca\u653e\u5404\u70b9\u7684\u6570\u636e\u7ed3\u70b9 while ( L -> next != NULL ){ DeleteNextNode ( L ); } free ( L ); //\u91ca\u653e\u5934\u7ed3\u70b9 L = NULL ; } \u56db\u3001\u5b8c\u6574\u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef struct DNode { int data ; struct DNode * prior , * next ; } DNode , * DLinkList ; //\u521d\u59cb\u5316 void InitList ( DLinkList & L ){ L = ( DNode * ) malloc ( sizeof ( DLinkList )); L -> prior = NULL ; L -> next = NULL ; } //\u904d\u5386\u64cd\u4f5c void PrintList ( DLinkList L ){ DNode * p = L -> next ; while ( p ){ cout << p -> data << \" \" ; p = p -> next ; } cout << endl ; } //\u6c42\u53cc\u94fe\u8868\u7684\u957f\u5ea6 int Length ( DLinkList L ){ DNode * p = L -> next ; int len = 0 ; while ( p ){ len ++ ; p = p -> next ; } return len ; } //\u5934\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 DLinkList HeadInsert ( DLinkList & L ){ InitList ( L ); //\u521d\u59cb\u5316 int x ; cin >> x ; while ( x != 9999 ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; if ( L -> next == NULL ){ s -> next = NULL ; s -> prior = L ; L -> next = s ; } else { s -> next = L -> next ; L -> next -> prior = s ; s -> prior = L ; L -> next = s ; } cin >> x ; } return L ; } //\u5c3e\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 DLinkList TailInsert ( DLinkList & L ){ InitList ( L ); DNode * s , * r = L ; int x ; cin >> x ; while ( x != 9999 ){ s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; s -> next = NULL ; s -> prior = r ; r -> next = s ; r = s ; cin >> x ; } return L ; } //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ex\u5728L\u4e2d\u7684\u4f4d\u7f6e DNode * LocateElem ( DLinkList L , int x ){ DNode * p = L -> next ; while ( p && p -> data != x ){ p = p -> next ; } return p ; } //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u53cc\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 DNode * GetElem ( DLinkList L , int i ){ int j = 1 ; DNode * p = L -> next ; if ( i == 0 ) return L ; if ( i < 1 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef } //\u5c06x\u63d2\u5165\u5230\u53cc\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 void Insert ( DLinkList & L , DNode * p , int x ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; s -> next = p -> next ; p -> next -> prior = s ; s -> prior = p ; p -> next = s ; } //\u5220\u9664\u64cd\u4f5c:\u5c06\u53cc\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 void Delete ( DLinkList & L , int i ){ if ( i < 1 || i > Length ( L )){ cout << \"delete failed: index is wrong.\" << endl ; return ; } DNode * p = GetElem ( L , i -1 ); DNode * q = p -> next ; p -> next = q -> next ; q -> next -> prior = p ; free ( q ); } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( DLinkList L ){ if ( L -> next == NULL ){ cout << \"L is null\" << endl ; return true ; } else { cout << \"L is not null\" << endl ; return false ; } } int main (){ //\u5c3e\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868\uff0c\u5e76\u904d\u5386\u5355\u94fe\u8868 DLinkList L = TailInsert ( L ); cout << \"L: \" ; PrintList ( L ); DNode * p ; //\u6309\u503c\u67e5\u627e p = LocateElem ( L , 2 ); cout << \"\u503c\u4e3a2\u7684\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u503c\u662f\uff1a\" << p -> next -> data << endl ; cout << \"\u503c\u4e3a2\u7684\u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u503c\u662f\uff1a\" << p -> prior -> data << endl ; //\u6309\u4f4d\u67e5\u627e p = GetElem ( L , 3 ); cout << \"\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u503c\u662f\uff1a\" << p -> data << endl ; //\u63d2\u5165\u64cd\u4f5c Insert ( L , p , 7 ); cout << \"\u5728\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u540e\u9762\u63d2\u5165\u503c\u4e3a7\u7684\u7ed3\u70b9\u540eL\uff1a \" ; PrintList ( L ); //\u5220\u9664\u64cd\u4f5c Delete ( L , 5 ); cout << \"\u5220\u9664\u7b2c\u4e94\u4e2a\u7ed3\u70b9\u540eL\uff1a \" ; PrintList ( L ); //\u6c42\u8868\u957f cout << \"\u8868\u957f\u4e3a\uff1a\" << Length ( L ) << endl ;; //\u5224\u7a7a Empty ( L ); return 0 ; } \u8fd0\u884c\u7ed3\u679c\uff1a \u00b6","title":"1.4\u53cc\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#double-linked-list","text":"","title":"\u53cc\u94fe\u8868\u2014\u2014 Double Linked List"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_1","text":"\u5355\u94fe\u8868\u7684\u7ed3\u70b9\u4e2d\u53ea\u6709\u4e00\u4e2a\u6307\u5411\u5176\u540e\u7ee7\u7684\u6307\u9488\uff0c\u4f7f\u5f97\u5355\u94fe\u8868\u8981\u8bbf\u95ee\u67d0\u4e2a\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u65f6\uff0c\u53ea\u80fd\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u8bbf\u95ee\u540e\u9a71\u7ed3\u70b9\u7684\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u8bbf\u95ee\u524d\u9a71\u7ed3\u70b9\u7684\u590d\u6742\u5ea6\u4e3aO(n)\u3002\u4e3a\u4e86\u514b\u670d\u4e0a\u8ff0\u7f3a\u70b9\uff0c\u5f15\u5165\u4e86\u53cc\u94fe\u8868\u3002 \u53cc\u94fe\u8868 \u7684\u7ed3\u70b9\u4e2d\u6709\u4e24\u4e2a\u6307\u9488 prior \u548c next \uff0c\u5206\u522b\u6307\u5411\u524d\u9a71\u7ed3\u70b9\u548c\u540e\u7ee7\u7ed3\u70b9\u3002","title":"\u4e00\u3001\u5355\u94fe\u8868\u7684\u5b9a\u4e49"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_2","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u65b9\u4fbf\uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9\uff0c\u4e0d\u660e\u786e\u7684\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684 \u4e0d\u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u9ebb\u70e6\uff0c\u8981\u533a\u5206\u7b2c\u4e00\u4e2a\u6570\u636e\u548c\u540e\u7eed\u6570\u636e\u7684\u5904\u7406","title":"\u4e8c\u3001\u53cc\u94fe\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_3","text":"","title":"\u4e09\u3001\u53cc\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c\uff08\u5e26\u5934\u7ed3\u70b9\uff09"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_4","text":"typedef struct DNode { int data ; //\u6570\u636e\u57df struct DNode * prior , * next ; //\u524d\u9a71\u548c\u540e\u7ee7\u6307\u9488 } DNode , * DLinkList ;","title":"\u53cc\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_5","text":"//\u521d\u59cb\u5316 bool InitList ( DLinkList & L ){ L = ( LNode * ) malloc ( sizeof ( DLinkList )); if ( L == NULL ) return false ; L -> prior = NULL ; L -> next = NULL ; return true ; }","title":"\u521d\u59cb\u5316"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_6","text":"//\u5224\u7a7a\u64cd\u4f5c bool Empty ( DLinkList L ){ if ( L -> next == NULL ){ return true ; } else { return false ; } }","title":"\u5224\u7a7a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_7","text":"","title":"\u5efa\u7acb\u53cc\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_8","text":"\u7528\u4e8e\u94fe\u8868\u7684\u9006\u7f6e //\u5934\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 DLinkList HeadInsert ( DLinkList & L ){ InitList ( L ); //\u521d\u59cb\u5316 int x ; cin >> x ; while ( x != 9999 ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; if ( L -> next == NULL ){ s -> next = NULL ; s -> prior = L ; L -> next = s ; } else { s -> next = L -> next ; L -> next -> prior = s ; s -> prior = L ; L -> next = s ; } cin >> x ; } return L ; }","title":"\u5934\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_9","text":"//\u5c3e\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 DLinkList TailInsert ( DLinkList & L ){ InitList ( L ); DNode * s , * r = L ; int x ; cin >> x ; while ( x != 9999 ){ s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; s -> next = NULL ; s -> prior = r ; r -> next = s ; r = s ; cin >> x ; } return L ; }","title":"\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_10","text":"\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) //\u5c06x\u63d2\u5165\u5230\u53cc\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 bool Insert ( DNode * p , int x ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); if ( p == NULL || s == NULL ) return false ; s -> data = x ; s -> next = p -> next ; //1 if ( p -> next != NULL ) p -> next -> prior = s ; //2 s -> prior = p ; //3 p -> next = s ; //4 return true ; } //\u5728\u53cc\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u540e\u63d2\u5165s\u7ed3\u70b9 bool Insert ( DNode * p , DNode * s ){ if ( p == NULL || s == NULL ) return false ; s -> next = p -> next ; //1 if ( p -> next != NULL ) p -> next -> prior = s ; //2 s -> prior = p ; //3 p -> next = s ; //4 return true ; }","title":"\u63d2\u5165"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_11","text":"","title":"\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_12","text":"\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u5220\u9664\u64cd\u4f5c:\u5c06\u53cc\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 bool Delete ( DLinkList & L , int i ){ if ( i < 1 || i > Length ( L )) return false ; DNode * p = GetElem ( L , i -1 ); if ( p == NULL ) return false ; DNode * q = p -> next ; p -> next = q -> next ; //1 if ( p -> next != NULL ) q -> next -> prior = p ; //2 free ( q ); return true ; }","title":"\u6309\u4f4d\u5e8f\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_13","text":"\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) //\u5220\u9664\u64cd\u4f5c:\u5220\u9664\u53cc\u94fe\u8868\u4e2d\u7684p\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9 void DeleteNextNode ( DNode * p ){ if ( p == NULL ) return false ; DNode * q = p -> next ; if ( q == NULL ) return false ; p -> next = q -> next ; //1 if ( p -> next != NULL ) q -> next -> prior = p ; //2 free ( q ); }","title":"\u6307\u5b9a\u7ed3\u70b9\u7684\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_14","text":"","title":"\u67e5\u627e(\u4e0e\u5355\u94fe\u8868\u5b8c\u5168\u4e00\u6837)"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_15","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u5355\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 DNode * GetElem ( DLinkList L , int i ){ int j = 0 ; DNode * p = L ; if ( i < 0 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef }","title":"\u6309\u4f4d\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_16","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ee\u5728L\u4e2d\u7684\u4f4d\u7f6e DNode * LocateElem ( DLinkList L , int e ){ DNode * p = L -> next ; while ( p && p -> data != e ){ p = p -> next ; } return p ; }","title":"\u6309\u503c\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_17","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6c42\u8868\u7684\u957f\u5ea6 int Length ( DLinkList L ){ int len = 0 ; DNode * p = L ; while ( P -> next ){ p = p -> next ; len ++ ; } return len ; }","title":"\u6c42\u8868\u957f(\u4e0e\u5355\u94fe\u8868\u5b8c\u5168\u4e00\u6837)"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_18","text":"//\u904d\u5386\u64cd\u4f5c void PrintList ( DLinkList L ){ DNode * p = L -> next ; while ( p ){ cout << p -> data << \" \" ; p = p -> next ; } cout << endl ; }","title":"\u904d\u5386(\u4e0e\u5355\u94fe\u8868\u5b8c\u5168\u4e00\u6837)"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_19","text":"//\u9500\u6bc1\u64cd\u4f5c void DestoryList ( DLinkList L ){ //\u5faa\u73af\u91ca\u653e\u5404\u70b9\u7684\u6570\u636e\u7ed3\u70b9 while ( L -> next != NULL ){ DeleteNextNode ( L ); } free ( L ); //\u91ca\u653e\u5934\u7ed3\u70b9 L = NULL ; }","title":"\u9500\u6bc1"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_20","text":"#include <bits/stdc++.h> using namespace std ; typedef struct DNode { int data ; struct DNode * prior , * next ; } DNode , * DLinkList ; //\u521d\u59cb\u5316 void InitList ( DLinkList & L ){ L = ( DNode * ) malloc ( sizeof ( DLinkList )); L -> prior = NULL ; L -> next = NULL ; } //\u904d\u5386\u64cd\u4f5c void PrintList ( DLinkList L ){ DNode * p = L -> next ; while ( p ){ cout << p -> data << \" \" ; p = p -> next ; } cout << endl ; } //\u6c42\u53cc\u94fe\u8868\u7684\u957f\u5ea6 int Length ( DLinkList L ){ DNode * p = L -> next ; int len = 0 ; while ( p ){ len ++ ; p = p -> next ; } return len ; } //\u5934\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 DLinkList HeadInsert ( DLinkList & L ){ InitList ( L ); //\u521d\u59cb\u5316 int x ; cin >> x ; while ( x != 9999 ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; if ( L -> next == NULL ){ s -> next = NULL ; s -> prior = L ; L -> next = s ; } else { s -> next = L -> next ; L -> next -> prior = s ; s -> prior = L ; L -> next = s ; } cin >> x ; } return L ; } //\u5c3e\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868 DLinkList TailInsert ( DLinkList & L ){ InitList ( L ); DNode * s , * r = L ; int x ; cin >> x ; while ( x != 9999 ){ s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; s -> next = NULL ; s -> prior = r ; r -> next = s ; r = s ; cin >> x ; } return L ; } //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ex\u5728L\u4e2d\u7684\u4f4d\u7f6e DNode * LocateElem ( DLinkList L , int x ){ DNode * p = L -> next ; while ( p && p -> data != x ){ p = p -> next ; } return p ; } //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u53cc\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 DNode * GetElem ( DLinkList L , int i ){ int j = 1 ; DNode * p = L -> next ; if ( i == 0 ) return L ; if ( i < 1 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef } //\u5c06x\u63d2\u5165\u5230\u53cc\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 void Insert ( DLinkList & L , DNode * p , int x ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); s -> data = x ; s -> next = p -> next ; p -> next -> prior = s ; s -> prior = p ; p -> next = s ; } //\u5220\u9664\u64cd\u4f5c:\u5c06\u53cc\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 void Delete ( DLinkList & L , int i ){ if ( i < 1 || i > Length ( L )){ cout << \"delete failed: index is wrong.\" << endl ; return ; } DNode * p = GetElem ( L , i -1 ); DNode * q = p -> next ; p -> next = q -> next ; q -> next -> prior = p ; free ( q ); } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( DLinkList L ){ if ( L -> next == NULL ){ cout << \"L is null\" << endl ; return true ; } else { cout << \"L is not null\" << endl ; return false ; } } int main (){ //\u5c3e\u63d2\u6cd5\u5efa\u7acb\u53cc\u94fe\u8868\uff0c\u5e76\u904d\u5386\u5355\u94fe\u8868 DLinkList L = TailInsert ( L ); cout << \"L: \" ; PrintList ( L ); DNode * p ; //\u6309\u503c\u67e5\u627e p = LocateElem ( L , 2 ); cout << \"\u503c\u4e3a2\u7684\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u503c\u662f\uff1a\" << p -> next -> data << endl ; cout << \"\u503c\u4e3a2\u7684\u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u503c\u662f\uff1a\" << p -> prior -> data << endl ; //\u6309\u4f4d\u67e5\u627e p = GetElem ( L , 3 ); cout << \"\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u503c\u662f\uff1a\" << p -> data << endl ; //\u63d2\u5165\u64cd\u4f5c Insert ( L , p , 7 ); cout << \"\u5728\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u540e\u9762\u63d2\u5165\u503c\u4e3a7\u7684\u7ed3\u70b9\u540eL\uff1a \" ; PrintList ( L ); //\u5220\u9664\u64cd\u4f5c Delete ( L , 5 ); cout << \"\u5220\u9664\u7b2c\u4e94\u4e2a\u7ed3\u70b9\u540eL\uff1a \" ; PrintList ( L ); //\u6c42\u8868\u957f cout << \"\u8868\u957f\u4e3a\uff1a\" << Length ( L ) << endl ;; //\u5224\u7a7a Empty ( L ); return 0 ; }","title":"\u56db\u3001\u5b8c\u6574\u4ee3\u7801"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.4%E5%8F%8C%E9%93%BE%E8%A1%A8/#_21","text":"","title":"\u8fd0\u884c\u7ed3\u679c\uff1a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/","text":"\u5faa\u73af\u94fe\u8868\u2014\u2014 Double Linked List \u00b6 \u4e00\u3001\u5faa\u73af\u94fe\u8868\u7684\u5b9a\u4e49 \u00b6 \u5faa\u73af\u94fe\u8868 \uff1a\u4e00\u822c\u5305\u62ec\u5faa\u73af\u5faa\u73af\u94fe\u8868\u548c\u5faa\u73af\u5faa\u73af\u94fe\u8868\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u4e8c\u3001\u5faa\u73af\u94fe\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u65b9\u4fbf\uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9\uff0c\u4e0d\u660e\u786e\u7684\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684 \u4e0d\u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u9ebb\u70e6\uff0c\u8981\u533a\u5206\u7b2c\u4e00\u4e2a\u6570\u636e\u548c\u540e\u7eed\u6570\u636e\u7684\u5904\u7406 \u4e09\u3001\u5faa\u73af\u5355\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c\uff08\u5e26\u5934\u7ed3\u70b9\uff09 \u00b6 \u5faa\u73af\u5355\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0(\u4e0e\u5355\u94fe\u8868\u4e00\u6837) \u00b6 typedef struct LNode { //\u5b9a\u4e49\u5faa\u73af\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b int data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode , * LinkList ;; \u521d\u59cb\u5316\u548c\u5224\u7a7a(\u4e0e\u5355\u94fe\u8868\u4e0d\u4e00\u6837) \u00b6 L->next = NULL\u6539\u4e3aL->next = L //\u521d\u59cb\u5316 void InitList ( LinkList & L ){ L = ( LNode * ) malloc ( sizeof ( LinkList )); L -> next = L ; } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( LinkList L ){ if ( L -> next == L ){ return true ; } else { return false ; } } \u5224\u65ad\u8868\u5c3e\u7ed3\u70b9 \u00b6 //\u5224\u65ad\u7ed3\u70b9p\u662f\u5426\u662f\u8868\u5c3e\u7ed3\u70b9 bool isTail ( LinkList L ){ if ( p -> next == L ){ return true ; } else { return false ; } } \u63d2\u5165\u3001\u5220\u9664 \u00b6 \u5faa\u73af\u5355\u94fe\u8868\u7684\u63d2\u5165\u3001\u5220\u9664\u7b97\u6cd5\u4e0e\u5355\u94fe\u8868\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f\u5982\u679c\u5728\u8868\u5c3e\u8fdb\u884c\uff0c\u90a3\u4e48\u8981\u8ba9\u5355\u94fe\u8868\u7ee7\u7eed \u4fdd\u6301\u5faa\u73af\u7684\u6027\u8d28 \uff0c\u5373 \u8ba9\u5c3e\u7ed3\u70b9\u7684next\u57df\u6307\u5411\u5934\u7ed3\u70b9 \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 =O(1) \u67e5\u627e \u00b6 \u5355\u94fe\u8868\u7684\u67e5\u627e\u662f\u4ece\u8868\u5934\u5f00\u59cb\uff0c\u627e\u5230\u8868\u5c3e\u505c\u6b62\u3002\u800c\u5faa\u73af\u5355\u94fe\u8868\u4e2d\uff0c\u82e5\u4ece\u8868\u5934\u5f00\u59cb\u67e5\u627e\uff0c\u90a3\u4e0e\u5355\u94fe\u8868\u7684\u64cd\u4f5c\u4e00\u81f4\u3002\u82e5\u4ece\u8868\u7684\u4efb\u610f\u4f4d\u7f6e\u5f00\u59cb\u67e5\u627e\uff0c\u90a3\u4e48\u9700\u8981\u4e00\u4e2a\u8ba1\u6570\u53d8\u91cfsum\uff0c\u5f53sum=\u8868\u957f\u65f6\u8fd8\u672a\u627e\u5230\uff0c\u5219\u67e5\u627e\u5931\u8d25\uff0c\u9000\u51fa\u5faa\u73af\u3002 \u6c42\u8868\u957f \u00b6 \u4e0e\u5355\u94fe\u8868\u4e00\u6837 \u904d\u5386 \u00b6 \u5355\u94fe\u8868\u53ea\u80fd\u4ece\u8868\u5934\u7ed3\u70b9\u5f00\u59cb\u5f80\u540e\u987a\u5e8f\u904d\u5386\u6574\u4e2a\u94fe\u8868\uff0c\u5faa\u73af\u5355\u94fe\u8868\u53ef\u4ee5\u4ece\u8868\u4e2d\u7684 \u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb \u904d\u5386\u6574\u4e2a\u94fe\u8868\u3002 \u56db\u3001\u5faa\u73af\u53cc\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c\uff08\u5e26\u5934\u7ed3\u70b9\uff09 \u00b6 \u5faa\u73af\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct DNode { int data ; //\u6570\u636e\u57df struct DNode * prior , * next ; //\u524d\u9a71\u548c\u540e\u7ee7\u6307\u9488 } DNode , * DLinkList ; \u521d\u59cb\u5316\u548c\u5224\u7a7a \u00b6 L->next = NULL\u6539\u4e3aL->next = L L->prior = NULL\u6539\u4e3aL->prior = L //\u521d\u59cb\u5316 bool InitList ( DLinkList & L ){ L = ( LNode * ) malloc ( sizeof ( DLinkList )); if ( L == NULL ) return false ; L -> prior = L ; L -> next = L ; return true ; } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( DLinkList L ){ if ( L -> next == L ){ return true ; } else { return false ; } } \u5224\u65ad\u8868\u5c3e\u7ed3\u70b9 \u00b6 //\u5224\u65ad\u7ed3\u70b9p\u662f\u5426\u662f\u8868\u5c3e\u7ed3\u70b9 bool isTail ( DLinkList L ){ if ( L -> next == L ){ return true ; } else { return false ; } } \u63d2\u5165 \u00b6 \u5faa\u73af\u53cc\u94fe\u8868\u7684\u63d2\u5165\u3001\u5220\u9664\u7b97\u6cd5\u4e0e\u53cc\u94fe\u8868\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f\u5982\u679c\u5728\u8868\u5c3e\u8fdb\u884c\uff0c\u90a3\u4e48\u8981\u8ba9\u53cc\u94fe\u8868\u7ee7\u7eed \u4fdd\u6301\u5faa\u73af\u7684\u6027\u8d28 \uff0c\u5373 \u8ba9\u5c3e\u7ed3\u70b9\u7684next\u57df\u6307\u5411\u5934\u7ed3\u70b9\uff0c\u540c\u65f6\u8ba9\u5934\u7ed3\u70b9\u7684prior\u57df\u6307\u5411\u5c3e\u7ed3\u70b9 \u3002 \u6ce8 \uff1ap->next->prior = s; \u5faa\u73af\u65f6\u4e0d\u5224\u65ad \u65f6\u95f4\u590d\u6742\u5ea6 =O(1) //\u5c06x\u63d2\u5165\u5230\u5faa\u73af\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 bool Insert ( DNode * p , int x ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); if ( p == NULL || s == NULL ) return false ; s -> data = x ; s -> next = p -> next ; //1 p -> next -> prior = s ; //2 s -> prior = p ; //3 p -> next = s ; //4 return true ; } //\u5728\u5faa\u73af\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u540e\u63d2\u5165s\u7ed3\u70b9 bool Insert ( DNode * p , DNode * s ){ s -> next = p -> next ; //1 p -> next -> prior = s ; //2 s -> prior = p ; //3 p -> next = s ; //4 return true ; } \u5220\u9664 \u00b6 \u6ce8 \uff1ap->next->prior = s; \u5faa\u73af\u65f6\u4e0d\u5224\u65ad \u6309\u4f4d\u5e8f\u5220\u9664 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u5220\u9664\u64cd\u4f5c:\u5c06\u5faa\u73af\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 bool Delete ( DLinkList & L , int i ){ if ( i < 1 || i > Length ( L )) return false ; DNode * p = GetElem ( L , i -1 ); DNode * q = p -> next ; p -> next = q -> next ; //1 q -> next -> prior = p ; //2 free ( q ); return true ; } \u6307\u5b9a\u7ed3\u70b9\u7684\u5220\u9664 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 =O(1) //\u5220\u9664\u64cd\u4f5c:\u5220\u9664\u5faa\u73af\u94fe\u8868\u4e2d\u7684p\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9 void DeleteNextNode ( DNode * p ){ DNode * q = p -> next ; p -> next = q -> next ; //1 q -> next -> prior = p ; //2 free ( q ); } \u67e5\u627e(\u4e0e\u5355\u53cc\u94fe\u8868\u5b8c\u5168\u4e00\u6837) \u00b6 \u6309\u4f4d\u67e5\u627e \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u5faa\u73af\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 DNode * GetElem ( DLinkList L , int i ){ int j = 0 ; DNode * p = L ; if ( i < 0 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef } \u6309\u503c\u67e5\u627e \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ee\u5728L\u4e2d\u7684\u4f4d\u7f6e DNode * LocateElem ( DLinkList L , int e ){ DNode * p = L -> next ; while ( p && p -> data != e ){ p = p -> next ; } return p ; } \u6c42\u8868\u957f\u3001\u904d\u5386\u3001\u9500\u6bc1 \u00b6 \u4e0e\u5355\u53cc\u94fe\u8868\u4e00\u6837","title":"1.5\u5faa\u73af\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#double-linked-list","text":"","title":"\u5faa\u73af\u94fe\u8868\u2014\u2014 Double Linked List"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_1","text":"\u5faa\u73af\u94fe\u8868 \uff1a\u4e00\u822c\u5305\u62ec\u5faa\u73af\u5faa\u73af\u94fe\u8868\u548c\u5faa\u73af\u5faa\u73af\u94fe\u8868\uff0c\u5982\u4e0b\u56fe\u6240\u793a","title":"\u4e00\u3001\u5faa\u73af\u94fe\u8868\u7684\u5b9a\u4e49"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_2","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u65b9\u4fbf\uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9\uff0c\u4e0d\u660e\u786e\u7684\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684 \u4e0d\u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u9ebb\u70e6\uff0c\u8981\u533a\u5206\u7b2c\u4e00\u4e2a\u6570\u636e\u548c\u540e\u7eed\u6570\u636e\u7684\u5904\u7406","title":"\u4e8c\u3001\u5faa\u73af\u94fe\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_3","text":"","title":"\u4e09\u3001\u5faa\u73af\u5355\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c\uff08\u5e26\u5934\u7ed3\u70b9\uff09"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_4","text":"typedef struct LNode { //\u5b9a\u4e49\u5faa\u73af\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b int data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode , * LinkList ;;","title":"\u5faa\u73af\u5355\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0(\u4e0e\u5355\u94fe\u8868\u4e00\u6837)"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_5","text":"L->next = NULL\u6539\u4e3aL->next = L //\u521d\u59cb\u5316 void InitList ( LinkList & L ){ L = ( LNode * ) malloc ( sizeof ( LinkList )); L -> next = L ; } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( LinkList L ){ if ( L -> next == L ){ return true ; } else { return false ; } }","title":"\u521d\u59cb\u5316\u548c\u5224\u7a7a(\u4e0e\u5355\u94fe\u8868\u4e0d\u4e00\u6837)"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_6","text":"//\u5224\u65ad\u7ed3\u70b9p\u662f\u5426\u662f\u8868\u5c3e\u7ed3\u70b9 bool isTail ( LinkList L ){ if ( p -> next == L ){ return true ; } else { return false ; } }","title":"\u5224\u65ad\u8868\u5c3e\u7ed3\u70b9"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_7","text":"\u5faa\u73af\u5355\u94fe\u8868\u7684\u63d2\u5165\u3001\u5220\u9664\u7b97\u6cd5\u4e0e\u5355\u94fe\u8868\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f\u5982\u679c\u5728\u8868\u5c3e\u8fdb\u884c\uff0c\u90a3\u4e48\u8981\u8ba9\u5355\u94fe\u8868\u7ee7\u7eed \u4fdd\u6301\u5faa\u73af\u7684\u6027\u8d28 \uff0c\u5373 \u8ba9\u5c3e\u7ed3\u70b9\u7684next\u57df\u6307\u5411\u5934\u7ed3\u70b9 \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 =O(1)","title":"\u63d2\u5165\u3001\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_8","text":"\u5355\u94fe\u8868\u7684\u67e5\u627e\u662f\u4ece\u8868\u5934\u5f00\u59cb\uff0c\u627e\u5230\u8868\u5c3e\u505c\u6b62\u3002\u800c\u5faa\u73af\u5355\u94fe\u8868\u4e2d\uff0c\u82e5\u4ece\u8868\u5934\u5f00\u59cb\u67e5\u627e\uff0c\u90a3\u4e0e\u5355\u94fe\u8868\u7684\u64cd\u4f5c\u4e00\u81f4\u3002\u82e5\u4ece\u8868\u7684\u4efb\u610f\u4f4d\u7f6e\u5f00\u59cb\u67e5\u627e\uff0c\u90a3\u4e48\u9700\u8981\u4e00\u4e2a\u8ba1\u6570\u53d8\u91cfsum\uff0c\u5f53sum=\u8868\u957f\u65f6\u8fd8\u672a\u627e\u5230\uff0c\u5219\u67e5\u627e\u5931\u8d25\uff0c\u9000\u51fa\u5faa\u73af\u3002","title":"\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_9","text":"\u4e0e\u5355\u94fe\u8868\u4e00\u6837","title":"\u6c42\u8868\u957f"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_10","text":"\u5355\u94fe\u8868\u53ea\u80fd\u4ece\u8868\u5934\u7ed3\u70b9\u5f00\u59cb\u5f80\u540e\u987a\u5e8f\u904d\u5386\u6574\u4e2a\u94fe\u8868\uff0c\u5faa\u73af\u5355\u94fe\u8868\u53ef\u4ee5\u4ece\u8868\u4e2d\u7684 \u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb \u904d\u5386\u6574\u4e2a\u94fe\u8868\u3002","title":"\u904d\u5386"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_11","text":"","title":"\u56db\u3001\u5faa\u73af\u53cc\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c\uff08\u5e26\u5934\u7ed3\u70b9\uff09"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_12","text":"typedef struct DNode { int data ; //\u6570\u636e\u57df struct DNode * prior , * next ; //\u524d\u9a71\u548c\u540e\u7ee7\u6307\u9488 } DNode , * DLinkList ;","title":"\u5faa\u73af\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_13","text":"L->next = NULL\u6539\u4e3aL->next = L L->prior = NULL\u6539\u4e3aL->prior = L //\u521d\u59cb\u5316 bool InitList ( DLinkList & L ){ L = ( LNode * ) malloc ( sizeof ( DLinkList )); if ( L == NULL ) return false ; L -> prior = L ; L -> next = L ; return true ; } //\u5224\u7a7a\u64cd\u4f5c bool Empty ( DLinkList L ){ if ( L -> next == L ){ return true ; } else { return false ; } }","title":"\u521d\u59cb\u5316\u548c\u5224\u7a7a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_14","text":"//\u5224\u65ad\u7ed3\u70b9p\u662f\u5426\u662f\u8868\u5c3e\u7ed3\u70b9 bool isTail ( DLinkList L ){ if ( L -> next == L ){ return true ; } else { return false ; } }","title":"\u5224\u65ad\u8868\u5c3e\u7ed3\u70b9"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_15","text":"\u5faa\u73af\u53cc\u94fe\u8868\u7684\u63d2\u5165\u3001\u5220\u9664\u7b97\u6cd5\u4e0e\u53cc\u94fe\u8868\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f\u5982\u679c\u5728\u8868\u5c3e\u8fdb\u884c\uff0c\u90a3\u4e48\u8981\u8ba9\u53cc\u94fe\u8868\u7ee7\u7eed \u4fdd\u6301\u5faa\u73af\u7684\u6027\u8d28 \uff0c\u5373 \u8ba9\u5c3e\u7ed3\u70b9\u7684next\u57df\u6307\u5411\u5934\u7ed3\u70b9\uff0c\u540c\u65f6\u8ba9\u5934\u7ed3\u70b9\u7684prior\u57df\u6307\u5411\u5c3e\u7ed3\u70b9 \u3002 \u6ce8 \uff1ap->next->prior = s; \u5faa\u73af\u65f6\u4e0d\u5224\u65ad \u65f6\u95f4\u590d\u6742\u5ea6 =O(1) //\u5c06x\u63d2\u5165\u5230\u5faa\u73af\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 bool Insert ( DNode * p , int x ){ DNode * s = ( DNode * ) malloc ( sizeof ( DNode )); if ( p == NULL || s == NULL ) return false ; s -> data = x ; s -> next = p -> next ; //1 p -> next -> prior = s ; //2 s -> prior = p ; //3 p -> next = s ; //4 return true ; } //\u5728\u5faa\u73af\u94fe\u8868L\u4e2d*p\u7ed3\u70b9\u540e\u63d2\u5165s\u7ed3\u70b9 bool Insert ( DNode * p , DNode * s ){ s -> next = p -> next ; //1 p -> next -> prior = s ; //2 s -> prior = p ; //3 p -> next = s ; //4 return true ; }","title":"\u63d2\u5165"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_16","text":"\u6ce8 \uff1ap->next->prior = s; \u5faa\u73af\u65f6\u4e0d\u5224\u65ad","title":"\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_17","text":"\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u5220\u9664\u64cd\u4f5c:\u5c06\u5faa\u73af\u94fe\u8868\u4e2d\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u5220\u9664 bool Delete ( DLinkList & L , int i ){ if ( i < 1 || i > Length ( L )) return false ; DNode * p = GetElem ( L , i -1 ); DNode * q = p -> next ; p -> next = q -> next ; //1 q -> next -> prior = p ; //2 free ( q ); return true ; }","title":"\u6309\u4f4d\u5e8f\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_18","text":"\u65f6\u95f4\u590d\u6742\u5ea6 =O(1) //\u5220\u9664\u64cd\u4f5c:\u5220\u9664\u5faa\u73af\u94fe\u8868\u4e2d\u7684p\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9 void DeleteNextNode ( DNode * p ){ DNode * q = p -> next ; p -> next = q -> next ; //1 q -> next -> prior = p ; //2 free ( q ); }","title":"\u6307\u5b9a\u7ed3\u70b9\u7684\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_19","text":"","title":"\u67e5\u627e(\u4e0e\u5355\u53cc\u94fe\u8868\u5b8c\u5168\u4e00\u6837)"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_20","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u4f4d\u67e5\u627e\uff1a\u67e5\u627e\u5728\u5faa\u73af\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9 DNode * GetElem ( DLinkList L , int i ){ int j = 0 ; DNode * p = L ; if ( i < 0 ) return NULL ; while ( p && j < i ){ p = p -> next ; j ++ ; } return p ; //\u5982\u679ci\u5927\u4e8e\u8868\u957f\uff0cp=NULL,\u76f4\u63a5\u8fd4\u56dep\u5373\u53ef }","title":"\u6309\u4f4d\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_21","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) //\u6309\u503c\u67e5\u627e\uff1a\u67e5\u627ee\u5728L\u4e2d\u7684\u4f4d\u7f6e DNode * LocateElem ( DLinkList L , int e ){ DNode * p = L -> next ; while ( p && p -> data != e ){ p = p -> next ; } return p ; }","title":"\u6309\u503c\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.5%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_22","text":"\u4e0e\u5355\u53cc\u94fe\u8868\u4e00\u6837","title":"\u6c42\u8868\u957f\u3001\u904d\u5386\u3001\u9500\u6bc1"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/","text":"\u9759\u6001\u94fe\u8868\u2014\u2014 Static Linked List \u00b6 \u4e00\u3001\u9759\u6001\u94fe\u8868\u7684\u5b9a\u4e49 \u00b6 \u9759\u6001\u94fe\u8868 \u501f\u52a9 \u6570\u7ec4 \u6765\u63cf\u8ff0\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\uff0c\u7ed3\u70b9\u4e5f\u6709 \u6570\u636e\u57dfdata \u548c \u6307\u9488\u57dfnext \uff0c\u8fd9\u91cc\u7684\u6307\u9488\u662f\u7ed3\u70b9\u7684 \u76f8\u5bf9\u5730\u5740\uff08\u6570\u7ec4\u4e0b\u6807\uff09 \uff0c\u53c8\u79f0 \u6e38\u6807 \u3002\u548c\u987a\u5e8f\u8868\u4e00\u6837\uff0c\u9759\u6001\u94fe\u8868\u4e5f\u9700\u8981\u9884\u5148\u5206\u914d\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u4e8c\u3001\u9759\u6001\u94fe\u8868\u7684\u7279\u70b9 \u00b6 \u987a\u5e8f\u8868\uff1a\u903b\u8f91\u4e0a\u8fde\u7eed\uff0c\u7269\u7406\u4e0a\u8fde\u7eed \u9759\u6001\u94fe\u8868\uff1a\u903b\u8f91\u4e0a\u79bb\u6563\uff0c\u7269\u7406\u4e0a\u8fde\u7eed \u5355\u53cc\u94fe\u8868\uff1a\u903b\u8f91\u4e0a\u79bb\u6563\uff0c\u7269\u7406\u4e0a\u79bb\u6563 \u9759\u6001\u94fe\u8868\u6bd4\u987a\u5e8f\u8868\u597d\u3002\u6bd4\u5355\u53cc\u94fe\u8868\u5dee \u4f18\u70b9 \uff1a\u589e\u52a0\u3001\u5220\u9664\u64cd\u4f5c\u4e0d\u9700\u8981\u79fb\u52a8\u5927\u91cf\u5143\u7d20 \u7f3a\u70b9 \uff1a\u2460\u4e0d\u80fd\u968f\u673a\u5b58\u53d6\u3002\u53ea\u80fd\u4ece\u5934\u7ed3\u70b9\u904d\u5386\u627e \u200b \u2461\u5bb9\u91cf\u4e0d\u53ef\u53d8 \u4e09\u3001\u9759\u6001\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c \u00b6 \u9759\u6001\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 #define MaxSize 50 //\u9759\u6001\u94fe\u8868\u7684\u6700\u5927\u957f\u5ea6 typedef struct SLinkList { ElemType data ; //\u6570\u636e\u5143\u7d20 int next ; //\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e0b\u6807 } SLinkList [ MaxSize ]; \u521d\u59cb\u5316 \u00b6 a[0]\u7684next\u8bbe\u4e3a-1 \u5176\u5b83\u7684next\u8bbe\u4e3a-2 \u5224\u7a7a \u00b6 \u5b83\u7684next\u4e3a-2 \u5219\u6b64\u7ed3\u70b9\u4e3a\u7a7a \u63d2\u5165 \u00b6 \u2460\u627e\u4e00\u4e2a\u7a7a\u7684\u7ed3\u70b9\uff0c\u5b58\u5165\u6570\u636e \u2461\u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u627e\u5230\u4f4d\u5e8f\u4e3ai-1\u7684\u7ed3\u70b9 \u2462\u4fee\u6539\u65b0\u7ed3\u70b9\u7684next \u2463\u4fee\u6539i-1\u53f7\u7ed3\u70b9\u7684next \u5220\u9664 \u00b6 \u2461\u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u627e\u5230\u524d\u9a71\u7ed3\u70b9 \u2462\u4fee\u6539\u524d\u9a71\u7ed3\u70b9\u7684next \u2463\u88ab\u5220\u9664\u7ed3\u70b9\u7684next\u8bbe\u4e3a-2 \u67e5\u627e \u00b6 \u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u6328\u4e2a\u5f80\u540e\u904d\u5386\u7ed3\u70b9 \u6c42\u8868\u957f \u00b6 \u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u6328\u4e2a\u5f80\u540e\u904d\u5386\u7ed3\u70b9 \u904d\u5386 \u00b6 \u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u6328\u4e2a\u5f80\u540e\u904d\u5386\u7ed3\u70b9","title":"1.6\u9759\u6001\u94fe\u8868"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#static-linked-list","text":"","title":"\u9759\u6001\u94fe\u8868\u2014\u2014 Static Linked List"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_1","text":"\u9759\u6001\u94fe\u8868 \u501f\u52a9 \u6570\u7ec4 \u6765\u63cf\u8ff0\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\uff0c\u7ed3\u70b9\u4e5f\u6709 \u6570\u636e\u57dfdata \u548c \u6307\u9488\u57dfnext \uff0c\u8fd9\u91cc\u7684\u6307\u9488\u662f\u7ed3\u70b9\u7684 \u76f8\u5bf9\u5730\u5740\uff08\u6570\u7ec4\u4e0b\u6807\uff09 \uff0c\u53c8\u79f0 \u6e38\u6807 \u3002\u548c\u987a\u5e8f\u8868\u4e00\u6837\uff0c\u9759\u6001\u94fe\u8868\u4e5f\u9700\u8981\u9884\u5148\u5206\u914d\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u3002","title":"\u4e00\u3001\u9759\u6001\u94fe\u8868\u7684\u5b9a\u4e49"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_2","text":"\u987a\u5e8f\u8868\uff1a\u903b\u8f91\u4e0a\u8fde\u7eed\uff0c\u7269\u7406\u4e0a\u8fde\u7eed \u9759\u6001\u94fe\u8868\uff1a\u903b\u8f91\u4e0a\u79bb\u6563\uff0c\u7269\u7406\u4e0a\u8fde\u7eed \u5355\u53cc\u94fe\u8868\uff1a\u903b\u8f91\u4e0a\u79bb\u6563\uff0c\u7269\u7406\u4e0a\u79bb\u6563 \u9759\u6001\u94fe\u8868\u6bd4\u987a\u5e8f\u8868\u597d\u3002\u6bd4\u5355\u53cc\u94fe\u8868\u5dee \u4f18\u70b9 \uff1a\u589e\u52a0\u3001\u5220\u9664\u64cd\u4f5c\u4e0d\u9700\u8981\u79fb\u52a8\u5927\u91cf\u5143\u7d20 \u7f3a\u70b9 \uff1a\u2460\u4e0d\u80fd\u968f\u673a\u5b58\u53d6\u3002\u53ea\u80fd\u4ece\u5934\u7ed3\u70b9\u904d\u5386\u627e \u200b \u2461\u5bb9\u91cf\u4e0d\u53ef\u53d8","title":"\u4e8c\u3001\u9759\u6001\u94fe\u8868\u7684\u7279\u70b9"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_3","text":"","title":"\u4e09\u3001\u9759\u6001\u94fe\u8868\u4e0a\u7684\u64cd\u4f5c"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_4","text":"#define MaxSize 50 //\u9759\u6001\u94fe\u8868\u7684\u6700\u5927\u957f\u5ea6 typedef struct SLinkList { ElemType data ; //\u6570\u636e\u5143\u7d20 int next ; //\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e0b\u6807 } SLinkList [ MaxSize ];","title":"\u9759\u6001\u94fe\u8868\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_5","text":"a[0]\u7684next\u8bbe\u4e3a-1 \u5176\u5b83\u7684next\u8bbe\u4e3a-2","title":"\u521d\u59cb\u5316"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_6","text":"\u5b83\u7684next\u4e3a-2 \u5219\u6b64\u7ed3\u70b9\u4e3a\u7a7a","title":"\u5224\u7a7a"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_7","text":"\u2460\u627e\u4e00\u4e2a\u7a7a\u7684\u7ed3\u70b9\uff0c\u5b58\u5165\u6570\u636e \u2461\u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u627e\u5230\u4f4d\u5e8f\u4e3ai-1\u7684\u7ed3\u70b9 \u2462\u4fee\u6539\u65b0\u7ed3\u70b9\u7684next \u2463\u4fee\u6539i-1\u53f7\u7ed3\u70b9\u7684next","title":"\u63d2\u5165"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_8","text":"\u2461\u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u627e\u5230\u524d\u9a71\u7ed3\u70b9 \u2462\u4fee\u6539\u524d\u9a71\u7ed3\u70b9\u7684next \u2463\u88ab\u5220\u9664\u7ed3\u70b9\u7684next\u8bbe\u4e3a-2","title":"\u5220\u9664"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_9","text":"\u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u6328\u4e2a\u5f80\u540e\u904d\u5386\u7ed3\u70b9","title":"\u67e5\u627e"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_10","text":"\u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u6328\u4e2a\u5f80\u540e\u904d\u5386\u7ed3\u70b9","title":"\u6c42\u8868\u957f"},{"location":"01-%E7%BA%BF%E6%80%A7%E8%A1%A8/01.6%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_11","text":"\u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u6328\u4e2a\u5f80\u540e\u904d\u5386\u7ed3\u70b9","title":"\u904d\u5386"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.1%E6%A0%88/","text":"\u6808\u2014\u2014 Stack \u00b6 \u4e00\u3001\u6808\u7684\u5b9a\u4e49 \u00b6 \u6808 \u662f\u7ebf\u6027\u8868\u7ed3\u6784\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u6808\u7ed3\u6784\u7684\u63d2\u5165\u4e0e\u5220\u9664\u64cd\u4f5c\u90fd\u53ea\u80fd\u4ece\u540c\u4e00\u7aef\u8fdb\u884c\uff0c\u6240\u4ee5\u6808\u7ed3\u6784\u662f\u4e00\u79cd\u53d7\u9650\u5236\u7684\u7ebf\u6027\u8868\u7ed3\u6784\uff0c\u6570\u636e\u7684\u63d2\u5165\u4e0e\u5220\u9664\u7b26\u5408LIFO\u7684\u539f\u5219\uff08\u4e5f\u5c31\u662f \u540e\u8fdb\u5148\u51fa \uff0c \u5148\u8fdb\u540e\u51fa \uff09\u3002 \u4e8c\u3001\u6808\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u6ce8 \uff1a\u53c2\u6570\u4ee3\u201c&\u201d\u8868\u793a\uff1a\u65b9\u6cd5\u8fd0\u884c\u5b8c\u540e\uff0c\u5bf9\u53c2\u6570\u4fee\u6539\u7684\u7ed3\u679c\u8981 \u201c\u5e26\u56de\u6765\u201d \u5bf9\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u67e5\u6539 InitStack ( & S ); //\u521d\u59cb\u5316\u8868\uff1a\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u6808S\uff0c\u5206\u914d\u5185\u5b58\u7a7a\u95f4 DestoryStack ( & S ); //\u9500\u6bc1\u64cd\u4f5c\uff1a\u9500\u6bc1\u6808\uff0c\u5e76\u91ca\u653e\u6808S\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4 Push ( & S , x ); //\u8fdb\u6808\uff0c\u82e5\u6808S\u672a\u6ee1\uff0c\u5219\u5c06x\u52a0\u5165\u4f7f\u4e4b\u6210\u4e3a\u65b0\u6808 Pop ( & S , & x ); //\u51fa\u6808\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de GetTop ( S , & x ); //\u8bfb\u6808\u9876\u5143\u7d20\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u5c06x\u8fd4\u56de\u6808\u9876\u5143\u7d20 //\u5176\u5b83\u5e38\u7528\u64cd\u4f5c StackEmpty ( S ); //\u5224\u7a7a\u64cd\u4f5c \u4e09\u3001\u5b58\u50a8\u7ed3\u6784 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8 \u56db\u3001\u6808\u5206\u7c7b \u00b6 \u6808\u7684\u987a\u5e8f\u5b58\u50a8\uff1a\u987a\u5e8f\u6808 \u6808\u7684\u94fe\u5f0f\u5b58\u50a8\uff1a\u94fe\u6808","title":"2.1\u6808"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.1%E6%A0%88/#stack","text":"","title":"\u6808\u2014\u2014 Stack"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.1%E6%A0%88/#_1","text":"\u6808 \u662f\u7ebf\u6027\u8868\u7ed3\u6784\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u6808\u7ed3\u6784\u7684\u63d2\u5165\u4e0e\u5220\u9664\u64cd\u4f5c\u90fd\u53ea\u80fd\u4ece\u540c\u4e00\u7aef\u8fdb\u884c\uff0c\u6240\u4ee5\u6808\u7ed3\u6784\u662f\u4e00\u79cd\u53d7\u9650\u5236\u7684\u7ebf\u6027\u8868\u7ed3\u6784\uff0c\u6570\u636e\u7684\u63d2\u5165\u4e0e\u5220\u9664\u7b26\u5408LIFO\u7684\u539f\u5219\uff08\u4e5f\u5c31\u662f \u540e\u8fdb\u5148\u51fa \uff0c \u5148\u8fdb\u540e\u51fa \uff09\u3002","title":"\u4e00\u3001\u6808\u7684\u5b9a\u4e49"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.1%E6%A0%88/#_2","text":"\u6ce8 \uff1a\u53c2\u6570\u4ee3\u201c&\u201d\u8868\u793a\uff1a\u65b9\u6cd5\u8fd0\u884c\u5b8c\u540e\uff0c\u5bf9\u53c2\u6570\u4fee\u6539\u7684\u7ed3\u679c\u8981 \u201c\u5e26\u56de\u6765\u201d \u5bf9\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u67e5\u6539 InitStack ( & S ); //\u521d\u59cb\u5316\u8868\uff1a\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u6808S\uff0c\u5206\u914d\u5185\u5b58\u7a7a\u95f4 DestoryStack ( & S ); //\u9500\u6bc1\u64cd\u4f5c\uff1a\u9500\u6bc1\u6808\uff0c\u5e76\u91ca\u653e\u6808S\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4 Push ( & S , x ); //\u8fdb\u6808\uff0c\u82e5\u6808S\u672a\u6ee1\uff0c\u5219\u5c06x\u52a0\u5165\u4f7f\u4e4b\u6210\u4e3a\u65b0\u6808 Pop ( & S , & x ); //\u51fa\u6808\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de GetTop ( S , & x ); //\u8bfb\u6808\u9876\u5143\u7d20\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u5c06x\u8fd4\u56de\u6808\u9876\u5143\u7d20 //\u5176\u5b83\u5e38\u7528\u64cd\u4f5c StackEmpty ( S ); //\u5224\u7a7a\u64cd\u4f5c","title":"\u4e8c\u3001\u6808\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.1%E6%A0%88/#_3","text":"\u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8","title":"\u4e09\u3001\u5b58\u50a8\u7ed3\u6784"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.1%E6%A0%88/#_4","text":"\u6808\u7684\u987a\u5e8f\u5b58\u50a8\uff1a\u987a\u5e8f\u6808 \u6808\u7684\u94fe\u5f0f\u5b58\u50a8\uff1a\u94fe\u6808","title":"\u56db\u3001\u6808\u5206\u7c7b"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/","text":"\u987a\u5e8f\u6808\u2014\u2014 Sequence Stack \u00b6 \u4e00\u3001\u987a\u5e8f\u6808\u7684\u5b9a\u4e49 \u00b6 \u987a\u5e8f\u6808 \uff1a\u6808\u7684 \u987a\u5e8f\u5b58\u50a8 \u3002 \u4e8c\u3001\u987a\u5e8f\u6808\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u9759\u6001\u5206\u914d \u548c \u52a8\u6001\u5206\u914d \u4e09\u3001\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u6808\u4e0a\u7684\u64cd\u4f5c \u00b6 \u987a\u5e8f\u6808\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 #define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u6808\u4e2d\u5143\u7d20 int top ; //\u6808\u9876\u6307\u9488 } SqStack ; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316\u4e00\u4e2a\u6808 void InitStack ( SqStack & S ){ S . top = -1 ; //\u521d\u59cb\u5316\u6808\u9876\u6307\u9488 } \u5224\u6808\u7a7a \u00b6 bool StackEmpty ( SqStack S ){ if ( S . top == -1 ){ return true ; } else { return false ; } } \u5165\u6808 \u00b6 //\u5411\u6808\u4e2d\u538b\u5165\u5143\u7d20e bool Push ( SqStack & S , Elemtype e ){ if ( S . Top == MaxSize -1 ) return false ; S . Top = S . Top + 1 ; //\u6808\u9876\u6307\u9488\u5411\u4e0a\u79fb\u52a8 S . data [ S . top ] = e ; return true ; } \u51fa\u6808 \u00b6 //\u6808\u9876\u5143\u7d20\u51fa\u6808 bool Pop ( Stack & S , Elemtype & e ){ if ( S . Top == -1 ) return false ; e = S . data [ S . Top ]; //x\u4e3a\u6808\u9876\u5143\u7d20\uff0c\u6808\u9876\u6307\u9488\u4e0b\u79fb\u4e00\u4e2a\u4f4d\u7f6e S . Top = S . Top - 1 ; return true ; } \u83b7\u53d6\u6808\u9876\u5143\u7d20 \u00b6 //\u83b7\u53d6\u6808\u9876\u5143\u7d20e bool GetTop ( Stack & S , Elemtype & e ){ if ( S . Top == S . Base ) return false ; e = S . data [ S . Top ]; return true ; } \u56db\u3001\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u6808\u4e0a\u7684\u64cd\u4f5c \u00b6 \u987a\u5e8f\u6808\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct Stack { Elemtype * Top ; //\u6307\u5411\u6808\u9876\u5143\u7d20\u7684\u4e0a\u4e00\u4e2a Elemtype * Base ; //\u6307\u5411\u6808\u5e95 int stacksize ; //\u5f53\u524d\u6808\u7684\u7a7a\u95f4\u5927\u5c0f } SqStack \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316\u4e00\u4e2a\u6808 bool InitStack ( SqStack & S ){ S . Base = ( Elemtype * ) malloc ( MAXSIZE * sizeof ( Elemtype )); if ( ! S . Base ) return false ; S . Top = S . Base ; S . stacksize = MAXSIZE ; return true ; } \u5224\u6808\u7a7a \u00b6 bool StackEmpty ( SqStack S ){ if ( S . Top == S . Base ){ return true ; } else { return false ; } } \u5165\u6808 \u00b6 //\u5411\u6808\u4e2d\u538b\u5165\u5143\u7d20e bool Push ( SqStack & S , Elemtype e ){ if ( S . Top - S . Base == S . stacksize ) return false ; * S . Top = e ; S . Top ++ ; //\u6808\u9876\u6307\u9488\u5411\u4e0a\u79fb\u52a8 return true ; } \u51fa\u6808 \u00b6 //\u6808\u9876\u5143\u7d20\u51fa\u6808 bool Pop ( Stack & S , Eletype & x ){ if ( S . Top == S . Base ) return false ; x =*-- S . Top ; //x\u4e3a\u6808\u9876\u5143\u7d20\uff0c\u6808\u9876\u6307\u9488\u4e0b\u79fb\u4e00\u4e2a\u4f4d\u7f6e return true ; } \u83b7\u53d6\u6808\u9876\u5143\u7d20 \u00b6 //\u83b7\u53d6\u6808\u9876\u5143\u7d20e bool GetTop ( Stack & S , Elemtype & e ){ if ( S . Top == S . Base ) return false ; e = * ( S . Top -1 ); return true ; }","title":"2.2\u987a\u5e8f\u6808\u2014\u2014\u6808\u7684\u987a\u5e8f\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#sequence-stack","text":"","title":"\u987a\u5e8f\u6808\u2014\u2014 Sequence Stack"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_1","text":"\u987a\u5e8f\u6808 \uff1a\u6808\u7684 \u987a\u5e8f\u5b58\u50a8 \u3002","title":"\u4e00\u3001\u987a\u5e8f\u6808\u7684\u5b9a\u4e49"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_2","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u9759\u6001\u5206\u914d \u548c \u52a8\u6001\u5206\u914d","title":"\u4e8c\u3001\u987a\u5e8f\u6808\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_3","text":"","title":"\u4e09\u3001\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u6808\u4e0a\u7684\u64cd\u4f5c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_4","text":"#define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u6808\u4e2d\u5143\u7d20 int top ; //\u6808\u9876\u6307\u9488 } SqStack ;","title":"\u987a\u5e8f\u6808\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_5","text":"//\u521d\u59cb\u5316\u4e00\u4e2a\u6808 void InitStack ( SqStack & S ){ S . top = -1 ; //\u521d\u59cb\u5316\u6808\u9876\u6307\u9488 }","title":"\u521d\u59cb\u5316"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_6","text":"bool StackEmpty ( SqStack S ){ if ( S . top == -1 ){ return true ; } else { return false ; } }","title":"\u5224\u6808\u7a7a"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_7","text":"//\u5411\u6808\u4e2d\u538b\u5165\u5143\u7d20e bool Push ( SqStack & S , Elemtype e ){ if ( S . Top == MaxSize -1 ) return false ; S . Top = S . Top + 1 ; //\u6808\u9876\u6307\u9488\u5411\u4e0a\u79fb\u52a8 S . data [ S . top ] = e ; return true ; }","title":"\u5165\u6808"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_8","text":"//\u6808\u9876\u5143\u7d20\u51fa\u6808 bool Pop ( Stack & S , Elemtype & e ){ if ( S . Top == -1 ) return false ; e = S . data [ S . Top ]; //x\u4e3a\u6808\u9876\u5143\u7d20\uff0c\u6808\u9876\u6307\u9488\u4e0b\u79fb\u4e00\u4e2a\u4f4d\u7f6e S . Top = S . Top - 1 ; return true ; }","title":"\u51fa\u6808"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_9","text":"//\u83b7\u53d6\u6808\u9876\u5143\u7d20e bool GetTop ( Stack & S , Elemtype & e ){ if ( S . Top == S . Base ) return false ; e = S . data [ S . Top ]; return true ; }","title":"\u83b7\u53d6\u6808\u9876\u5143\u7d20"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_10","text":"","title":"\u56db\u3001\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u6808\u4e0a\u7684\u64cd\u4f5c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_11","text":"typedef struct Stack { Elemtype * Top ; //\u6307\u5411\u6808\u9876\u5143\u7d20\u7684\u4e0a\u4e00\u4e2a Elemtype * Base ; //\u6307\u5411\u6808\u5e95 int stacksize ; //\u5f53\u524d\u6808\u7684\u7a7a\u95f4\u5927\u5c0f } SqStack","title":"\u987a\u5e8f\u6808\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_12","text":"//\u521d\u59cb\u5316\u4e00\u4e2a\u6808 bool InitStack ( SqStack & S ){ S . Base = ( Elemtype * ) malloc ( MAXSIZE * sizeof ( Elemtype )); if ( ! S . Base ) return false ; S . Top = S . Base ; S . stacksize = MAXSIZE ; return true ; }","title":"\u521d\u59cb\u5316"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_13","text":"bool StackEmpty ( SqStack S ){ if ( S . Top == S . Base ){ return true ; } else { return false ; } }","title":"\u5224\u6808\u7a7a"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_14","text":"//\u5411\u6808\u4e2d\u538b\u5165\u5143\u7d20e bool Push ( SqStack & S , Elemtype e ){ if ( S . Top - S . Base == S . stacksize ) return false ; * S . Top = e ; S . Top ++ ; //\u6808\u9876\u6307\u9488\u5411\u4e0a\u79fb\u52a8 return true ; }","title":"\u5165\u6808"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_15","text":"//\u6808\u9876\u5143\u7d20\u51fa\u6808 bool Pop ( Stack & S , Eletype & x ){ if ( S . Top == S . Base ) return false ; x =*-- S . Top ; //x\u4e3a\u6808\u9876\u5143\u7d20\uff0c\u6808\u9876\u6307\u9488\u4e0b\u79fb\u4e00\u4e2a\u4f4d\u7f6e return true ; }","title":"\u51fa\u6808"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.2%E9%A1%BA%E5%BA%8F%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_16","text":"//\u83b7\u53d6\u6808\u9876\u5143\u7d20e bool GetTop ( Stack & S , Elemtype & e ){ if ( S . Top == S . Base ) return false ; e = * ( S . Top -1 ); return true ; }","title":"\u83b7\u53d6\u6808\u9876\u5143\u7d20"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/","text":"\u94fe\u6808\u2014\u2014 Linked Stack \u00b6 \u4e00\u3001\u94fe\u6808\u7684\u5b9a\u4e49 \u00b6 \u94fe\u6808 \uff1a\u6808\u7684 \u94fe\u5f0f\u5b58\u50a8 \u3002 \u4e8c\u3001\u94fe\u6808\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u4e0d\u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u9ebb\u70e6\uff0c\u8981\u533a\u5206\u7b2c\u4e00\u4e2a\u6570\u636e\u548c\u540e\u7eed\u6570\u636e\u7684\u5904\u7406 \u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u65b9\u4fbf\uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9\uff0c\u4e0d\u660e\u786e\u7684\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684 \u6ce8 \uff1a\u8fd9\u4e24\u79cd\u65b9\u5f0f\uff1a\u53ea\u6709\u7c7b\u578b\u63cf\u8ff0\u4e00\u6837\uff0c\u521d\u59cb\u5316\u4e0d\u4e00\u6837\uff0c \u200b \u5224\u7a7a\u3001\u5165\u6808\u3001\u51fa\u6808\u3001\u53d6\u6808\u9876\u5143\u7d20\u4e0d\u4e00\u6837\uff0c\u4e0d\u5e26\u5934\u8282\u70b9\u662fs\uff0c\u5e26\u5934\u7ed3\u70b9\u662fs->next\uff0c\u56e0\u4e3a\u94fe\u6808\u4ee5 \u94fe\u5934 \u4e3a \u6808\u9876 \u4e09\u3001\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u6808\u4e0a\u7684\u64cd\u4f5c\uff08\u4e0e\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u5355\u94fe\u8868\u4e00\u6837\uff09 \u00b6 \u94fe\u5934 \u4e3a \u6808\u9876 \u94fe\u6808\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b int data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode , * LinkStack ; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316 void InitStack ( LinkStack & S ){ S = NULL ; S -> next = NULL ; } \u5224\u6808\u7a7a \u00b6 //\u5224\u7a7a\u64cd\u4f5c bool StackEmpty ( LinkStack S ){ if ( S == NULL ){ return true ; } else { return false ; } } \u5165\u6808\uff08\u4e0e\u5355\u94fe\u8868\u63d2\u5165\u4e00\u6837\uff09 \u00b6 bool push ( LNode * s , int x ){ if ( s == NULL ) return false ; LNode * p = ( LNode * ) malloc ( sizeof ( LNode )); if ( p == NULL ) return false ; p -> next = NULL ; p -> data = x ; p -> next = s ; s = p ; return true ; } \u51fa\u6808\uff08\u4e0e\u5355\u94fe\u8868\u5220\u9664\u4e00\u6837\uff09 \u00b6 bool Delete ( LNode * s ){ if ( s == NULL ) return false ; LNode * q = s ; s -> data = q -> data s = q -> next ; free ( q ); return true ; } \u83b7\u53d6\u6808\u9876\u5143\u7d20\uff08\u4e0e\u5355\u94fe\u8868\u5220\u9664\u4e00\u6837\uff09 \u00b6 //\u83b7\u53d6\u6808\u9876\u5143\u7d20e bool GetTop ( LNode & s , Elemtype & e ){ if ( s == NULL ) return false ; e = s -> data ; return true ; } \u56db\u3001\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u6808\u4e0a\u7684\u64cd\u4f5c \u00b6 s\u90fd\u6539\u4e3as->next\uff0c\u7c7b\u578b\u63cf\u8ff0\u548c\u521d\u59cb\u5316\u4f8b\u5916 \u94fe\u6808\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b int data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode , * LinkStack ; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316 void InitStack ( LinkStack & S ){ S = ( LNode * ) malloc ( sizeof ( LNode )); S -> next = NULL ; } \u5224\u6808\u7a7a \u00b6 bool StackEmpty ( LinkStack S ){ if ( S -> next == NULL ){ return true ; } else { return false ; } } \u5165\u6808\uff08\u4e0e\u5355\u94fe\u8868\u63d2\u5165\u4e00\u6837\uff09 \u00b6 bool push ( LNode * s , int x ){ if ( s == NULL ) return false ; LNode * p = ( LNode * ) malloc ( sizeof ( LNode )); if ( p == NULL ) return false ; p -> next = NULL ; p -> data = x ; p -> next = s -> next ; s -> next = p ; return true ; } \u51fa\u6808\uff08\u4e0e\u5355\u94fe\u8868\u5220\u9664\u4e00\u6837\uff09 \u00b6 bool Delete ( LNode * s ){ if ( s == NULL ) return false ; LNode * q = s -> next ; s -> data = q -> data s -> next = q -> next ; free ( q ); return true ; } \u83b7\u53d6\u6808\u9876\u5143\u7d20 \u00b6 //\u83b7\u53d6\u6808\u9876\u5143\u7d20e bool GetTop ( LNode & s , Elemtype & e ){ if ( s -> next == NULL ) return false ; e = s -> next -> data ; return true ; }","title":"2.3\u94fe\u6808\u2014\u2014\u6808\u7684\u94fe\u5f0f\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#linked-stack","text":"","title":"\u94fe\u6808\u2014\u2014 Linked Stack"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_1","text":"\u94fe\u6808 \uff1a\u6808\u7684 \u94fe\u5f0f\u5b58\u50a8 \u3002","title":"\u4e00\u3001\u94fe\u6808\u7684\u5b9a\u4e49"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_2","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u4e0d\u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u9ebb\u70e6\uff0c\u8981\u533a\u5206\u7b2c\u4e00\u4e2a\u6570\u636e\u548c\u540e\u7eed\u6570\u636e\u7684\u5904\u7406 \u5e26\u5934\u7ed3\u70b9\uff1a\u5199\u64cd\u4f5c\u4ee3\u7801\u65b9\u4fbf\uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9\uff0c\u4e0d\u660e\u786e\u7684\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684 \u6ce8 \uff1a\u8fd9\u4e24\u79cd\u65b9\u5f0f\uff1a\u53ea\u6709\u7c7b\u578b\u63cf\u8ff0\u4e00\u6837\uff0c\u521d\u59cb\u5316\u4e0d\u4e00\u6837\uff0c \u200b \u5224\u7a7a\u3001\u5165\u6808\u3001\u51fa\u6808\u3001\u53d6\u6808\u9876\u5143\u7d20\u4e0d\u4e00\u6837\uff0c\u4e0d\u5e26\u5934\u8282\u70b9\u662fs\uff0c\u5e26\u5934\u7ed3\u70b9\u662fs->next\uff0c\u56e0\u4e3a\u94fe\u6808\u4ee5 \u94fe\u5934 \u4e3a \u6808\u9876","title":"\u4e8c\u3001\u94fe\u6808\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_3","text":"\u94fe\u5934 \u4e3a \u6808\u9876","title":"\u4e09\u3001\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u6808\u4e0a\u7684\u64cd\u4f5c\uff08\u4e0e\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u5355\u94fe\u8868\u4e00\u6837\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_4","text":"typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b int data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode , * LinkStack ;","title":"\u94fe\u6808\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_5","text":"//\u521d\u59cb\u5316 void InitStack ( LinkStack & S ){ S = NULL ; S -> next = NULL ; }","title":"\u521d\u59cb\u5316"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_6","text":"//\u5224\u7a7a\u64cd\u4f5c bool StackEmpty ( LinkStack S ){ if ( S == NULL ){ return true ; } else { return false ; } }","title":"\u5224\u6808\u7a7a"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_7","text":"bool push ( LNode * s , int x ){ if ( s == NULL ) return false ; LNode * p = ( LNode * ) malloc ( sizeof ( LNode )); if ( p == NULL ) return false ; p -> next = NULL ; p -> data = x ; p -> next = s ; s = p ; return true ; }","title":"\u5165\u6808\uff08\u4e0e\u5355\u94fe\u8868\u63d2\u5165\u4e00\u6837\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_8","text":"bool Delete ( LNode * s ){ if ( s == NULL ) return false ; LNode * q = s ; s -> data = q -> data s = q -> next ; free ( q ); return true ; }","title":"\u51fa\u6808\uff08\u4e0e\u5355\u94fe\u8868\u5220\u9664\u4e00\u6837\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_9","text":"//\u83b7\u53d6\u6808\u9876\u5143\u7d20e bool GetTop ( LNode & s , Elemtype & e ){ if ( s == NULL ) return false ; e = s -> data ; return true ; }","title":"\u83b7\u53d6\u6808\u9876\u5143\u7d20\uff08\u4e0e\u5355\u94fe\u8868\u5220\u9664\u4e00\u6837\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_10","text":"s\u90fd\u6539\u4e3as->next\uff0c\u7c7b\u578b\u63cf\u8ff0\u548c\u521d\u59cb\u5316\u4f8b\u5916","title":"\u56db\u3001\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u6808\u4e0a\u7684\u64cd\u4f5c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_11","text":"typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b int data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode , * LinkStack ;","title":"\u94fe\u6808\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_12","text":"//\u521d\u59cb\u5316 void InitStack ( LinkStack & S ){ S = ( LNode * ) malloc ( sizeof ( LNode )); S -> next = NULL ; }","title":"\u521d\u59cb\u5316"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_13","text":"bool StackEmpty ( LinkStack S ){ if ( S -> next == NULL ){ return true ; } else { return false ; } }","title":"\u5224\u6808\u7a7a"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_14","text":"bool push ( LNode * s , int x ){ if ( s == NULL ) return false ; LNode * p = ( LNode * ) malloc ( sizeof ( LNode )); if ( p == NULL ) return false ; p -> next = NULL ; p -> data = x ; p -> next = s -> next ; s -> next = p ; return true ; }","title":"\u5165\u6808\uff08\u4e0e\u5355\u94fe\u8868\u63d2\u5165\u4e00\u6837\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_15","text":"bool Delete ( LNode * s ){ if ( s == NULL ) return false ; LNode * q = s -> next ; s -> data = q -> data s -> next = q -> next ; free ( q ); return true ; }","title":"\u51fa\u6808\uff08\u4e0e\u5355\u94fe\u8868\u5220\u9664\u4e00\u6837\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.3%E9%93%BE%E6%A0%88%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_16","text":"//\u83b7\u53d6\u6808\u9876\u5143\u7d20e bool GetTop ( LNode & s , Elemtype & e ){ if ( s -> next == NULL ) return false ; e = s -> next -> data ; return true ; }","title":"\u83b7\u53d6\u6808\u9876\u5143\u7d20"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/","text":"\u6808\u7684\u5e94\u7528 \u00b6 \u4e00\u3001\u8868\u8fbe\u5f0f\u6c42\u503c(\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c) \u00b6 \u4e09\u79cd\u8868\u8fbe\u5f0f\uff1a \u4e2d\u7f00\u8868\u8fbe\u5f0f \u3001 \u540e\u7f00\u8868\u8fbe\u5f0f \u3001 \u524d\u7f00\u8868\u8fbe\u5f0f \u4e2d\u7f00\u8868\u8fbe\u5f0f\uff1a\u6709\u754c\u9650\u7b26 \u540e\u7f00\u548c\u524d\u7f00\u8868\u8fbe\u5f0f\uff1a\u65e0\u754c\u9650\u7b26 \u6ce8 \uff1a\u65b9\u6cd5\u4e00\u548c\u65b9\u6cd5\u4e8c\u662f\u5206\u5f00\u7684\uff0c\u65b9\u6cd5\u4e09\u662f\u4e2d\u7f00\u8f6c\u540e\u7f00\u548c\u540e\u7f00\u8ba1\u7b97\u540c\u65f6\u8fdb\u884c\uff0c\u4e00\u822c\u7528\u65b9\u6cd5\u4e09\u89e3\u51b3 \u65b9\u6cd5\u4e00\uff1a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u7528\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 1.\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u7528 \u6808 \u4fdd\u5b58 \u8fd0\u7b97\u7b26 \uff09 \u00b6 \u4e2d\u7f00\u8868\u8fbe\u5f0f \u4ece\u5de6\u5f80\u53f3 \u626b\u63cf\uff1a \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u6808\u3002 \u2461\u9047\u5230 \u754c\u9650\u7b26 \uff0c\u9047\u5230\u201c\uff08\u201d\uff0c\u76f4\u63a5\u538b\u5165\u6808\uff1b\u9047\u5230\u201c\uff09\u201d\uff0c\u4f9d\u6b21\u5f39\u51fa\u6808\u5185\u8fd0\u7b97\u7b26 \u4ece\u5de6\u5f80\u53f3 \u52a0\u5165\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u5f39\u51fa\u201c\uff08\u201d\u7ed3\u675f\u3002 \u2462\u9047\u5230 \u8fd0\u7b97\u7b26 \uff0c\u4f9d\u6b21\u5f39\u51fa\u6bd4\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff0c\u5c06\u6b64\u8fd0\u7b97\u7b26\u538b\u5165\u6808\u3002 2.\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\uff08\u7528 \u6808 \u5b58 \u8fd0\u7b97\u7ed3\u679c \uff09 \u00b6 \u540e\u7f00\u8868\u8fbe\u5f0f \u4ece\u5de6\u5f80\u53f3 \u626b\u63cf\uff1a \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u6808\u3002 \u2461\u9047\u5230 \u8fd0\u7b97\u7b26 \uff0c\u5f39\u51fa\u4e24\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u76f8\u5e94\u8fd0\u7b97\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u538b\u56de\u6808\u9876 \u65b9\u6cd5\u4e8c\uff1a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u524d\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u7528\u524d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 1.\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u524d\u7f00\u8868\u8fbe\u5f0f\uff08\u7528 \u6808 \u4fdd\u5b58 \u8fd0\u7b97\u7b26 \uff09 \u00b6 \u4e2d\u7f00\u8868\u8fbe\u5f0f \u4ece\u53f3\u5f80\u5de6 \u626b\u63cf\uff1a \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u6808\u3002 \u2461\u9047\u5230 \u754c\u9650\u7b26 \uff0c\u9047\u5230\u201c\uff08\u201d\uff0c\u76f4\u63a5\u538b\u5165\u6808\uff1b\u9047\u5230\u201c\uff09\u201d\uff0c\u4f9d\u6b21\u5f39\u51fa\u6808\u5185\u8fd0\u7b97\u7b26 \u4ece\u53f3\u5f80\u5de6 \u52a0\u5165\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u5f39\u51fa\u201c\uff08\u201d\u7ed3\u675f\u3002 \u2462\u9047\u5230 \u8fd0\u7b97\u7b26 \uff0c\u4f9d\u6b21\u5f39\u51fa\u6bd4\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff0c\u5c06\u6b64\u8fd0\u7b97\u7b26\u538b\u5165\u6808\u3002 2.\u524d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\uff08\u7528 \u6808 \u5b58 \u8fd0\u7b97\u7ed3\u679c \uff09 \u00b6 \u524d\u7f00\u8868\u8fbe\u5f0f \u4ece\u53f3\u5f80\u5de6 \u626b\u63cf\uff1a \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u6808\u3002 \u2461\u9047\u5230 \u8fd0\u7b97\u7b26 \uff0c\u5f39\u51fa\u4e24\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u76f8\u5e94\u8fd0\u7b97\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u538b\u56de\u6808\u9876 \u65b9\u6cd5\u4e09\uff1a\u4e2d\u7f00\u8f6c\u540e\u7f00\u548c\u540e\u7f00\u8ba1\u7b97\u540c\u65f6\u8fdb\u884c(\u4e24\u4e2a\u6808) \u00b6 \u7528 \u4e24\u4e2a\u6808 \uff1a\u5206\u522b\u5b58 \u64cd\u4f5c\u6570 \u548c \u8fd0\u7b97\u7b26 \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u64cd\u4f5c\u6570\u6808\u3002 \u2461\u9047\u5230 \u8fd0\u7b97\u7b26 \u6216 \u754c\u9650\u7b26 \uff0c\u6309\u201c\u4e2d\u7f00\u8f6c\u540e\u7f00\u201d\u7684\u903b\u8f91\u538b\u5165\u8fd0\u7b97\u7b26\u6808\uff0c\u6bcf\u5f53\u5f39\u51fa\u4e00\u4e2a\u8fd0\u7b97\u7b26\u65f6\uff0c\u76f8\u5e94\u5730\u5f39\u51fa\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u6267\u884c\u76f8\u5e94\u8fd0\u7b97\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u538b\u56de\u64cd\u4f5c\u6570\u6808 \u4e8c\u3001\u9012\u5f52 \u00b6 \u9012\u5f52\u7684\u80cc\u540e\u662f\u6808\u7684\u5e94\u7528","title":"2.4\u6808\u7684\u5e94\u7528"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#_1","text":"","title":"\u6808\u7684\u5e94\u7528"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#_2","text":"\u4e09\u79cd\u8868\u8fbe\u5f0f\uff1a \u4e2d\u7f00\u8868\u8fbe\u5f0f \u3001 \u540e\u7f00\u8868\u8fbe\u5f0f \u3001 \u524d\u7f00\u8868\u8fbe\u5f0f \u4e2d\u7f00\u8868\u8fbe\u5f0f\uff1a\u6709\u754c\u9650\u7b26 \u540e\u7f00\u548c\u524d\u7f00\u8868\u8fbe\u5f0f\uff1a\u65e0\u754c\u9650\u7b26 \u6ce8 \uff1a\u65b9\u6cd5\u4e00\u548c\u65b9\u6cd5\u4e8c\u662f\u5206\u5f00\u7684\uff0c\u65b9\u6cd5\u4e09\u662f\u4e2d\u7f00\u8f6c\u540e\u7f00\u548c\u540e\u7f00\u8ba1\u7b97\u540c\u65f6\u8fdb\u884c\uff0c\u4e00\u822c\u7528\u65b9\u6cd5\u4e09\u89e3\u51b3","title":"\u4e00\u3001\u8868\u8fbe\u5f0f\u6c42\u503c(\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c)"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#_3","text":"","title":"\u65b9\u6cd5\u4e00\uff1a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u7528\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#1","text":"\u4e2d\u7f00\u8868\u8fbe\u5f0f \u4ece\u5de6\u5f80\u53f3 \u626b\u63cf\uff1a \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u6808\u3002 \u2461\u9047\u5230 \u754c\u9650\u7b26 \uff0c\u9047\u5230\u201c\uff08\u201d\uff0c\u76f4\u63a5\u538b\u5165\u6808\uff1b\u9047\u5230\u201c\uff09\u201d\uff0c\u4f9d\u6b21\u5f39\u51fa\u6808\u5185\u8fd0\u7b97\u7b26 \u4ece\u5de6\u5f80\u53f3 \u52a0\u5165\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u5f39\u51fa\u201c\uff08\u201d\u7ed3\u675f\u3002 \u2462\u9047\u5230 \u8fd0\u7b97\u7b26 \uff0c\u4f9d\u6b21\u5f39\u51fa\u6bd4\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff0c\u5c06\u6b64\u8fd0\u7b97\u7b26\u538b\u5165\u6808\u3002","title":"1.\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u7528\u6808\u4fdd\u5b58\u8fd0\u7b97\u7b26\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#2","text":"\u540e\u7f00\u8868\u8fbe\u5f0f \u4ece\u5de6\u5f80\u53f3 \u626b\u63cf\uff1a \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u6808\u3002 \u2461\u9047\u5230 \u8fd0\u7b97\u7b26 \uff0c\u5f39\u51fa\u4e24\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u76f8\u5e94\u8fd0\u7b97\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u538b\u56de\u6808\u9876","title":"2.\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\uff08\u7528\u6808\u5b58\u8fd0\u7b97\u7ed3\u679c\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#_4","text":"","title":"\u65b9\u6cd5\u4e8c\uff1a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u524d\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u7528\u524d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#1_1","text":"\u4e2d\u7f00\u8868\u8fbe\u5f0f \u4ece\u53f3\u5f80\u5de6 \u626b\u63cf\uff1a \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u6808\u3002 \u2461\u9047\u5230 \u754c\u9650\u7b26 \uff0c\u9047\u5230\u201c\uff08\u201d\uff0c\u76f4\u63a5\u538b\u5165\u6808\uff1b\u9047\u5230\u201c\uff09\u201d\uff0c\u4f9d\u6b21\u5f39\u51fa\u6808\u5185\u8fd0\u7b97\u7b26 \u4ece\u53f3\u5f80\u5de6 \u52a0\u5165\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u5f39\u51fa\u201c\uff08\u201d\u7ed3\u675f\u3002 \u2462\u9047\u5230 \u8fd0\u7b97\u7b26 \uff0c\u4f9d\u6b21\u5f39\u51fa\u6bd4\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff0c\u5c06\u6b64\u8fd0\u7b97\u7b26\u538b\u5165\u6808\u3002","title":"1.\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u524d\u7f00\u8868\u8fbe\u5f0f\uff08\u7528\u6808\u4fdd\u5b58\u8fd0\u7b97\u7b26\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#2_1","text":"\u524d\u7f00\u8868\u8fbe\u5f0f \u4ece\u53f3\u5f80\u5de6 \u626b\u63cf\uff1a \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u6808\u3002 \u2461\u9047\u5230 \u8fd0\u7b97\u7b26 \uff0c\u5f39\u51fa\u4e24\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u76f8\u5e94\u8fd0\u7b97\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u538b\u56de\u6808\u9876","title":"2.\u524d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\uff08\u7528\u6808\u5b58\u8fd0\u7b97\u7ed3\u679c\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#_5","text":"\u7528 \u4e24\u4e2a\u6808 \uff1a\u5206\u522b\u5b58 \u64cd\u4f5c\u6570 \u548c \u8fd0\u7b97\u7b26 \u2460\u9047\u5230 \u64cd\u4f5c\u6570 \uff0c\u76f4\u63a5\u538b\u5165\u64cd\u4f5c\u6570\u6808\u3002 \u2461\u9047\u5230 \u8fd0\u7b97\u7b26 \u6216 \u754c\u9650\u7b26 \uff0c\u6309\u201c\u4e2d\u7f00\u8f6c\u540e\u7f00\u201d\u7684\u903b\u8f91\u538b\u5165\u8fd0\u7b97\u7b26\u6808\uff0c\u6bcf\u5f53\u5f39\u51fa\u4e00\u4e2a\u8fd0\u7b97\u7b26\u65f6\uff0c\u76f8\u5e94\u5730\u5f39\u51fa\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u6267\u884c\u76f8\u5e94\u8fd0\u7b97\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u538b\u56de\u64cd\u4f5c\u6570\u6808","title":"\u65b9\u6cd5\u4e09\uff1a\u4e2d\u7f00\u8f6c\u540e\u7f00\u548c\u540e\u7f00\u8ba1\u7b97\u540c\u65f6\u8fdb\u884c(\u4e24\u4e2a\u6808)"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/2.4%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/#_6","text":"\u9012\u5f52\u7684\u80cc\u540e\u662f\u6808\u7684\u5e94\u7528","title":"\u4e8c\u3001\u9012\u5f52"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.1%E9%98%9F%E5%88%97/","text":"\u961f\u5217\u2014\u2014 Queue \u00b6 \u4e00\u3001\u961f\u5217\u7684\u5b9a\u4e49 \u00b6 \u961f\u5217 \u662f\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\uff0c\u5728\u53e6\u4e00\u7aef\u8fdb\u884c\u5220\u9664\u7684\u7ebf\u6027\u8868\uff08 \u5148\u8fdb\u5148\u51fa \uff0c \u540e\u8fdb\u540e\u51fa \uff09 \u4e8c\u3001\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u6ce8 \uff1a\u53c2\u6570\u4ee3\u201c&\u201d\u8868\u793a\uff1a\u65b9\u6cd5\u8fd0\u884c\u5b8c\u540e\uff0c\u5bf9\u53c2\u6570\u4fee\u6539\u7684\u7ed3\u679c\u8981 \u201c\u5e26\u56de\u6765\u201d \u5bf9\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u67e5\u6539 InitQueue ( & Q ); //\u521d\u59cb\u5316\u961f\u5217\uff1a\u6784\u9020\u4e00\u4e2a\u7a7a\u961f\u5217Q\uff0c\u5206\u914d\u5185\u5b58\u7a7a\u95f4 DestoryQueue ( & Q ); //\u9500\u6bc1\u64cd\u4f5c\uff1a\u9500\u6bc1\u961f\u5217\uff0c\u5e76\u91ca\u653e\u961f\u5217Q\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4 EnQueue ( & Q , x ); //\u5165\u961f\uff0c\u82e5\u961f\u5217Q\u672a\u6ee1\uff0c\u5219\u5c06x\u52a0\u5165\u4f7f\u4e4b\u6210\u4e3a\u65b0\u7684\u961f\u5c3e DeQueue ( & Q , & x ); //\u51fa\u961f\uff0c\u82e5\u961f\u5217Q\u975e\u7a7a\uff0c\u5219\u5220\u9664\u961f\u5934\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de GetHead ( Q , & x ); //\u8bfb\u961f\u5934\u5143\u7d20\uff0c\u82e5\u961f\u5217Q\u975e\u7a7a\uff0c\u5219\u5c06x\u8fd4\u56de\u961f\u5934\u5143\u7d20 //\u5176\u5b83\u5e38\u7528\u64cd\u4f5c QueueEmpty ( Q ); //\u5224\u7a7a\u64cd\u4f5c \u4e09\u3001\u5b58\u50a8\u7ed3\u6784 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8 \u56db\u3001\u961f\u5217\u5206\u7c7b \u00b6 \u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\uff1a\u987a\u5e8f\u961f\u5217 \u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8\uff1a\u94fe\u5f0f\u961f\u5217","title":"2.5\u961f\u5217"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.1%E9%98%9F%E5%88%97/#queue","text":"","title":"\u961f\u5217\u2014\u2014 Queue"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.1%E9%98%9F%E5%88%97/#_1","text":"\u961f\u5217 \u662f\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\uff0c\u5728\u53e6\u4e00\u7aef\u8fdb\u884c\u5220\u9664\u7684\u7ebf\u6027\u8868\uff08 \u5148\u8fdb\u5148\u51fa \uff0c \u540e\u8fdb\u540e\u51fa \uff09","title":"\u4e00\u3001\u961f\u5217\u7684\u5b9a\u4e49"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.1%E9%98%9F%E5%88%97/#_2","text":"\u6ce8 \uff1a\u53c2\u6570\u4ee3\u201c&\u201d\u8868\u793a\uff1a\u65b9\u6cd5\u8fd0\u884c\u5b8c\u540e\uff0c\u5bf9\u53c2\u6570\u4fee\u6539\u7684\u7ed3\u679c\u8981 \u201c\u5e26\u56de\u6765\u201d \u5bf9\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u67e5\u6539 InitQueue ( & Q ); //\u521d\u59cb\u5316\u961f\u5217\uff1a\u6784\u9020\u4e00\u4e2a\u7a7a\u961f\u5217Q\uff0c\u5206\u914d\u5185\u5b58\u7a7a\u95f4 DestoryQueue ( & Q ); //\u9500\u6bc1\u64cd\u4f5c\uff1a\u9500\u6bc1\u961f\u5217\uff0c\u5e76\u91ca\u653e\u961f\u5217Q\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4 EnQueue ( & Q , x ); //\u5165\u961f\uff0c\u82e5\u961f\u5217Q\u672a\u6ee1\uff0c\u5219\u5c06x\u52a0\u5165\u4f7f\u4e4b\u6210\u4e3a\u65b0\u7684\u961f\u5c3e DeQueue ( & Q , & x ); //\u51fa\u961f\uff0c\u82e5\u961f\u5217Q\u975e\u7a7a\uff0c\u5219\u5220\u9664\u961f\u5934\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de GetHead ( Q , & x ); //\u8bfb\u961f\u5934\u5143\u7d20\uff0c\u82e5\u961f\u5217Q\u975e\u7a7a\uff0c\u5219\u5c06x\u8fd4\u56de\u961f\u5934\u5143\u7d20 //\u5176\u5b83\u5e38\u7528\u64cd\u4f5c QueueEmpty ( Q ); //\u5224\u7a7a\u64cd\u4f5c","title":"\u4e8c\u3001\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.1%E9%98%9F%E5%88%97/#_3","text":"\u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8","title":"\u4e09\u3001\u5b58\u50a8\u7ed3\u6784"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.1%E9%98%9F%E5%88%97/#_4","text":"\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\uff1a\u987a\u5e8f\u961f\u5217 \u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8\uff1a\u94fe\u5f0f\u961f\u5217","title":"\u56db\u3001\u961f\u5217\u5206\u7c7b"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/","text":"\u987a\u5e8f\u961f\u5217\u2014\u2014 Sequence Queue \u00b6 \u4e00\u3001\u987a\u5e8f\u961f\u5217\u7684\u5b9a\u4e49 \u00b6 \u987a\u5e8f\u961f\u5217 \uff1a\u961f\u5217\u7684 \u987a\u5e8f\u5b58\u50a8 \u3002 \u4e8c\u3001\u987a\u5e8f\u961f\u5217\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u9759\u6001\u5206\u914d \u548c \u52a8\u6001\u5206\u914d \u6ce8 \uff1a\u8fd9\u4e24\u79cd\u65b9\u5f0f\uff1a\u53ea\u662f\u7c7b\u578b\u63cf\u8ff0\u548c\u521d\u59cb\u5316\u4e0d\u4e00\u6837\uff0c\u5224\u7a7a\u3001\u5165\u961f\u3001\u51fa\u961f\u3001\u53d6\u961f\u5934\u64cd\u4f5c\u90fd\u4e00\u6837 \u4e09\u3001\u987a\u5e8f\u961f\u5217\u4e0a\u7684\u64cd\u4f5c \u00b6 \u4ee5 \u5faa\u73af\u961f\u5217 \u4e3a\u4e3b \u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u961f\u5217\uff1a\u7c7b\u578b\u63cf\u8ff0\u548c\u521d\u59cb\u5316 \u00b6 #define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 Elemtype front , rear ; //\u961f\u5217\u9876\u6307\u9488 } SqQueue ; //\u521d\u59cb\u5316\u4e00\u4e2a\u961f\u5217 void InitStack ( SqQueue & Q ){ Q . rear = Q . front = 0 ; //\u521d\u59cb\u5316\u961f\u5217\u9876\u6307\u9488 } \u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u961f\u5217\uff1a\u7c7b\u578b\u63cf\u8ff0\u548c\u521d\u59cb\u5316 \u00b6 typedef struct { Elemtype * base ; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 Elemtype front , rear ; //\u961f\u5217\u9876\u6307\u9488 } SqQueue ; //\u521d\u59cb\u5316\u4e00\u4e2a\u961f\u5217 bool InitQueue ( SqQueue & Q ){ Q . base = ( Elemtype * ) malloc ( MAXQSIZE * sizeof ( Elemtype )); if ( ! Q . Base ) return false ; Q . front = Q . rear = 0 ; return true ; } \u5224\u961f\u5217\u7a7a \u00b6 //\u5224\u7a7a bool StackEmpty ( SqStack S ){ if ( Q . rear == Q . front ){ //\u961f\u5217\u5df2\u7a7a return true ; } else { return false ; } } \u5165\u961f\uff08\u5faa\u73af\u961f\u5217\uff09 \u00b6 //\u5165\u961f bool EnQueue ( SqQueue & Q , Elemtype e ){ if (( Q . rear + 1 ) % MAXSIZE == Q . front ) return false ; //\u961f\u5217\u5df2\u6ee1 Q . data [ Q . rear ] = e ; //e\u4e3a\u961f\u5c3e\u5143\u7d20 Q . rear = ( Q . rear + 1 ) % MaxSize ; //\u961f\u5c3e\u6307\u9488\u540e\u79fb return true ; } \u51fa\u961f\uff08\u5faa\u73af\u961f\u5217\uff09 \u00b6 //\u51fa\u961f bool DeQueue ( SqQueue & Q , Elemtype & e ){ if ( Q . rear == Q . front ) return false ; e = Q . data [ Q . front ]; //e\u4e3a\u961f\u5934\u5143\u7d20 Q . front = ( Q . front + 1 ) % MAXQSIZE ; //\u961f\u5934\u6307\u9488\u540e\u79fb return true ; } \u83b7\u53d6\u961f\u5934\u5143\u7d20 \u00b6 //\u83b7\u53d6\u961f\u5934\u5143\u7d20 bool GetHead ( SqQueue & Q , Elemtype & e ){ if ( Q . rear == Q . front ) return false ; e = Q . data [ Q . front ]; //e\u4e3a\u961f\u5217\u9876\u5143\u7d20 return true ; } \u961f\u5217\u5df2\u7a7a/\u5df2\u6ee1 \u00b6 \u65b9\u6848\u4e00\uff1a #define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 int front , rear ; //\u961f\u5217\u9876\u6307\u9488 } SqQueue ; \u5df2\u7a7a\uff1aQ.rear == Q.front \u5df2\u6ee1\uff1a(Q.rear+1)%MAXSIZE == Q.front \u65b9\u6848\u4e8c\uff1a #define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 int front , rear ; //\u961f\u5217\u9876\u6307\u9488 int size ; //\u961f\u5217\u5f53\u524d\u957f\u5ea6 } SqQueue ; \u5df2\u7a7a\uff1asize == 0 \u5df2\u6ee1\uff1asize == MAXSIZE \u65b9\u6848\u4e09\uff1a #define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 int front , rear ; //\u961f\u5217\u9876\u6307\u9488 int tag ; //\u8bb0\u5f55\u6700\u8fd1\u662f\u5220\u9664\u8fd8\u662f\u63d2\u5165\uff0c0\u662f\u5220\u9664\uff0c1\u662f\u63d2\u5165 } SqQueue ; \u5df2\u7a7a\uff1aQ.rear == Q.front && tag = 0 \u5df2\u6ee1\uff1aQ.rear == Q.front && tag = 1 \u5143\u7d20\u7684\u4e2a\u6570 \u00b6 (Q.rear+MAXSIZE-Q.front)%MAXSIZE == Q.front","title":"2.6\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#sequence-queue","text":"","title":"\u987a\u5e8f\u961f\u5217\u2014\u2014 Sequence Queue"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_1","text":"\u987a\u5e8f\u961f\u5217 \uff1a\u961f\u5217\u7684 \u987a\u5e8f\u5b58\u50a8 \u3002","title":"\u4e00\u3001\u987a\u5e8f\u961f\u5217\u7684\u5b9a\u4e49"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_2","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u9759\u6001\u5206\u914d \u548c \u52a8\u6001\u5206\u914d \u6ce8 \uff1a\u8fd9\u4e24\u79cd\u65b9\u5f0f\uff1a\u53ea\u662f\u7c7b\u578b\u63cf\u8ff0\u548c\u521d\u59cb\u5316\u4e0d\u4e00\u6837\uff0c\u5224\u7a7a\u3001\u5165\u961f\u3001\u51fa\u961f\u3001\u53d6\u961f\u5934\u64cd\u4f5c\u90fd\u4e00\u6837","title":"\u4e8c\u3001\u987a\u5e8f\u961f\u5217\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_3","text":"\u4ee5 \u5faa\u73af\u961f\u5217 \u4e3a\u4e3b","title":"\u4e09\u3001\u987a\u5e8f\u961f\u5217\u4e0a\u7684\u64cd\u4f5c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_4","text":"#define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 Elemtype front , rear ; //\u961f\u5217\u9876\u6307\u9488 } SqQueue ; //\u521d\u59cb\u5316\u4e00\u4e2a\u961f\u5217 void InitStack ( SqQueue & Q ){ Q . rear = Q . front = 0 ; //\u521d\u59cb\u5316\u961f\u5217\u9876\u6307\u9488 }","title":"\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u961f\u5217\uff1a\u7c7b\u578b\u63cf\u8ff0\u548c\u521d\u59cb\u5316"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_5","text":"typedef struct { Elemtype * base ; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 Elemtype front , rear ; //\u961f\u5217\u9876\u6307\u9488 } SqQueue ; //\u521d\u59cb\u5316\u4e00\u4e2a\u961f\u5217 bool InitQueue ( SqQueue & Q ){ Q . base = ( Elemtype * ) malloc ( MAXQSIZE * sizeof ( Elemtype )); if ( ! Q . Base ) return false ; Q . front = Q . rear = 0 ; return true ; }","title":"\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u961f\u5217\uff1a\u7c7b\u578b\u63cf\u8ff0\u548c\u521d\u59cb\u5316"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_6","text":"//\u5224\u7a7a bool StackEmpty ( SqStack S ){ if ( Q . rear == Q . front ){ //\u961f\u5217\u5df2\u7a7a return true ; } else { return false ; } }","title":"\u5224\u961f\u5217\u7a7a"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_7","text":"//\u5165\u961f bool EnQueue ( SqQueue & Q , Elemtype e ){ if (( Q . rear + 1 ) % MAXSIZE == Q . front ) return false ; //\u961f\u5217\u5df2\u6ee1 Q . data [ Q . rear ] = e ; //e\u4e3a\u961f\u5c3e\u5143\u7d20 Q . rear = ( Q . rear + 1 ) % MaxSize ; //\u961f\u5c3e\u6307\u9488\u540e\u79fb return true ; }","title":"\u5165\u961f\uff08\u5faa\u73af\u961f\u5217\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_8","text":"//\u51fa\u961f bool DeQueue ( SqQueue & Q , Elemtype & e ){ if ( Q . rear == Q . front ) return false ; e = Q . data [ Q . front ]; //e\u4e3a\u961f\u5934\u5143\u7d20 Q . front = ( Q . front + 1 ) % MAXQSIZE ; //\u961f\u5934\u6307\u9488\u540e\u79fb return true ; }","title":"\u51fa\u961f\uff08\u5faa\u73af\u961f\u5217\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_9","text":"//\u83b7\u53d6\u961f\u5934\u5143\u7d20 bool GetHead ( SqQueue & Q , Elemtype & e ){ if ( Q . rear == Q . front ) return false ; e = Q . data [ Q . front ]; //e\u4e3a\u961f\u5217\u9876\u5143\u7d20 return true ; }","title":"\u83b7\u53d6\u961f\u5934\u5143\u7d20"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_10","text":"\u65b9\u6848\u4e00\uff1a #define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 int front , rear ; //\u961f\u5217\u9876\u6307\u9488 } SqQueue ; \u5df2\u7a7a\uff1aQ.rear == Q.front \u5df2\u6ee1\uff1a(Q.rear+1)%MAXSIZE == Q.front \u65b9\u6848\u4e8c\uff1a #define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 int front , rear ; //\u961f\u5217\u9876\u6307\u9488 int size ; //\u961f\u5217\u5f53\u524d\u957f\u5ea6 } SqQueue ; \u5df2\u7a7a\uff1asize == 0 \u5df2\u6ee1\uff1asize == MAXSIZE \u65b9\u6848\u4e09\uff1a #define MaxSize 10 typedef struct { Elemtype data [ MaxSize ]; //\u9759\u6001\u6570\u7ec4\u5b58\u653e\u961f\u5217\u4e2d\u5143\u7d20 int front , rear ; //\u961f\u5217\u9876\u6307\u9488 int tag ; //\u8bb0\u5f55\u6700\u8fd1\u662f\u5220\u9664\u8fd8\u662f\u63d2\u5165\uff0c0\u662f\u5220\u9664\uff0c1\u662f\u63d2\u5165 } SqQueue ; \u5df2\u7a7a\uff1aQ.rear == Q.front && tag = 0 \u5df2\u6ee1\uff1aQ.rear == Q.front && tag = 1","title":"\u961f\u5217\u5df2\u7a7a/\u5df2\u6ee1"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.2%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%28%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%29%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/#_11","text":"(Q.rear+MAXSIZE-Q.front)%MAXSIZE == Q.front","title":"\u5143\u7d20\u7684\u4e2a\u6570"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/","text":"\u94fe\u961f\u5217\u2014\u2014 Linked Queue \u00b6 \u4e00\u3001\u94fe\u961f\u5217\u7684\u5b9a\u4e49 \u00b6 \u94fe\u961f\u5217 \uff1a\u961f\u5217\u7684 \u94fe\u5b58\u50a8 \u3002 \u4e8c\u3001\u94fe\u961f\u5217\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u6ce8 \uff1a\u8fd9\u4e24\u79cd\u65b9\u5f0f\uff1a\u7c7b\u578b\u63cf\u8ff0\u76f8\u540c\uff0c\u521d\u59cb\u5316\u548c\u5224\u7a7a\u4e0d\u540c \u200b \u5165\u961f\uff0c\u4e0d\u5e26\u5934\u8282\u70b9\u8981\u5bf9\u7b2c\u4e00\u4e2a\u7279\u6b8a\u5904\u7406 \u200b \u51fa\u961f\uff0c\u53d6\u961f\u5934\u5143\u7d20\u4e0d\u4e00\u6837\uff0c\u4e0d\u5e26\u5934\u8282\u70b9\u662fQ.front\uff0c\u5e26\u5934\u7ed3\u70b9\u662fQ.front->next\uff0c\u56e0\u4e3a\u94fe\u961f\u4ee5 \u94fe\u5934 \u4e3a \u961f\u5934 \u4e09\u3001\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u961f\u5217\u4e0a\u7684\u64cd\u4f5c \u00b6 \u94fe\u961f\u5217\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b ElemType data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode ; typedef struct { LNode * front , * rear ; } LinkQueue ; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316\u4e00\u4e2a\u961f\u5217 bool InitQueue ( LinkQueue & Q ){ //\u521d\u59cb\u65f6\uff0cfront, rear\u90fd\u6307\u5411NULL Q . front = NULL ; Q . rear = NULL ; return true ; } \u5224\u7a7a \u00b6 //\u5224\u7a7a bool StackEmpty ( LinkQueue S ){ if ( Q . front == NULL ){ //\u961f\u5217\u5df2\u7a7a return true ; } else { return false ; } } \u5165\u961f \u00b6 //\u5165\u961f void EnQueue ( LinkQueue & Q , Elemtype e ){ LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = e ; //e\u4e3a\u961f\u5c3e\u5143\u7d20 s -> next = NULL ; //\u5bf9\u7b2c\u4e00\u4e2a\u7279\u6b8a\u5904\u7406 if ( Q . front == NULL ){ Q . front = s ; Q . rear = s ; } Q . rear -> next = s ; //\u65b0\u7ed3\u70b9\u63d2\u5165\u5230rear\u540e Q . rear s ; //\u961f\u5c3e\u6307\u9488\u540e\u79fb } \u51fa\u961f \u00b6 //\u51fa\u961f bool DeQueue ( LinkQueue & Q , Elemtype & e ){ if ( Q . rear == NULL ) return false ; LNode * p = Q . front ; e = p -> data ; //e\u4e3a\u961f\u5934\u5143\u7d20 Q . front = p -> next ; //\u961f\u5934\u6307\u9488\u540e\u79fb if ( Q . rear == p ){ //\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u51fa\u961f Q . front = NULL ; Q . rear = NULL ; } free ( p ); return true ; } \u83b7\u53d6\u961f\u5934\u5143\u7d20 \u00b6 //\u83b7\u53d6\u961f\u5934\u5143\u7d20 bool GetHead ( SqQueue & Q , Elemtype & e ){ if ( Q . rear == Q . front ) return false ; e = Q . data [ Q . front ]; //e\u4e3a\u961f\u5217\u9876\u5143\u7d20 return true ; } \u56db\u3001\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u961f\u5217\u4e0a\u7684\u64cd\u4f5c \u00b6 \u94fe\u961f\u5217\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b ElemType data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode ; typedef struct { LNode * front , * rear ; } LinkQueue ; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316\u4e00\u4e2a\u961f\u5217 bool InitQueue ( LinkQueue & Q ){ ////\u521d\u59cb\u65f6\uff0cfront, rear\u90fd\u6307\u5411\u5934\u7ed3\u70b9 Q . front = Q . rear = ( LNode * ) malloc ( sizeof ( LNode )); Q . front = Q . rear = NULL ; return true ; } \u5224\u7a7a \u00b6 //\u5224\u7a7a bool StackEmpty ( SqStack S ){ if ( Q . rear == Q . front ){ //\u961f\u5217\u5df2\u7a7a return true ; } else { return false ; } } //\u6216 //\u5224\u7a7a bool StackEmpty ( SqStack S ){ if ( Q . front -> next == NULL ){ //\u961f\u5217\u5df2\u7a7a return true ; } else { return false ; } } \u5165\u961f\uff08\u5faa\u73af\u961f\u5217\uff09 \u00b6 //\u5165\u961f void EnQueue ( LinkQueue & Q , Elemtype e ){ LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = e ; //e\u4e3a\u961f\u5c3e\u5143\u7d20 s -> next = NULL ; Q -> rear -> next = s ; //\u65b0\u7ed3\u70b9\u63d2\u5165\u5230rear\u540e Q . rear s ; //\u961f\u5c3e\u6307\u9488\u540e\u79fb } \u51fa\u961f \u00b6 //\u51fa\u961f bool DeQueue ( LinkQueue & Q , Elemtype & e ){ if ( Q . rear == NULL ) return false ; LNode * p = Q . front -> next ; e = p -> data ; //e\u4e3a\u961f\u5934\u5143\u7d20 Q . front -> next = p -> next ; //\u961f\u5934\u6307\u9488\u540e\u79fb if ( Q . rear == p ){ //\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u51fa\u961f Q . front = Q . rear ; } free ( p ); return true ; } \u4e94\u3001\u961f\u5217\u5df2\u6ee1 \u00b6 \u94fe\u961f\u4e00\u822c\u4e0d\u4f1a\u961f\u6ee1","title":"2.7\u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#linked-queue","text":"","title":"\u94fe\u961f\u5217\u2014\u2014 Linked Queue"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_1","text":"\u94fe\u961f\u5217 \uff1a\u961f\u5217\u7684 \u94fe\u5b58\u50a8 \u3002","title":"\u4e00\u3001\u94fe\u961f\u5217\u7684\u5b9a\u4e49"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_2","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u5e26\u5934\u7ed3\u70b9\u6bd4\u4e0d\u5e26\u5934\u7ed3\u70b9\u597d \u6ce8 \uff1a\u8fd9\u4e24\u79cd\u65b9\u5f0f\uff1a\u7c7b\u578b\u63cf\u8ff0\u76f8\u540c\uff0c\u521d\u59cb\u5316\u548c\u5224\u7a7a\u4e0d\u540c \u200b \u5165\u961f\uff0c\u4e0d\u5e26\u5934\u8282\u70b9\u8981\u5bf9\u7b2c\u4e00\u4e2a\u7279\u6b8a\u5904\u7406 \u200b \u51fa\u961f\uff0c\u53d6\u961f\u5934\u5143\u7d20\u4e0d\u4e00\u6837\uff0c\u4e0d\u5e26\u5934\u8282\u70b9\u662fQ.front\uff0c\u5e26\u5934\u7ed3\u70b9\u662fQ.front->next\uff0c\u56e0\u4e3a\u94fe\u961f\u4ee5 \u94fe\u5934 \u4e3a \u961f\u5934","title":"\u4e8c\u3001\u94fe\u961f\u5217\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_3","text":"","title":"\u4e09\u3001\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u961f\u5217\u4e0a\u7684\u64cd\u4f5c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_4","text":"typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b ElemType data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode ; typedef struct { LNode * front , * rear ; } LinkQueue ;","title":"\u94fe\u961f\u5217\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_5","text":"//\u521d\u59cb\u5316\u4e00\u4e2a\u961f\u5217 bool InitQueue ( LinkQueue & Q ){ //\u521d\u59cb\u65f6\uff0cfront, rear\u90fd\u6307\u5411NULL Q . front = NULL ; Q . rear = NULL ; return true ; }","title":"\u521d\u59cb\u5316"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_6","text":"//\u5224\u7a7a bool StackEmpty ( LinkQueue S ){ if ( Q . front == NULL ){ //\u961f\u5217\u5df2\u7a7a return true ; } else { return false ; } }","title":"\u5224\u7a7a"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_7","text":"//\u5165\u961f void EnQueue ( LinkQueue & Q , Elemtype e ){ LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = e ; //e\u4e3a\u961f\u5c3e\u5143\u7d20 s -> next = NULL ; //\u5bf9\u7b2c\u4e00\u4e2a\u7279\u6b8a\u5904\u7406 if ( Q . front == NULL ){ Q . front = s ; Q . rear = s ; } Q . rear -> next = s ; //\u65b0\u7ed3\u70b9\u63d2\u5165\u5230rear\u540e Q . rear s ; //\u961f\u5c3e\u6307\u9488\u540e\u79fb }","title":"\u5165\u961f"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_8","text":"//\u51fa\u961f bool DeQueue ( LinkQueue & Q , Elemtype & e ){ if ( Q . rear == NULL ) return false ; LNode * p = Q . front ; e = p -> data ; //e\u4e3a\u961f\u5934\u5143\u7d20 Q . front = p -> next ; //\u961f\u5934\u6307\u9488\u540e\u79fb if ( Q . rear == p ){ //\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u51fa\u961f Q . front = NULL ; Q . rear = NULL ; } free ( p ); return true ; }","title":"\u51fa\u961f"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_9","text":"//\u83b7\u53d6\u961f\u5934\u5143\u7d20 bool GetHead ( SqQueue & Q , Elemtype & e ){ if ( Q . rear == Q . front ) return false ; e = Q . data [ Q . front ]; //e\u4e3a\u961f\u5217\u9876\u5143\u7d20 return true ; }","title":"\u83b7\u53d6\u961f\u5934\u5143\u7d20"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_10","text":"","title":"\u56db\u3001\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u961f\u5217\u4e0a\u7684\u64cd\u4f5c"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_11","text":"typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b ElemType data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode ; typedef struct { LNode * front , * rear ; } LinkQueue ;","title":"\u94fe\u961f\u5217\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_12","text":"//\u521d\u59cb\u5316\u4e00\u4e2a\u961f\u5217 bool InitQueue ( LinkQueue & Q ){ ////\u521d\u59cb\u65f6\uff0cfront, rear\u90fd\u6307\u5411\u5934\u7ed3\u70b9 Q . front = Q . rear = ( LNode * ) malloc ( sizeof ( LNode )); Q . front = Q . rear = NULL ; return true ; }","title":"\u521d\u59cb\u5316"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_13","text":"//\u5224\u7a7a bool StackEmpty ( SqStack S ){ if ( Q . rear == Q . front ){ //\u961f\u5217\u5df2\u7a7a return true ; } else { return false ; } } //\u6216 //\u5224\u7a7a bool StackEmpty ( SqStack S ){ if ( Q . front -> next == NULL ){ //\u961f\u5217\u5df2\u7a7a return true ; } else { return false ; } }","title":"\u5224\u7a7a"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_14","text":"//\u5165\u961f void EnQueue ( LinkQueue & Q , Elemtype e ){ LNode * s = ( LNode * ) malloc ( sizeof ( LNode )); s -> data = e ; //e\u4e3a\u961f\u5c3e\u5143\u7d20 s -> next = NULL ; Q -> rear -> next = s ; //\u65b0\u7ed3\u70b9\u63d2\u5165\u5230rear\u540e Q . rear s ; //\u961f\u5c3e\u6307\u9488\u540e\u79fb }","title":"\u5165\u961f\uff08\u5faa\u73af\u961f\u5217\uff09"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_15","text":"//\u51fa\u961f bool DeQueue ( LinkQueue & Q , Elemtype & e ){ if ( Q . rear == NULL ) return false ; LNode * p = Q . front -> next ; e = p -> data ; //e\u4e3a\u961f\u5934\u5143\u7d20 Q . front -> next = p -> next ; //\u961f\u5934\u6307\u9488\u540e\u79fb if ( Q . rear == p ){ //\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u51fa\u961f Q . front = Q . rear ; } free ( p ); return true ; }","title":"\u51fa\u961f"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.3%E9%93%BE%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/#_16","text":"\u94fe\u961f\u4e00\u822c\u4e0d\u4f1a\u961f\u6ee1","title":"\u4e94\u3001\u961f\u5217\u5df2\u6ee1"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.4%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E6%94%B9%E8%BF%9B/","text":"\u53cc\u7aef\u961f\u5217\u2014\u2014 Double-ended Queue \u00b6 \u4e00\u3001\u53cc\u7aef\u961f\u5217\u7684\u5b9a\u4e49 \u00b6 \u7ebf\u6027\u8868 \uff1a\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u5220\u9664 \u6808\u3001\u961f\u5217\u3001\u53cc\u7aef\u961f\u5217\u90fd\u662f\u53ea\u80fd\u4e24\u7aef\u63d2\u5165\u5220\u9664\u7684\u7ebf\u6027\u8868 \u6808 \uff1a\u4e00\u7aef\u63d2\u5165\u5220\u9664 \u5171\u4eab\u6808 \uff1a\u6808\u7684\u53d8\u79cd\uff0c\u4e24\u7aef\u4e3a\u6808\u5e95\uff0c\u4e2d\u95f4\u4e3a\u6808\u9876\uff0c\u53ea\u80fd\u4e24\u7aef\u5411\u4e2d\u95f4\u63d2\u5165\u5220\u9664 \u961f\u5217 \uff1a\u4e00\u7aef\u63d2\u5165\uff0c\u53e6\u4e00\u7aef\u5220\u9664 \u53cc\u7aef\u961f\u5217 \uff1a\u4e24\u7aef\u90fd\u53ef\u63d2\u5165\u5220\u9664 \u8f93\u5165\u53d7\u9650\u7684\u53cc\u7aef\u961f\u5217 \uff1a\u4e00\u7aef\u63d2\u5165\uff0c\u4e24\u7aef\u5220\u9664 \u8f93\u51fa\u53d7\u9650\u7684\u53cc\u7aef\u961f\u5217 \uff1a\u4e24\u7aef\u63d2\u5165\uff0c\u4e00\u7aef\u5220\u9664","title":"2.8\u53cc\u7aef\u961f\u5217"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.4%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E6%94%B9%E8%BF%9B/#double-ended-queue","text":"","title":"\u53cc\u7aef\u961f\u5217\u2014\u2014 Double-ended Queue"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.4%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E6%94%B9%E8%BF%9B/#_1","text":"\u7ebf\u6027\u8868 \uff1a\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u5220\u9664 \u6808\u3001\u961f\u5217\u3001\u53cc\u7aef\u961f\u5217\u90fd\u662f\u53ea\u80fd\u4e24\u7aef\u63d2\u5165\u5220\u9664\u7684\u7ebf\u6027\u8868 \u6808 \uff1a\u4e00\u7aef\u63d2\u5165\u5220\u9664 \u5171\u4eab\u6808 \uff1a\u6808\u7684\u53d8\u79cd\uff0c\u4e24\u7aef\u4e3a\u6808\u5e95\uff0c\u4e2d\u95f4\u4e3a\u6808\u9876\uff0c\u53ea\u80fd\u4e24\u7aef\u5411\u4e2d\u95f4\u63d2\u5165\u5220\u9664 \u961f\u5217 \uff1a\u4e00\u7aef\u63d2\u5165\uff0c\u53e6\u4e00\u7aef\u5220\u9664 \u53cc\u7aef\u961f\u5217 \uff1a\u4e24\u7aef\u90fd\u53ef\u63d2\u5165\u5220\u9664 \u8f93\u5165\u53d7\u9650\u7684\u53cc\u7aef\u961f\u5217 \uff1a\u4e00\u7aef\u63d2\u5165\uff0c\u4e24\u7aef\u5220\u9664 \u8f93\u51fa\u53d7\u9650\u7684\u53cc\u7aef\u961f\u5217 \uff1a\u4e24\u7aef\u63d2\u5165\uff0c\u4e00\u7aef\u5220\u9664","title":"\u4e00\u3001\u53cc\u7aef\u961f\u5217\u7684\u5b9a\u4e49"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.5%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/","text":"\u961f\u5217\u7684\u5e94\u7528 \u00b6 \u4e00\u3001\u6811\u7684\u5c42\u6b21\u904d\u5386 \u00b6 \u4e8c\u3001\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u904d\u5386 \u00b6 \u4e09\u3001\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5e94\u7528 \u00b6 \u591a\u4e2a\u8fdb\u7a0b\u4e89\u62a2\u6709\u9650\u7684\u7cfb\u7edf\u8d44\u6e90\u65f6\uff0c\u91c7\u7528 \u5148\u6765\u5148\u670d\u52a1\u7b97\u6cd5(FCFS) \u4f8b\u5b50\uff1aCPU\u8d44\u6e90\u5206\u914d\uff1b\u6253\u5370\u6570\u636e\u7f13\u51b2\u533a","title":"2.9\u961f\u5217\u7684\u5e94\u7528"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.5%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/#_1","text":"","title":"\u961f\u5217\u7684\u5e94\u7528"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.5%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/#_2","text":"","title":"\u4e00\u3001\u6811\u7684\u5c42\u6b21\u904d\u5386"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.5%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/#_3","text":"","title":"\u4e8c\u3001\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.5%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/#_4","text":"\u591a\u4e2a\u8fdb\u7a0b\u4e89\u62a2\u6709\u9650\u7684\u7cfb\u7edf\u8d44\u6e90\u65f6\uff0c\u91c7\u7528 \u5148\u6765\u5148\u670d\u52a1\u7b97\u6cd5(FCFS) \u4f8b\u5b50\uff1aCPU\u8d44\u6e90\u5206\u914d\uff1b\u6253\u5370\u6570\u636e\u7f13\u51b2\u533a","title":"\u4e09\u3001\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5e94\u7528"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.6%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/","text":"\u7279\u6b8a\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8 \u00b6 \u4e00\u3001\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u4e00\u7ef4\u6570\u7ec4 \uff1a \\(a[N]\\) \u903b\u8f91\u4e0a\u8fde\u7eed\u5b58\u653e\uff0c\u7269\u7406\u4e0a\uff08\u5185\u5b58\u4e2d\uff09\u4e5f\u8fde\u7eed\u5b58\u653e \u6570\u7ec4\u5143\u7d20 \\(a[i]\\) \u7684 \u7269\u7406\u5730\u5740=LOC+i*sizeof(ElemType) \u4e8c\u7ef4\u6570\u7ec4 \uff1a \\(a[N][M]\\) \u903b\u8f91\u4e0a\u662fn\u884cn\u5217\u7684\u77e9\u9635\uff0c\u7269\u7406\u4e0a\uff08\u5185\u5b58\u4e2d\uff09\u662f \u884c\u4f18\u5148\u5b58\u50a8 \u548c \u5217\u4f18\u5148\u5b58\u50a8 \u7684\u8fde\u7eed\u5b58\u653e \u884c\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u5143\u7d20 \\(a[i][j]\\) \u7684 \u7269\u7406\u5730\u5740=LOC+(i*N+j)*sizeof(ElemType) \u5217\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u5143\u7d20 \\(a[i][j]\\) \u7684 \u7269\u7406\u5730\u5740=LOC+(J*M+i)*sizeof(ElemType) \u666e\u901a\u77e9\u9635\u7684\u5b58\u50a8\u53ef\u7528\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u3002 \u4e8c\u3001\u7279\u6b8a\u77e9\u9635\u7684\u5b58\u50a8 \u00b6 \u2460\u5bf9\u79f0\u77e9\u9635 \u2461\u4e09\u89d2\u77e9\u9635 \u2462\u4e09\u5bf9\u89d2\u77e9\u9635 \u2463\u7a00\u758f\u77e9\u9635 2.1\u5bf9\u79f0\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8 \u00b6 \u5bf9\u79f0\u77e9\u9635 \uff1a \\(a_{i,j}=a_{j,i}\\) \u65b9\u6cd5\uff1a\u4e00\u7ef4\u6570\u7ec4 \\(a[N]\\) \u53ea\u5b58\u4e3b\u5bf9\u89d2\u7ebf+\u4e0b\u4e09\u89d2\u533a\uff08\u6216\u4e3b\u5bf9\u89d2\u7ebf+\u4e0a\u4e09\u89d2\u533a\uff09 \u5b58\u50a8\u6570\u7ec4\u7684\u5927\u5c0f\uff1a \\(N=\\frac{n(n+1)}{2}\\) \u6570\u7ec4\u4e0b\u6807\u8303\u56f4\uff1a \\(0\\) ~ \\(\\frac{n(n+1)}{2}-1\\) \u884c\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u4e0b\u6807\uff1a \\(k=\\begin{cases} \\frac{i(i-1)}{2}+j-1, \\quad i \\geq j(\u4e0b\u4e09\u89d2\u533a\u548c\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20)\\\\ \\frac{j(j-1)}{2}+i-1, \\quad i<j(\u4e0a\u4e09\u89d2\u533a\u5143\u7d20a_{i,j}=a_{j,i}) \\end{cases}\\) 2.2\u4e09\u89d2\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8 \u00b6 \u2460 \u4e0b\u4e09\u89d2\u77e9\u9635 \uff1a\u9664\u4e3b\u5bf9\u89d2\u7ebf\u548c\u4e0b\u4e09\u89d2\u533a\uff0c\u5176\u4f59\u7684\u5143\u7d20\u90fd\u76f8\u7b49 \u65b9\u6cd5\uff1a\u4e00\u7ef4\u6570\u7ec4 \\(a[N]\\) \u5b58\u4e3b\u5bf9\u89d2\u7ebf+\u4e0b\u4e09\u89d2\u533a\uff0c\u5728\u6700\u540e\u591a\u52a0\u4e00\u4e2a\u4f4d\u7f6e\u5b58\u5e38\u5176\u4f59\u76f8\u7b49\u5143\u7d20 \u5b58\u50a8\u6570\u7ec4\u7684\u5927\u5c0f\uff1a \\(N=\\frac{n(n+1)}{2}+1\\) \u6570\u7ec4\u4e0b\u6807\u8303\u56f4\uff1a \\(0\\) ~ \\(\\frac{n(n+1)}{2}\\) \u884c\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u4e0b\u6807\uff1a \\(k=\\begin{cases} \\frac{i(i-1)}{2}+j-1, \\quad i \\geq j(\u4e0b\u4e09\u89d2\u533a\u548c\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20)\\\\ \\frac{n(n+1)}{2}, \\quad\\quad\\quad\\quad i<j(\u4e0a\u4e09\u89d2\u533a\u5143\u7d20) \\end{cases}\\) \u2461 \u4e0a\u4e09\u89d2\u77e9\u9635 \uff1a\u9664\u4e3b\u5bf9\u89d2\u7ebf\u548c\u4e0a\u4e09\u89d2\u533a\uff0c\u5176\u4f59\u7684\u5143\u7d20\u90fd\u76f8\u7b49 \u65b9\u6cd5\uff1a\u4e00\u7ef4\u6570\u7ec4 \\(a[N]\\) \u5b58\u4e3b\u5bf9\u89d2\u7ebf+\u4e0b\u4e09\u89d2\u533a\uff0c\u5728\u6700\u540e\u591a\u52a0\u4e00\u4e2a\u4f4d\u7f6e\u5b58\u5e38\u5176\u4f59\u76f8\u7b49\u5143\u7d20 \u5b58\u50a8\u6570\u7ec4\u7684\u5927\u5c0f\uff1a \\(N=\\frac{n(n+1)}{2}+1\\) \u6570\u7ec4\u4e0b\u6807\u8303\u56f4\uff1a \\(0\\) ~ \\(\\frac{n(n+1)}{2}\\) \u884c\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u4e0b\u6807\uff1a \\(k=\\begin{cases} \\frac{(i-1)(2n-i+2)}{2}+(j-i), \\quad i \\geq j(\u4e0b\u4e09\u89d2\u533a\u548c\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20)\\\\ \\frac{n(n+1)}{2}, \\quad\\quad\\quad\\quad\\quad\\quad\\quad~ i<j(\u4e0a\u4e09\u89d2\u533a\u5143\u7d20) \\end{cases}\\) 2.3\u4e09\u5bf9\u89d2\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8 \u00b6 \u4e09\u5bf9\u89d2\u77e9\u9635 \uff0c\u53c8\u79f0 \u5e26\u72b6\u77e9\u9635 \u3002 \u65b9\u6cd5\uff1a\u4e00\u7ef4\u6570\u7ec4 \\(a[N]\\) \u5b58\u5e26\u72b6\u90e8\u5206 \u5b58\u50a8\u6570\u7ec4\u7684\u5927\u5c0f\uff1a \\(N=3n-3+1\\) \u6570\u7ec4\u4e0b\u6807\u8303\u56f4\uff1a \\(0\\) ~ \\(3n-3\\) \u884c\u4f18\u5148\u5b58\u50a8 \uff1a i\u548cj\u8ba1\u7b97\u6570\u7ec4\u4e0b\u6807k \uff1a \\(k=2i+j-3\\) \u6570\u7ec4\u4e0b\u6807k\u8ba1\u7b97i\u548cj \uff1a \\(i=\\lceil (k+2)/3 \\rceil\\) \uff0c \\(j=k-2i+3\\) 2.4\u7a00\u758f\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8 \u00b6 \u7a00\u758f\u77e9\u9635 \uff1a\u975e\u96f6\u5143\u7d20\u7684\u4e2a\u6570\u8fdc\u8fdc\u5c11\u4e8e\u77e9\u9635\u5143\u7d20\u7684\u4e2a\u6570\u3002 \u65b9\u6cd5\u4e00\uff1a\u987a\u5e8f\u5b58\u50a8\u2014\u2014\u4e09\u5143\u7ec4<\u884c\uff0c\u5217\uff0c\u503c> \uff0c\u6ce8\uff1a\u884c\u5217\u4ece1\u5f00\u59cb i\uff08\u884c\uff09 j\uff08\u5217\uff09 v\uff08\u503c\uff09 1 3 4 1 6 5 2 2 3 \u65b9\u6cd5\u4e8c\uff1a\u94fe\u5f0f\u5b58\u50a8\u2014\u2014\u5341\u5b57\u94fe\u8868\u6cd5","title":"2.10\u7279\u6b8a\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.6%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/#_1","text":"","title":"\u7279\u6b8a\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.6%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/#_2","text":"\u4e00\u7ef4\u6570\u7ec4 \uff1a \\(a[N]\\) \u903b\u8f91\u4e0a\u8fde\u7eed\u5b58\u653e\uff0c\u7269\u7406\u4e0a\uff08\u5185\u5b58\u4e2d\uff09\u4e5f\u8fde\u7eed\u5b58\u653e \u6570\u7ec4\u5143\u7d20 \\(a[i]\\) \u7684 \u7269\u7406\u5730\u5740=LOC+i*sizeof(ElemType) \u4e8c\u7ef4\u6570\u7ec4 \uff1a \\(a[N][M]\\) \u903b\u8f91\u4e0a\u662fn\u884cn\u5217\u7684\u77e9\u9635\uff0c\u7269\u7406\u4e0a\uff08\u5185\u5b58\u4e2d\uff09\u662f \u884c\u4f18\u5148\u5b58\u50a8 \u548c \u5217\u4f18\u5148\u5b58\u50a8 \u7684\u8fde\u7eed\u5b58\u653e \u884c\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u5143\u7d20 \\(a[i][j]\\) \u7684 \u7269\u7406\u5730\u5740=LOC+(i*N+j)*sizeof(ElemType) \u5217\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u5143\u7d20 \\(a[i][j]\\) \u7684 \u7269\u7406\u5730\u5740=LOC+(J*M+i)*sizeof(ElemType) \u666e\u901a\u77e9\u9635\u7684\u5b58\u50a8\u53ef\u7528\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u3002","title":"\u4e00\u3001\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.6%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/#_3","text":"\u2460\u5bf9\u79f0\u77e9\u9635 \u2461\u4e09\u89d2\u77e9\u9635 \u2462\u4e09\u5bf9\u89d2\u77e9\u9635 \u2463\u7a00\u758f\u77e9\u9635","title":"\u4e8c\u3001\u7279\u6b8a\u77e9\u9635\u7684\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.6%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/#21","text":"\u5bf9\u79f0\u77e9\u9635 \uff1a \\(a_{i,j}=a_{j,i}\\) \u65b9\u6cd5\uff1a\u4e00\u7ef4\u6570\u7ec4 \\(a[N]\\) \u53ea\u5b58\u4e3b\u5bf9\u89d2\u7ebf+\u4e0b\u4e09\u89d2\u533a\uff08\u6216\u4e3b\u5bf9\u89d2\u7ebf+\u4e0a\u4e09\u89d2\u533a\uff09 \u5b58\u50a8\u6570\u7ec4\u7684\u5927\u5c0f\uff1a \\(N=\\frac{n(n+1)}{2}\\) \u6570\u7ec4\u4e0b\u6807\u8303\u56f4\uff1a \\(0\\) ~ \\(\\frac{n(n+1)}{2}-1\\) \u884c\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u4e0b\u6807\uff1a \\(k=\\begin{cases} \\frac{i(i-1)}{2}+j-1, \\quad i \\geq j(\u4e0b\u4e09\u89d2\u533a\u548c\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20)\\\\ \\frac{j(j-1)}{2}+i-1, \\quad i<j(\u4e0a\u4e09\u89d2\u533a\u5143\u7d20a_{i,j}=a_{j,i}) \\end{cases}\\)","title":"2.1\u5bf9\u79f0\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.6%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/#22","text":"\u2460 \u4e0b\u4e09\u89d2\u77e9\u9635 \uff1a\u9664\u4e3b\u5bf9\u89d2\u7ebf\u548c\u4e0b\u4e09\u89d2\u533a\uff0c\u5176\u4f59\u7684\u5143\u7d20\u90fd\u76f8\u7b49 \u65b9\u6cd5\uff1a\u4e00\u7ef4\u6570\u7ec4 \\(a[N]\\) \u5b58\u4e3b\u5bf9\u89d2\u7ebf+\u4e0b\u4e09\u89d2\u533a\uff0c\u5728\u6700\u540e\u591a\u52a0\u4e00\u4e2a\u4f4d\u7f6e\u5b58\u5e38\u5176\u4f59\u76f8\u7b49\u5143\u7d20 \u5b58\u50a8\u6570\u7ec4\u7684\u5927\u5c0f\uff1a \\(N=\\frac{n(n+1)}{2}+1\\) \u6570\u7ec4\u4e0b\u6807\u8303\u56f4\uff1a \\(0\\) ~ \\(\\frac{n(n+1)}{2}\\) \u884c\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u4e0b\u6807\uff1a \\(k=\\begin{cases} \\frac{i(i-1)}{2}+j-1, \\quad i \\geq j(\u4e0b\u4e09\u89d2\u533a\u548c\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20)\\\\ \\frac{n(n+1)}{2}, \\quad\\quad\\quad\\quad i<j(\u4e0a\u4e09\u89d2\u533a\u5143\u7d20) \\end{cases}\\) \u2461 \u4e0a\u4e09\u89d2\u77e9\u9635 \uff1a\u9664\u4e3b\u5bf9\u89d2\u7ebf\u548c\u4e0a\u4e09\u89d2\u533a\uff0c\u5176\u4f59\u7684\u5143\u7d20\u90fd\u76f8\u7b49 \u65b9\u6cd5\uff1a\u4e00\u7ef4\u6570\u7ec4 \\(a[N]\\) \u5b58\u4e3b\u5bf9\u89d2\u7ebf+\u4e0b\u4e09\u89d2\u533a\uff0c\u5728\u6700\u540e\u591a\u52a0\u4e00\u4e2a\u4f4d\u7f6e\u5b58\u5e38\u5176\u4f59\u76f8\u7b49\u5143\u7d20 \u5b58\u50a8\u6570\u7ec4\u7684\u5927\u5c0f\uff1a \\(N=\\frac{n(n+1)}{2}+1\\) \u6570\u7ec4\u4e0b\u6807\u8303\u56f4\uff1a \\(0\\) ~ \\(\\frac{n(n+1)}{2}\\) \u884c\u4f18\u5148\u5b58\u50a8 \uff1a\u6570\u7ec4\u4e0b\u6807\uff1a \\(k=\\begin{cases} \\frac{(i-1)(2n-i+2)}{2}+(j-i), \\quad i \\geq j(\u4e0b\u4e09\u89d2\u533a\u548c\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20)\\\\ \\frac{n(n+1)}{2}, \\quad\\quad\\quad\\quad\\quad\\quad\\quad~ i<j(\u4e0a\u4e09\u89d2\u533a\u5143\u7d20) \\end{cases}\\)","title":"2.2\u4e09\u89d2\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.6%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/#23","text":"\u4e09\u5bf9\u89d2\u77e9\u9635 \uff0c\u53c8\u79f0 \u5e26\u72b6\u77e9\u9635 \u3002 \u65b9\u6cd5\uff1a\u4e00\u7ef4\u6570\u7ec4 \\(a[N]\\) \u5b58\u5e26\u72b6\u90e8\u5206 \u5b58\u50a8\u6570\u7ec4\u7684\u5927\u5c0f\uff1a \\(N=3n-3+1\\) \u6570\u7ec4\u4e0b\u6807\u8303\u56f4\uff1a \\(0\\) ~ \\(3n-3\\) \u884c\u4f18\u5148\u5b58\u50a8 \uff1a i\u548cj\u8ba1\u7b97\u6570\u7ec4\u4e0b\u6807k \uff1a \\(k=2i+j-3\\) \u6570\u7ec4\u4e0b\u6807k\u8ba1\u7b97i\u548cj \uff1a \\(i=\\lceil (k+2)/3 \\rceil\\) \uff0c \\(j=k-2i+3\\)","title":"2.3\u4e09\u5bf9\u89d2\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"02-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/3.6%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/#24","text":"\u7a00\u758f\u77e9\u9635 \uff1a\u975e\u96f6\u5143\u7d20\u7684\u4e2a\u6570\u8fdc\u8fdc\u5c11\u4e8e\u77e9\u9635\u5143\u7d20\u7684\u4e2a\u6570\u3002 \u65b9\u6cd5\u4e00\uff1a\u987a\u5e8f\u5b58\u50a8\u2014\u2014\u4e09\u5143\u7ec4<\u884c\uff0c\u5217\uff0c\u503c> \uff0c\u6ce8\uff1a\u884c\u5217\u4ece1\u5f00\u59cb i\uff08\u884c\uff09 j\uff08\u5217\uff09 v\uff08\u503c\uff09 1 3 4 1 6 5 2 2 3 \u65b9\u6cd5\u4e8c\uff1a\u94fe\u5f0f\u5b58\u50a8\u2014\u2014\u5341\u5b57\u94fe\u8868\u6cd5","title":"2.4\u7a00\u758f\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"03-%E4%B8%B2/4.1%E4%B8%B2/","text":"\u4e32\uff0c\u5373\u5b57\u7b26\u4e32\u2014\u2014String \u00b6 \u4e00\u3001\u4e32\u7684\u5b9a\u4e49 \u00b6 \u4e32 \u662f\u4e00\u79cd\u7279\u6b8a\u7684 \u7ebf\u6027\u8868 \uff0c\u4e32\u7684 \u6570\u636e\u5bf9\u8c61 \u9650\u5b9a\u4e3a \u5b57\u7b26\u96c6 \u4e8c\u3001\u4e32\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u6ce8 \uff1a\u53c2\u6570\u4ee3\u201c&\u201d\u8868\u793a\uff1a\u65b9\u6cd5\u8fd0\u884c\u5b8c\u540e\uff0c\u5bf9\u53c2\u6570\u4fee\u6539\u7684\u7ed3\u679c\u8981 \u201c\u5e26\u56de\u6765\u201d \u5bf9\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u67e5\u6539 StrAssign ( & \u03c4 chars ); //\u8d4b\u503c\u64cd\u4f5c\u3002\u628a\u4e32T\u8d4b\u503c\u4e3achars StrCopy ( & TS ); //\u590d\u5236\u64cd\u4f5c\u3002\u7531\u4e32S\u590d\u5236\u5f97\u5230\u4e32T\u3002 StrEmpty ( S ); //\u5224\u7a7a\u64cd\u4f5c\u3002\u82e5S\u4e3a\u7a7a\u4e32,\u5219\u8fd4\u56deTRUE,\u5426\u5219\u8fd4\u56de FALSE\u3002 StrEngth ( S ); //\u6c42\u4e32\u957f\u3002\u8fd4\u56de\u4e32S\u7684\u5143\u7d20\u4e2a\u6570 ClearString ( & S ); //\u6e05\u7a7a\u64cd\u4f5c\u3002\u5c06S\u6e05\u4e3a\u7a7a\u4e32\u3002 Destroystring ( & S ); //\u9500\u6bc1\u4e32\u3002\u5c06\u4e32S\u9500\u6bc1(\u56de\u6536\u5b58\u50a8\u7a7a\u95f4)\u3002 Concat ( & TS1 , S2 ); //\u4e32\u8054\u63a5\u3002\u7528T\u8fd4\u56de\u7531S1\u548cS2\u8054\u63a5\u800c\u6210\u7684\u65b0\u4e32 SubString ( & sub , S , pos , len ); //\u6c42\u5b50\u4e32\u3002\u7528Sub\u8fd4\u56de\u4e32S\u7684\u7b2cpos\u4e2a\u5b57\u7b26\u8d77\u957f\u5ea6\u4e3a|en\u7684\u5b50\u4e32\u3002 ndex ( S , T ); //\u5b9a\u4f4d\u64cd\u4f5c\u3002\u82e5\u4e3b\u4e32S\u4e2d\u5b58\u5728\u4e0e\u4e32T\u503c\u76f8\u540c\u7684\u5b50\u4e32,\u5219\u8fd4\u56de\u5b83\u5728\u4e3b\u4e32S\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e;\u5426\u5219\u51fd\u6570\u503c\u4e3a0\u3002 StrCompare ( S , T ); //\u6bd4\u8f83\u64cd\u4f5c\u3002\u82e5S>T,\u5219\u8fd4\u56de\u503c>0;\u82e5S=T,\u5219\u8fd4\u56de\u503c=0;\u82e5S<T,\u5219\u8fd4\u56de\u503c<0\u3002 \u4e09\u3001\u5b58\u50a8\u7ed3\u6784 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8","title":"3.1\u4e32"},{"location":"03-%E4%B8%B2/4.1%E4%B8%B2/#string","text":"","title":"\u4e32\uff0c\u5373\u5b57\u7b26\u4e32\u2014\u2014String"},{"location":"03-%E4%B8%B2/4.1%E4%B8%B2/#_1","text":"\u4e32 \u662f\u4e00\u79cd\u7279\u6b8a\u7684 \u7ebf\u6027\u8868 \uff0c\u4e32\u7684 \u6570\u636e\u5bf9\u8c61 \u9650\u5b9a\u4e3a \u5b57\u7b26\u96c6","title":"\u4e00\u3001\u4e32\u7684\u5b9a\u4e49"},{"location":"03-%E4%B8%B2/4.1%E4%B8%B2/#_2","text":"\u6ce8 \uff1a\u53c2\u6570\u4ee3\u201c&\u201d\u8868\u793a\uff1a\u65b9\u6cd5\u8fd0\u884c\u5b8c\u540e\uff0c\u5bf9\u53c2\u6570\u4fee\u6539\u7684\u7ed3\u679c\u8981 \u201c\u5e26\u56de\u6765\u201d \u5bf9\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u67e5\u6539 StrAssign ( & \u03c4 chars ); //\u8d4b\u503c\u64cd\u4f5c\u3002\u628a\u4e32T\u8d4b\u503c\u4e3achars StrCopy ( & TS ); //\u590d\u5236\u64cd\u4f5c\u3002\u7531\u4e32S\u590d\u5236\u5f97\u5230\u4e32T\u3002 StrEmpty ( S ); //\u5224\u7a7a\u64cd\u4f5c\u3002\u82e5S\u4e3a\u7a7a\u4e32,\u5219\u8fd4\u56deTRUE,\u5426\u5219\u8fd4\u56de FALSE\u3002 StrEngth ( S ); //\u6c42\u4e32\u957f\u3002\u8fd4\u56de\u4e32S\u7684\u5143\u7d20\u4e2a\u6570 ClearString ( & S ); //\u6e05\u7a7a\u64cd\u4f5c\u3002\u5c06S\u6e05\u4e3a\u7a7a\u4e32\u3002 Destroystring ( & S ); //\u9500\u6bc1\u4e32\u3002\u5c06\u4e32S\u9500\u6bc1(\u56de\u6536\u5b58\u50a8\u7a7a\u95f4)\u3002 Concat ( & TS1 , S2 ); //\u4e32\u8054\u63a5\u3002\u7528T\u8fd4\u56de\u7531S1\u548cS2\u8054\u63a5\u800c\u6210\u7684\u65b0\u4e32 SubString ( & sub , S , pos , len ); //\u6c42\u5b50\u4e32\u3002\u7528Sub\u8fd4\u56de\u4e32S\u7684\u7b2cpos\u4e2a\u5b57\u7b26\u8d77\u957f\u5ea6\u4e3a|en\u7684\u5b50\u4e32\u3002 ndex ( S , T ); //\u5b9a\u4f4d\u64cd\u4f5c\u3002\u82e5\u4e3b\u4e32S\u4e2d\u5b58\u5728\u4e0e\u4e32T\u503c\u76f8\u540c\u7684\u5b50\u4e32,\u5219\u8fd4\u56de\u5b83\u5728\u4e3b\u4e32S\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e;\u5426\u5219\u51fd\u6570\u503c\u4e3a0\u3002 StrCompare ( S , T ); //\u6bd4\u8f83\u64cd\u4f5c\u3002\u82e5S>T,\u5219\u8fd4\u56de\u503c>0;\u82e5S=T,\u5219\u8fd4\u56de\u503c=0;\u82e5S<T,\u5219\u8fd4\u56de\u503c<0\u3002","title":"\u4e8c\u3001\u4e32\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"03-%E4%B8%B2/4.1%E4%B8%B2/#_3","text":"\u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8","title":"\u4e09\u3001\u5b58\u50a8\u7ed3\u6784"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","text":"\u4e32\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u4e00\u3001\u4e32\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8 \u4e8c\u3001\u4e32\u7684\u987a\u5e8f\u5b58\u50a8\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u9759\u6001\u5206\u914d \u548c \u52a8\u6001\u5206\u914d \uff0c\u4e00\u822c\u7528\u52a8\u6001\u5206\u914d \u4e32\u7684\u7c7b\u578b\u63cf\u8ff0\uff1a \u00b6 \u9759\u6001\u5206\u914d\uff1aSString \u00b6 #define MAXLEN 255; //\u5b9a\u4e49\u6700\u5927\u957f\u5ea6 typedef struct { char ch [ MAXLEN ]; //\u201c\u9759\u6001\u201d\u7684\u6570\u7ec4\u5b58\u6570\u636e\uff0c\u5b58\u5b57\u7b26 int length ; //\u4e32\u7684\u5b9e\u9645\u957f\u5ea6 } SString ; \u52a8\u6001\u5206\u914d\uff1aHString \u00b6 typedef struct { char * ch ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u4e32\u7684\u57fa\u5730\u5740 int length ; //\u987a\u5e8f\u8868\u7684\u5f53\u524d\u957f\u5ea6 } HString ; \u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u5b58\u50a8\u7684\u4e32\u7684\u4f18\u7f3a\u70b9 \u00b6 \u7f3a\u70b9 \uff1a\u4e32\u7684\u987a\u5e8f\u5b58\u50a8\u7684\u8868\u957f\u786e\u5b9a\u540e\u65e0\u6cd5\u4fee\u6539\uff0c\u5b58\u6ee1\u4e86\u5c31\u5b58\u4e0d\u4e86\u4e86 \u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u7684\u4f18\u7f3a\u70b9\uff1a \u00b6 \u4f18\u70b9 \uff1a\u53ef\u4ee5\u52a8\u6001\u589e\u52a0\u957f\u5ea6 \u7f3a\u70b9 \uff1a\u52a8\u6001\u589e\u52a0\u957f\u5ea6\u4e2d\u7684\u8fc1\u79fb\u5de5\u4f5c\u65f6\u95f4\u5f00\u9500\u5927 \u4e09\u3001\u4e32\u7684\u94fe\u5f0f\u5b58\u50a8\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9 \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \u7684\u7c7b\u578b\u63cf\u8ff0\u76f8\u540c\uff0c\u521d\u59cb\u5316\u548c\u5224\u7a7a\u4e0d\u540c \u4e32\u7684\u7c7b\u578b\u63cf\u8ff0\uff1a \u00b6 \u5206\u4e3a\uff1a \u5355\u4e2a\u5206\u914d \u548c \u5806\u5206\u914d \uff0c\u4e00\u822c\u7528\u5806\u5206\u914d \u5355\u4e2a\u5206\u914d\u5b58\u50a8\u5bc6\u5ea6\u4f4e\uff0c\u5806\u5206\u914d\u5b58\u50a8\u5bc6\u5ea6\u9ad8 \u5355\u4e2a\u5206\u914d\uff1a \u00b6 typedef struct StringNode { char ch ; //\u6bcf\u4e2a\u7ed3\u70b9\u5b581\u4e2a\u5b57\u7b26 struct StringNode * next ; } StringNode , * String ; \u5806\u5206\u914d\uff1a \u00b6 typedef struct StringNode { char ch [ 4 ]; //\u6bcf\u4e2a\u7ed3\u70b9\u5b584\u4e2a\u5b57\u7b26 struct StringNode * next ; } StringNode , * String ; \u56db\u3001\u4e32\u7684\u4e0a\u7684\u64cd\u4f5c \u00b6 \u4ee5\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u4e32\u4e3a\u4e3b \u6c42\u5b50\u4e32 \u00b6 //\u6c42\u5b50\u4e32 bool SubString ( SString & Sub , SString S , int pos , int len ){ //\u5b50\u4e32\u8303\u56f4\u8d8a\u754c if ( pos + len -1 > S . length ) return false ; for ( int i = pos ; i < pos + len ; i ++ ){ Sub . ch [ i - pos + 1 ] = S . ch [ i ]; } Sub . length = len ; return true ; } \u5b57\u7b26\u4e32\u6bd4\u8f83 \u00b6 //\u5b57\u7b26\u4e32\u6bd4\u8f83\u64cd\u4f5c\u3002\u82e5S>T,\u5219\u8fd4\u56de\u503c>0;\u82e5S=T,\u5219\u8fd4\u56de\u503c=0;\u82e5S<T,\u5219\u8fd4\u56de\u503c<0\u3002 int StrCompare ( SString S , SString T ){ for ( int i = 1 ; i < S . length && T . length ; i ++ ){ if ( S . ch [ i ] != T . ch [ i ]) return S . ch [ i ] - T [ i ]; } //\u626b\u63cf\u8fc7\u6240\u6709\u5b57\u7b26\u90fd\u76f8\u7b49\uff0c\u5219\u957f\u5ea6\u66f4\u957f\u7684\u4e32\u66f4\u5927 return S . length - T . length ; } \u5b9a\u4f4d\u64cd\u4f5c \u00b6 \u65b9\u6cd5\uff1a\u5728S\u4e2d\u4f9d\u6b21\u6309\u987a\u5e8f\u53d6m\u957f\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u4e0eT\u76f8\u540c //\u5b9a\u4f4d\u64cd\u4f5c int Index ( SString S , SString T ){ int i = 1 , n = StrLength ( S ), m = StrLength ( T ); SString sub ; while ( i < n - m + 1 ){ SubString ( sub , S , i , m ); if ( StrCompare ( sub , T ) != 0 ) ++ i ; else return i ; //\u8fd4\u56de\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u4f4d\u7f6e } return 0 ; //S\u4e2d\u4e0d\u5b58\u5728\u4e0eT\u76f8\u540c\u7684\u5b50\u4e32 }","title":"3.2\u4e32\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u4e32\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_2","text":"\u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8","title":"\u4e00\u3001\u4e32\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_3","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u9759\u6001\u5206\u914d \u548c \u52a8\u6001\u5206\u914d \uff0c\u4e00\u822c\u7528\u52a8\u6001\u5206\u914d","title":"\u4e8c\u3001\u4e32\u7684\u987a\u5e8f\u5b58\u50a8\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_4","text":"","title":"\u4e32\u7684\u7c7b\u578b\u63cf\u8ff0\uff1a"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#sstring","text":"#define MAXLEN 255; //\u5b9a\u4e49\u6700\u5927\u957f\u5ea6 typedef struct { char ch [ MAXLEN ]; //\u201c\u9759\u6001\u201d\u7684\u6570\u7ec4\u5b58\u6570\u636e\uff0c\u5b58\u5b57\u7b26 int length ; //\u4e32\u7684\u5b9e\u9645\u957f\u5ea6 } SString ;","title":"\u9759\u6001\u5206\u914d\uff1aSString"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#hstring","text":"typedef struct { char * ch ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u4e32\u7684\u57fa\u5730\u5740 int length ; //\u987a\u5e8f\u8868\u7684\u5f53\u524d\u957f\u5ea6 } HString ;","title":"\u52a8\u6001\u5206\u914d\uff1aHString"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_5","text":"\u7f3a\u70b9 \uff1a\u4e32\u7684\u987a\u5e8f\u5b58\u50a8\u7684\u8868\u957f\u786e\u5b9a\u540e\u65e0\u6cd5\u4fee\u6539\uff0c\u5b58\u6ee1\u4e86\u5c31\u5b58\u4e0d\u4e86\u4e86","title":"\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u5b58\u50a8\u7684\u4e32\u7684\u4f18\u7f3a\u70b9"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_6","text":"\u4f18\u70b9 \uff1a\u53ef\u4ee5\u52a8\u6001\u589e\u52a0\u957f\u5ea6 \u7f3a\u70b9 \uff1a\u52a8\u6001\u589e\u52a0\u957f\u5ea6\u4e2d\u7684\u8fc1\u79fb\u5de5\u4f5c\u65f6\u95f4\u5f00\u9500\u5927","title":"\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\u7684\u4f18\u7f3a\u70b9\uff1a"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_7","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \uff0c\u4e00\u822c\u7528\u5e26\u5934\u7ed3\u70b9 \u4e0d\u5e26\u5934\u7ed3\u70b9 \u548c \u5e26\u5934\u7ed3\u70b9 \u7684\u7c7b\u578b\u63cf\u8ff0\u76f8\u540c\uff0c\u521d\u59cb\u5316\u548c\u5224\u7a7a\u4e0d\u540c","title":"\u4e09\u3001\u4e32\u7684\u94fe\u5f0f\u5b58\u50a8\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_8","text":"\u5206\u4e3a\uff1a \u5355\u4e2a\u5206\u914d \u548c \u5806\u5206\u914d \uff0c\u4e00\u822c\u7528\u5806\u5206\u914d \u5355\u4e2a\u5206\u914d\u5b58\u50a8\u5bc6\u5ea6\u4f4e\uff0c\u5806\u5206\u914d\u5b58\u50a8\u5bc6\u5ea6\u9ad8","title":"\u4e32\u7684\u7c7b\u578b\u63cf\u8ff0\uff1a"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_9","text":"typedef struct StringNode { char ch ; //\u6bcf\u4e2a\u7ed3\u70b9\u5b581\u4e2a\u5b57\u7b26 struct StringNode * next ; } StringNode , * String ;","title":"\u5355\u4e2a\u5206\u914d\uff1a"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_10","text":"typedef struct StringNode { char ch [ 4 ]; //\u6bcf\u4e2a\u7ed3\u70b9\u5b584\u4e2a\u5b57\u7b26 struct StringNode * next ; } StringNode , * String ;","title":"\u5806\u5206\u914d\uff1a"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_11","text":"\u4ee5\u9759\u6001\u5206\u914d\u7684\u987a\u5e8f\u4e32\u4e3a\u4e3b","title":"\u56db\u3001\u4e32\u7684\u4e0a\u7684\u64cd\u4f5c"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_12","text":"//\u6c42\u5b50\u4e32 bool SubString ( SString & Sub , SString S , int pos , int len ){ //\u5b50\u4e32\u8303\u56f4\u8d8a\u754c if ( pos + len -1 > S . length ) return false ; for ( int i = pos ; i < pos + len ; i ++ ){ Sub . ch [ i - pos + 1 ] = S . ch [ i ]; } Sub . length = len ; return true ; }","title":"\u6c42\u5b50\u4e32"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_13","text":"//\u5b57\u7b26\u4e32\u6bd4\u8f83\u64cd\u4f5c\u3002\u82e5S>T,\u5219\u8fd4\u56de\u503c>0;\u82e5S=T,\u5219\u8fd4\u56de\u503c=0;\u82e5S<T,\u5219\u8fd4\u56de\u503c<0\u3002 int StrCompare ( SString S , SString T ){ for ( int i = 1 ; i < S . length && T . length ; i ++ ){ if ( S . ch [ i ] != T . ch [ i ]) return S . ch [ i ] - T [ i ]; } //\u626b\u63cf\u8fc7\u6240\u6709\u5b57\u7b26\u90fd\u76f8\u7b49\uff0c\u5219\u957f\u5ea6\u66f4\u957f\u7684\u4e32\u66f4\u5927 return S . length - T . length ; }","title":"\u5b57\u7b26\u4e32\u6bd4\u8f83"},{"location":"03-%E4%B8%B2/4.2%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_14","text":"\u65b9\u6cd5\uff1a\u5728S\u4e2d\u4f9d\u6b21\u6309\u987a\u5e8f\u53d6m\u957f\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u4e0eT\u76f8\u540c //\u5b9a\u4f4d\u64cd\u4f5c int Index ( SString S , SString T ){ int i = 1 , n = StrLength ( S ), m = StrLength ( T ); SString sub ; while ( i < n - m + 1 ){ SubString ( sub , S , i , m ); if ( StrCompare ( sub , T ) != 0 ) ++ i ; else return i ; //\u8fd4\u56de\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u4f4d\u7f6e } return 0 ; //S\u4e2d\u4e0d\u5b58\u5728\u4e0eT\u76f8\u540c\u7684\u5b50\u4e32 }","title":"\u5b9a\u4f4d\u64cd\u4f5c"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/","text":"\u5b57\u7b26\u4e32\u6a21\u5f0f\u5339\u914d \u00b6 \u5b57\u7b26\u4e32\u6a21\u5f0f\u5339\u914d \uff1a\u5728 \u4e3b\u4e32 \u4e2d\u627e\u5230\u4e0e \u6a21\u5f0f\u4e32 \u76f8\u540c\u7684\u5b50\u4e32,\u5e76\u8fd4\u56de\u5176\u6240\u5728\u4f4d\u7f6e\u3002 \u5b50\u4e32 \uff1a\u4e00\u5b9a\u80fd\u5728\u4e3b\u4e32\u4e2d\u627e\u5230\u7684\u4e32 \u6a21\u5f0f\u4e32 \uff1a\u4e0d\u4e00\u5b9a\u80fd\u5728\u4e3b\u4e32\u4e2d\u627e\u5230\u7684\u4e32 \u65b9\u6cd5\uff1a \u6734\u7d20\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5 \u548c KMP\u7b97\u6cd5 \u4e00\u3001\u6734\u7d20\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5 \u00b6 1.\u7528\u4e32\u7684\u5b9a\u4f4d\u64cd\u4f5c\uff1a \u00b6 \u65b9\u6cd5\uff1a\u5728S\u4e2d\u4f9d\u6b21\u6309\u987a\u5e8f\u53d6m\u957f\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u4e0eT\u76f8\u540c //\u5b9a\u4f4d\u64cd\u4f5c int Index ( SString S , SString T ){ int i = 1 , n = StrLength ( S ), m = StrLength ( T ); SString sub ; while ( i < n - m + 1 ){ SubString ( sub , S , i , m ); if ( StrCompare ( sub , T ) != 0 ) ++ i ; else return i ; //\u8fd4\u56de\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u4f4d\u7f6e } return 0 ; //S\u4e2d\u4e0d\u5b58\u5728\u4e0eT\u76f8\u540c\u7684\u5b50\u4e32 } 2.\u53cc\u6307\u9488\u7b97\u6cd5 \u00b6 int Index ( SString S , SString T ){ int i = 1 , j = 1 ; while ( i <= S . length && j <= T . length ){ //\u8df3\u51fa\u5faa\u73af\u60c5\u51b5\uff1aj>T.length,\u5339\u914d\u6210\u529f if ( S . ch [ i ] == T . ch [ i ]){ //i>S.length,\u5339\u914d\u5931\u8d25 ++ i ; ++ j ; //\u7ee7\u7eed\u6bd4\u8f83\u540e\u9762\u7684\u5b57\u7b26 } else { //\u5339\u914d\u5931\u8d25\uff0c\u6307\u9488i\u3001j\u90fd\u540e\u9000\uff0c\u5339\u914d\u4e0b\u4e00\u4e2a i = i - j + 2 ; j = 1 ; } } if ( j > T . length ){ //j>T.length,\u5339\u914d\u6210\u529f return i - T . length ; } else { return 0 ; } } \u6734\u7d20\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u00b6 \u8bbe\u4e3b\u4e32\u957f\u5ea6\u4e3an\uff0c\u6a21\u5f0f\u4e32\u957f\u5ea6\u4e3am\uff0c\u5219 \u6700\u597d\u60c5\u51b5\uff1a\u6bcf\u6b21\u5339\u914d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u5339\u914d\u5931\u8d25\uff0c\u76f4\u5230\u6700\u540e\u624d\u5339\u914d\u6210\u529f\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u6700\u574f\u60c5\u51b5\uff1a\u5230\u6700\u540e\u4e5f\u6ca1\u627e\u5230\uff0c\u4e3b\u4e32\u79fb\u52a8n\u4e2a\u5143\u7d20\uff0c\u6a21\u5f0f\u4e32\u79fb\u52a8m\u4e2a\u5143\u7d20\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(mn) \u4e8c\u3001KMP\u7b97\u6cd5 \u00b6 \u7cbe\u9ad3\uff1a\u5229\u7528\u597d\u5df2\u7ecf\u5339\u914d\u8fc7\u7684\u6a21\u5f0f\u4e32\u4fe1\u606f\uff0c\u5efa\u7acb\u4e00\u4e2anext\u6570\u7ec4\uff0c\u8868\u793aj\u7684\u56de\u6eaf int Index ( SString S , SString T ){ int i = 1 , j = 1 ; while ( i <= S . length && j <= T . length ){ //\u8df3\u51fa\u5faa\u73af\u60c5\u51b5\uff1aj>T.length,\u5339\u914d\u6210\u529f if ( S . ch [ i ] == T . ch [ i ]){ //i>S.length,\u5339\u914d\u5931\u8d25 ++ i ; ++ j ; //\u7ee7\u7eed\u6bd4\u8f83\u540e\u9762\u7684\u5b57\u7b26 } else { //\u5339\u914d\u5931\u8d25\uff0c\u6307\u9488i\u4e0d\u53d8\uff0cj\u540e\u9000\uff0c\u5339\u914d\u4e0b\u4e00\u4e2a j = next [ j ]; } } if ( j > T . length ){ //j>T.length,\u5339\u914d\u6210\u529f return i - T . length ; } else { return 0 ; } } KMP\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u00b6 \u8bbe\u4e3b\u4e32\u957f\u5ea6\u4e3an\uff0c\u6a21\u5f0f\u4e32\u957f\u5ea6\u4e3am\uff0c\u5219 \u6700\u597d\u60c5\u51b5\uff1a\u6bcf\u6b21\u5339\u914d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u5339\u914d\u5931\u8d25\uff0c\u76f4\u5230\u6700\u540e\u624d\u5339\u914d\u6210\u529f\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u6700\u574f\u60c5\u51b5\uff1a\u5230\u6700\u540e\u4e5f\u6ca1\u627e\u5230\uff0c\u4e3b\u4e32\u79fb\u52a8n\u4e2a\u5143\u7d20\uff0c\u6a21\u5f0f\u4e32\u79fb\u52a8m\u4e2a\u5143\u7d20\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(m+n) next\u6570\u7ec4\u7684\u5efa\u7acb \u00b6 P[0 ~ k-1] == P[j-k ~ j-1] //next\u6570\u7ec4\u7684\u5efa\u7acb int getNext ( String ps ){ char [] p = ps . toCharArray (); int [] next = new int [ p . length ]; next [ 1 ] = 0 ; int j = 1 , k = 0 ; while ( j < p . length ){ if ( k == 0 || p [ j ] == p [ k ]) { next [ ++ j ] = ++ k ; } else { k = next [ k ]; } } }","title":"3.3\u5b57\u7b26\u4e32\u6a21\u5f0f\u5339\u914d"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/#_1","text":"\u5b57\u7b26\u4e32\u6a21\u5f0f\u5339\u914d \uff1a\u5728 \u4e3b\u4e32 \u4e2d\u627e\u5230\u4e0e \u6a21\u5f0f\u4e32 \u76f8\u540c\u7684\u5b50\u4e32,\u5e76\u8fd4\u56de\u5176\u6240\u5728\u4f4d\u7f6e\u3002 \u5b50\u4e32 \uff1a\u4e00\u5b9a\u80fd\u5728\u4e3b\u4e32\u4e2d\u627e\u5230\u7684\u4e32 \u6a21\u5f0f\u4e32 \uff1a\u4e0d\u4e00\u5b9a\u80fd\u5728\u4e3b\u4e32\u4e2d\u627e\u5230\u7684\u4e32 \u65b9\u6cd5\uff1a \u6734\u7d20\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5 \u548c KMP\u7b97\u6cd5","title":"\u5b57\u7b26\u4e32\u6a21\u5f0f\u5339\u914d"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/#_2","text":"","title":"\u4e00\u3001\u6734\u7d20\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/#1","text":"\u65b9\u6cd5\uff1a\u5728S\u4e2d\u4f9d\u6b21\u6309\u987a\u5e8f\u53d6m\u957f\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u4e0eT\u76f8\u540c //\u5b9a\u4f4d\u64cd\u4f5c int Index ( SString S , SString T ){ int i = 1 , n = StrLength ( S ), m = StrLength ( T ); SString sub ; while ( i < n - m + 1 ){ SubString ( sub , S , i , m ); if ( StrCompare ( sub , T ) != 0 ) ++ i ; else return i ; //\u8fd4\u56de\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u4f4d\u7f6e } return 0 ; //S\u4e2d\u4e0d\u5b58\u5728\u4e0eT\u76f8\u540c\u7684\u5b50\u4e32 }","title":"1.\u7528\u4e32\u7684\u5b9a\u4f4d\u64cd\u4f5c\uff1a"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/#2","text":"int Index ( SString S , SString T ){ int i = 1 , j = 1 ; while ( i <= S . length && j <= T . length ){ //\u8df3\u51fa\u5faa\u73af\u60c5\u51b5\uff1aj>T.length,\u5339\u914d\u6210\u529f if ( S . ch [ i ] == T . ch [ i ]){ //i>S.length,\u5339\u914d\u5931\u8d25 ++ i ; ++ j ; //\u7ee7\u7eed\u6bd4\u8f83\u540e\u9762\u7684\u5b57\u7b26 } else { //\u5339\u914d\u5931\u8d25\uff0c\u6307\u9488i\u3001j\u90fd\u540e\u9000\uff0c\u5339\u914d\u4e0b\u4e00\u4e2a i = i - j + 2 ; j = 1 ; } } if ( j > T . length ){ //j>T.length,\u5339\u914d\u6210\u529f return i - T . length ; } else { return 0 ; } }","title":"2.\u53cc\u6307\u9488\u7b97\u6cd5"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/#_3","text":"\u8bbe\u4e3b\u4e32\u957f\u5ea6\u4e3an\uff0c\u6a21\u5f0f\u4e32\u957f\u5ea6\u4e3am\uff0c\u5219 \u6700\u597d\u60c5\u51b5\uff1a\u6bcf\u6b21\u5339\u914d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u5339\u914d\u5931\u8d25\uff0c\u76f4\u5230\u6700\u540e\u624d\u5339\u914d\u6210\u529f\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u6700\u574f\u60c5\u51b5\uff1a\u5230\u6700\u540e\u4e5f\u6ca1\u627e\u5230\uff0c\u4e3b\u4e32\u79fb\u52a8n\u4e2a\u5143\u7d20\uff0c\u6a21\u5f0f\u4e32\u79fb\u52a8m\u4e2a\u5143\u7d20\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(mn)","title":"\u6734\u7d20\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/#kmp","text":"\u7cbe\u9ad3\uff1a\u5229\u7528\u597d\u5df2\u7ecf\u5339\u914d\u8fc7\u7684\u6a21\u5f0f\u4e32\u4fe1\u606f\uff0c\u5efa\u7acb\u4e00\u4e2anext\u6570\u7ec4\uff0c\u8868\u793aj\u7684\u56de\u6eaf int Index ( SString S , SString T ){ int i = 1 , j = 1 ; while ( i <= S . length && j <= T . length ){ //\u8df3\u51fa\u5faa\u73af\u60c5\u51b5\uff1aj>T.length,\u5339\u914d\u6210\u529f if ( S . ch [ i ] == T . ch [ i ]){ //i>S.length,\u5339\u914d\u5931\u8d25 ++ i ; ++ j ; //\u7ee7\u7eed\u6bd4\u8f83\u540e\u9762\u7684\u5b57\u7b26 } else { //\u5339\u914d\u5931\u8d25\uff0c\u6307\u9488i\u4e0d\u53d8\uff0cj\u540e\u9000\uff0c\u5339\u914d\u4e0b\u4e00\u4e2a j = next [ j ]; } } if ( j > T . length ){ //j>T.length,\u5339\u914d\u6210\u529f return i - T . length ; } else { return 0 ; } }","title":"\u4e8c\u3001KMP\u7b97\u6cd5"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/#kmp_1","text":"\u8bbe\u4e3b\u4e32\u957f\u5ea6\u4e3an\uff0c\u6a21\u5f0f\u4e32\u957f\u5ea6\u4e3am\uff0c\u5219 \u6700\u597d\u60c5\u51b5\uff1a\u6bcf\u6b21\u5339\u914d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u5339\u914d\u5931\u8d25\uff0c\u76f4\u5230\u6700\u540e\u624d\u5339\u914d\u6210\u529f\uff0c\u5faa\u73afn\u6b21\uff0c \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6 =O(n) \u6700\u574f\u60c5\u51b5\uff1a\u5230\u6700\u540e\u4e5f\u6ca1\u627e\u5230\uff0c\u4e3b\u4e32\u79fb\u52a8n\u4e2a\u5143\u7d20\uff0c\u6a21\u5f0f\u4e32\u79fb\u52a8m\u4e2a\u5143\u7d20\uff0c \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 =O(m+n)","title":"KMP\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a"},{"location":"03-%E4%B8%B2/4.3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/#next","text":"P[0 ~ k-1] == P[j-k ~ j-1] //next\u6570\u7ec4\u7684\u5efa\u7acb int getNext ( String ps ){ char [] p = ps . toCharArray (); int [] next = new int [ p . length ]; next [ 1 ] = 0 ; int j = 1 , k = 0 ; while ( j < p . length ){ if ( k == 0 || p [ j ] == p [ k ]) { next [ ++ j ] = ++ k ; } else { k = next [ k ]; } } }","title":"next\u6570\u7ec4\u7684\u5efa\u7acb"},{"location":"04-%E6%A0%91/5.1%E6%A0%91/","text":"\u6811 \u2014\u2014 Tree \u00b6 \u4e00\u3001\u6811\u7684\u5b9a\u4e49\uff1a \u00b6 \u6811 \u662f\u03b7(n\u22650)\u4e2a\u7ed3\u70b9\u7684\u6709\u9650\u96c6\u5408,n\u2261o\u65f6,\u79f0\u4e3a\u7a7a\u6811,\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\u5728\u4efb\u610f\u4e00\u68f5\u975e\u7a7a\u6811\u4e2d\u5e94\u6ee1\u8db3: \u2460\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u79f0\u4e3a\u6839\u7684 \u7ed3\u70b9 \u3002 \u2461\u5f53n>1\u65f6,\u5176\u4f59\u7ed3\u70b9\u53ef\u5206\u4e3am(m>0)\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u6709\u9650\u96c6\u5408T1,T2\u2026,Tn,\u5176\u4e2d\u6bcf\u4e2a\u96c6\u5408\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u6811,\u5e76\u4e14\u79f0\u4e3a\u6839\u7ed3\u70b9\u7684 \u5b50\u6811 \u3002 \u4e8c\u3001\u6811\u7684\u672f\u8bed \u00b6 \u7236\u7ed3\u70b9 \uff1a\u82e5\u4e00\u4e2a\u7ed3\u70b9\u542b\u6709\u5b50\u7ed3\u70b9\uff0c\u5219\u8fd9\u4e2a\u7ed3\u70b9\u79f0\u4e3a\u5176\u5b50\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9 \u5b50\u7ed3\u70b9 \uff1a\u4e00\u4e2a\u7ed3\u70b9\u542b\u6709\u7684\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u79f0\u4e3a\u8be5\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9 \u5144\u5f1f\u7ed3\u70b9 \uff1a\u62e5\u6709\u5171\u540c\u7236\u7ed3\u70b9\u7684\u7ed3\u70b9\u4e92\u79f0\u4e3a\u5144\u5f1f\u7ed3\u70b9 \u7956\u5148 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u7ed3\u70b9x\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u662fx\u7684\u7956\u5148\uff08\u7ed3\u70b9x\u4e5f\u662f\u81ea\u5df1\u7684\u7956\u5148\uff09 \u540e\u4ee3 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u7ed3\u70b9x\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u662fx\u7684\u540e\u4ee3\uff08\u7ed3\u70b9x\u4e5f\u662f\u81ea\u5df1\u7684\u540e\u4ee3\uff09 \u4e24\u7ed3\u70b9\u7684\u8def\u5f84 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u7ed3\u70b9x\u5230\u7ed3\u70b9y\u7684 \u4ece\u4e0a\u5230\u4e0b \u7684\u8def \u4e24\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u7ed3\u70b9x\u5230\u7ed3\u70b9y\u7ecf\u8fc7\u7684\u8fb9\u6570 \u7ed3\u70b9\u7684\u5c42\u6b21 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u7ed3\u70b9x\u7684 \u4ece\u4e0a\u5230\u4e0b \u7ecf\u8fc7\u7684\u8fb9\u6570 \u7ed3\u70b9\u9ad8\u5ea6 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u53f6\u5b50\u7ed3\u70b9\u5230x\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u5c31\u662f\u7ed3\u70b9x\u7684 \u9ad8\u5ea6 \u6811\u7684\u6df1\u5ea6 \uff1a\u4e00\u68f5\u6811\u4e2d\u7ed3\u70b9\u7684\u6700\u5927\u6df1\u5ea6\u5c31\u662f\u6811\u7684\u6df1\u5ea6\uff0c\u4e5f\u79f0\u4e3a \u9ad8\u5ea6 \u7ed3\u70b9\u7684\u5ea6 \uff1a\u6709\u51e0\u4e2a\u5b50\u7ed3\u70b9\uff08\u5206\u652f\uff09 \u6811\u7684\u5ea6 \uff1a\u5404\u7ed3\u70b9\u7684\u5ea6\u7684\u6700\u5927\u503c \u53f6\u5b50\u7ed3\u70b9 \uff1a\u5ea6\u4e3a\u96f6\u7684\u7ed3\u70b9\u5c31\u662f\u53f6\u5b50\u7ed3\u70b9 \u68ee\u6797 \uff1am\u9897\u4e92\u4e0d\u76f8\u4ea4\u7684\u6811\u6784\u6210\u7684\u96c6\u5408\u5c31\u662f\u68ee\u6797 \u4e09\u3001\u6811\u7684\u5206\u7c7b \u00b6 \u6709\u5e8f\u6811\u548c\u65e0\u5e8f\u6811 \u6709\u5e8f\u6811 \u4e00\u4e00\u903b\u8f91\u4e0a\u770b\uff0c\u6811\u4e2d\u7ed3\u70b9\u7684\u5404\u5b50\u6811\u4ece\u5de6\u81f3\u53f3\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u4e0d\u80fd\u4e92\u6362 \u65e0\u5e8f\u6811 \u4e00\u4e00\u903b\u8f91\u4e0a\u770b\uff0c\u6811\u4e2d\u7ed3\u70b9\u7684\u5404\u5b50\u6811\u4ece\u5de6\u81f3\u53f3\u662f\u65e0\u6b21\u5e8f\u7684\uff0c\u53ef\u4ee5\u4e92\u6362 \u56db\u3001\u6811\u7684\u6027\u8d28 \u00b6 \u8003\u70b91\uff1a\u7ed3\u70b9\u6570=\u603b\u5ea6\u6570+1 \u8003\u70b92\uff1a\u5ea6\u4e3am\u7684\u6811\u548cm\u53c9\u6811 \u5ea6\u4e3am\u7684\u6811 \uff1a\u81f3\u5c11\u6709\u4e00\u4e2a\u7ed3\u70b9\u5ea6=m\uff0c\u4e00\u5b9a\u662f\u975e\u7a7a\u6811 m\u53c9\u6811 \uff1a\u5141\u8bb8\u6240\u6709\u7ed3\u70b9\u7684\u5ea6\u90fd\u2264m\uff0c\u53ef\u4ee5\u662f\u7a7a\u6811 \u8003\u70b93\uff1a\u5ea6\u4e3am\u7684\u6811\u7b2ci\u5c42\u81f3\u591a\u6709\u51e0\u4e2a\u7ed3\u70b9\uff1f \\( \\(m^{i-1}\\) \\) \u8003\u70b94\uff1a\u9ad8\u5ea6\u4e3ah\u7684m\u53c9\u6811\u81f3\u591a\u6709\u51e0\u4e2a\u7ed3\u70b9\uff1f \\( \\(\\frac{(m^{h}-1)}{(m-1)}\\) \\) \u8003\u70b95\uff1a \u9ad8\u5ea6\u4e3ah\u7684m\u53c9\u6811\u81f3\u5c11\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\uff1f \\( \\(h\\) \\) \u9ad8\u5ea6\u4e3ah\u3001\u5ea6\u4e3am\u7684\u6811\u81f3\u5c11\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\uff1f \\( \\(h+m-1\\) \\) \u8003\u70b96\uff1a\u5177\u6709n\u4e2a\u7ed3\u70b9\u7684m\u53c9\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6\u4e3a\uff1f \\( \\(log_m\\lceil (n(m-1)+1) \\rceil\\) \\)","title":"4.1\u6811"},{"location":"04-%E6%A0%91/5.1%E6%A0%91/#tree","text":"","title":"\u6811 \u2014\u2014 Tree"},{"location":"04-%E6%A0%91/5.1%E6%A0%91/#_1","text":"\u6811 \u662f\u03b7(n\u22650)\u4e2a\u7ed3\u70b9\u7684\u6709\u9650\u96c6\u5408,n\u2261o\u65f6,\u79f0\u4e3a\u7a7a\u6811,\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\u5728\u4efb\u610f\u4e00\u68f5\u975e\u7a7a\u6811\u4e2d\u5e94\u6ee1\u8db3: \u2460\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u79f0\u4e3a\u6839\u7684 \u7ed3\u70b9 \u3002 \u2461\u5f53n>1\u65f6,\u5176\u4f59\u7ed3\u70b9\u53ef\u5206\u4e3am(m>0)\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u6709\u9650\u96c6\u5408T1,T2\u2026,Tn,\u5176\u4e2d\u6bcf\u4e2a\u96c6\u5408\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u6811,\u5e76\u4e14\u79f0\u4e3a\u6839\u7ed3\u70b9\u7684 \u5b50\u6811 \u3002","title":"\u4e00\u3001\u6811\u7684\u5b9a\u4e49\uff1a"},{"location":"04-%E6%A0%91/5.1%E6%A0%91/#_2","text":"\u7236\u7ed3\u70b9 \uff1a\u82e5\u4e00\u4e2a\u7ed3\u70b9\u542b\u6709\u5b50\u7ed3\u70b9\uff0c\u5219\u8fd9\u4e2a\u7ed3\u70b9\u79f0\u4e3a\u5176\u5b50\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9 \u5b50\u7ed3\u70b9 \uff1a\u4e00\u4e2a\u7ed3\u70b9\u542b\u6709\u7684\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u79f0\u4e3a\u8be5\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9 \u5144\u5f1f\u7ed3\u70b9 \uff1a\u62e5\u6709\u5171\u540c\u7236\u7ed3\u70b9\u7684\u7ed3\u70b9\u4e92\u79f0\u4e3a\u5144\u5f1f\u7ed3\u70b9 \u7956\u5148 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u7ed3\u70b9x\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u662fx\u7684\u7956\u5148\uff08\u7ed3\u70b9x\u4e5f\u662f\u81ea\u5df1\u7684\u7956\u5148\uff09 \u540e\u4ee3 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u7ed3\u70b9x\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u662fx\u7684\u540e\u4ee3\uff08\u7ed3\u70b9x\u4e5f\u662f\u81ea\u5df1\u7684\u540e\u4ee3\uff09 \u4e24\u7ed3\u70b9\u7684\u8def\u5f84 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u7ed3\u70b9x\u5230\u7ed3\u70b9y\u7684 \u4ece\u4e0a\u5230\u4e0b \u7684\u8def \u4e24\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u7ed3\u70b9x\u5230\u7ed3\u70b9y\u7ecf\u8fc7\u7684\u8fb9\u6570 \u7ed3\u70b9\u7684\u5c42\u6b21 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u7ed3\u70b9x\u7684 \u4ece\u4e0a\u5230\u4e0b \u7ecf\u8fc7\u7684\u8fb9\u6570 \u7ed3\u70b9\u9ad8\u5ea6 \uff1a\u5bf9\u4efb\u610f\u7ed3\u70b9x\uff0c\u53f6\u5b50\u7ed3\u70b9\u5230x\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u5c31\u662f\u7ed3\u70b9x\u7684 \u9ad8\u5ea6 \u6811\u7684\u6df1\u5ea6 \uff1a\u4e00\u68f5\u6811\u4e2d\u7ed3\u70b9\u7684\u6700\u5927\u6df1\u5ea6\u5c31\u662f\u6811\u7684\u6df1\u5ea6\uff0c\u4e5f\u79f0\u4e3a \u9ad8\u5ea6 \u7ed3\u70b9\u7684\u5ea6 \uff1a\u6709\u51e0\u4e2a\u5b50\u7ed3\u70b9\uff08\u5206\u652f\uff09 \u6811\u7684\u5ea6 \uff1a\u5404\u7ed3\u70b9\u7684\u5ea6\u7684\u6700\u5927\u503c \u53f6\u5b50\u7ed3\u70b9 \uff1a\u5ea6\u4e3a\u96f6\u7684\u7ed3\u70b9\u5c31\u662f\u53f6\u5b50\u7ed3\u70b9 \u68ee\u6797 \uff1am\u9897\u4e92\u4e0d\u76f8\u4ea4\u7684\u6811\u6784\u6210\u7684\u96c6\u5408\u5c31\u662f\u68ee\u6797","title":"\u4e8c\u3001\u6811\u7684\u672f\u8bed"},{"location":"04-%E6%A0%91/5.1%E6%A0%91/#_3","text":"\u6709\u5e8f\u6811\u548c\u65e0\u5e8f\u6811 \u6709\u5e8f\u6811 \u4e00\u4e00\u903b\u8f91\u4e0a\u770b\uff0c\u6811\u4e2d\u7ed3\u70b9\u7684\u5404\u5b50\u6811\u4ece\u5de6\u81f3\u53f3\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u4e0d\u80fd\u4e92\u6362 \u65e0\u5e8f\u6811 \u4e00\u4e00\u903b\u8f91\u4e0a\u770b\uff0c\u6811\u4e2d\u7ed3\u70b9\u7684\u5404\u5b50\u6811\u4ece\u5de6\u81f3\u53f3\u662f\u65e0\u6b21\u5e8f\u7684\uff0c\u53ef\u4ee5\u4e92\u6362","title":"\u4e09\u3001\u6811\u7684\u5206\u7c7b"},{"location":"04-%E6%A0%91/5.1%E6%A0%91/#_4","text":"\u8003\u70b91\uff1a\u7ed3\u70b9\u6570=\u603b\u5ea6\u6570+1 \u8003\u70b92\uff1a\u5ea6\u4e3am\u7684\u6811\u548cm\u53c9\u6811 \u5ea6\u4e3am\u7684\u6811 \uff1a\u81f3\u5c11\u6709\u4e00\u4e2a\u7ed3\u70b9\u5ea6=m\uff0c\u4e00\u5b9a\u662f\u975e\u7a7a\u6811 m\u53c9\u6811 \uff1a\u5141\u8bb8\u6240\u6709\u7ed3\u70b9\u7684\u5ea6\u90fd\u2264m\uff0c\u53ef\u4ee5\u662f\u7a7a\u6811 \u8003\u70b93\uff1a\u5ea6\u4e3am\u7684\u6811\u7b2ci\u5c42\u81f3\u591a\u6709\u51e0\u4e2a\u7ed3\u70b9\uff1f \\( \\(m^{i-1}\\) \\) \u8003\u70b94\uff1a\u9ad8\u5ea6\u4e3ah\u7684m\u53c9\u6811\u81f3\u591a\u6709\u51e0\u4e2a\u7ed3\u70b9\uff1f \\( \\(\\frac{(m^{h}-1)}{(m-1)}\\) \\) \u8003\u70b95\uff1a \u9ad8\u5ea6\u4e3ah\u7684m\u53c9\u6811\u81f3\u5c11\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\uff1f \\( \\(h\\) \\) \u9ad8\u5ea6\u4e3ah\u3001\u5ea6\u4e3am\u7684\u6811\u81f3\u5c11\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\uff1f \\( \\(h+m-1\\) \\) \u8003\u70b96\uff1a\u5177\u6709n\u4e2a\u7ed3\u70b9\u7684m\u53c9\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6\u4e3a\uff1f \\( \\(log_m\\lceil (n(m-1)+1) \\rceil\\) \\)","title":"\u56db\u3001\u6811\u7684\u6027\u8d28"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u4e8c\u53c9\u6811 \u2014\u2014 Binary Tree \u00b6 \u4e00\u3001\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\uff1a \u00b6 \u4e8c\u53c9\u6811 \u662fn(n\u22650)\u4e2a\u7ed3\u70b9\u7684\u6709\u9650\u96c6\u5408 \u2460\u6216\u8005\u4e3a\u7a7a\u4e8c\u53c9\u6811\uff0c\u5373n=0\u3002 \u2461\u6216\u8005\u7531\u4e00\u4e2a\u6839\u7ed3\u70b9\u548c\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u88ab\u79f0\u4e3a\u6839\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7ec4\u6210\u3002\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u53c8\u5206\u522b\u662f\u4e00\u68f5\u4e8c\u53c9\u6811 \u7279\u70b9\uff1a\u2460\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u591a\u53ea\u6709\u4e24\u68f5\u5b50\u6811 \u2461\u5de6\u53f3\u5b50\u6811\u4e0d\u80fd\u98a0\u5012\uff08\u4e8c\u53c9\u6811\u662f\u6709\u5e8f\u6811\uff09 \u4e8c\u3001\u4e8c\u53c9\u6811\u7684\u4e94\u79cd\u72b6\u6001 \u00b6 \u4e09\u3001\u7279\u6b8a\u7684\u4e8c\u53c9\u6811 \u00b6 \u6ee1\u4e8c\u53c9\u6811 \uff1a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5982\u679c\u6bcf\u4e00\u4e2a\u5c42\u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5219\u8fd9\u4e2a\u4e8c\u53c9\u6811\u5c31\u662f\u6ee1\u4e8c\u53c9\u6811\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u5c42\u6570\u4e3aK\uff0c\u4e14\u7ed3\u70b9\u603b\u6570\u662f(2^k) -1 \uff0c\u5219\u5b83\u5c31\u662f\u6ee1\u4e8c\u53c9\u6811\u3002 \u7279\u70b9 \uff1a \u2460\u53ea\u6709\u6700\u540e\u4e00\u5c42\u6709\u53f6\u5b50\u7ed3\u70b9 \u2461\u4e0d\u5b58\u5728\u5ea6\u4e3a1\u7684\u7ed3\u70b9 \u2462\u6309\u5c42\u5e8f\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u7ed3\u70b9i\u7684\u5de6\u5b69\u5b50\u4e3a2i\uff0c\u53f3\u5b69\u5b50\u4e3a2+1\uff1b\u7ed3\u70b9i\u7684\u7236\u8282\u70b9\u4e3ai/2\u5411\u4e0b\u53d6\u6574\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09 \u5b8c\u5168\u4e8c\u53c9\u6811 \uff1a\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4e0e\u76f8\u540c\u9ad8\u5ea6\u7684\u6ee1\u4e8c\u53c9\u6811\u7684\u7f16\u53f7\u4e00\u4e00\u5bf9\u5e94 \u7279\u70b9\uff1a \u2460\u53ea\u6709\u6700\u540e\u4e24\u5c42\u53ef\u80fd\u6709\u53f6\u5b50\u7ed3\u70b9 \u2461\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5ea6\u4e3a1\u7684\u7ed3\u70b9 \u2462\u6309\u5c42\u5e8f\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u7ed3\u70b9i\u7684\u5de6\u5b69\u5b50\u4e3a2i\uff0c\u53f3\u5b69\u5b50\u4e3a2+1\uff1b\u7ed3\u70b9i\u7684\u7236\u8282\u70b9\u4e3ai/2\u5411\u4e0b\u53d6\u6574\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09 \u2463i \u2264 n/2\u5411\u4e0b\u53d6\u6574\u4e3a\u5206\u652f\u7ed3\u70b9\uff0ci \u2265 n/2\u5411\u4e0b\u53d6\u6574\u4e3a\u53f6\u5b50\u7ed3\u70b9 \u4e8c\u53c9\u6392\u5e8f\u6811 \uff1a\u4e00\u68f5\u4e8c\u53c9\u6811\u6216\u8005\u662f\u7a7a\u4e8c\u53c9\u6811\uff0c\u6216\u8005\u662f\u5177\u6709\u5982\u4e0b\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747\u5c0f\u4e8e\u6839\u7ed3\u70b9\u7684\u5173\u952e\u5b57\uff1b\u53f3\u5b50\u6811\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747\u5927\u4e8e\u6839\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u3002 \u5e73\u8861\u4e8c\u53c9\u6811 \uff1a\u6811\u4e0a\u4efb\u4e00\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u4e4b\u5dee\u4e0d\u8d85\u8fc71\u3002 \u56db\u3001\u4e8c\u53c9\u6811\u7684\u6027\u8d28 \u00b6 \u51e0\u4e2a\u91cd\u8981\u5e38\u8003\u7684\u57fa\u672c\u64cd\u4f5c\uff1a i\u7684\u5de6\u5b69\u5b50\u2014\u20142i i\u7684\u53f3\u5b69\u5b50\u2014\u20142i+1 i\u7684\u7236\u8282\u70b9\u2014\u2014i/2\u5411\u4e0b\u53d6\u6574 i\u6240\u5728\u7684\u5c42\u6b21 \u2014\u2014log2(n+1)\u5411\u4e0a\u53d6\u6574 \u6216 log2n\u5411\u4e0b\u53d6\u6574+1 \u82e5 \u5b8c\u5168\u4e8c\u53c9\u6811 \u4e2d\u5171\u6709n\u4e2a\u7ed3\u70b9\uff08\u975e\u5b8c\u5168\u4e8c\u53c9\u6811\u4e0d\u884c\uff09\uff0c\u5219 \u5224\u65adi\u662f\u5426\u6709\u5de6\u5b69\u5b50\uff1f\u2014\u20142i\u2264n\u5219\u6709 \u00b7\u5224\u65ad\u662f\u5426\u6709\u53f3\u5b69\u5b50\uff1f\u2014\u20142i+1<n\u5219\u6709 \u5224\u65adi\u662f\u5426\u662f\u53f6\u5b50/\u5206\u652f\u7ed3\u70b9\uff1f\u2014\u2014i>n/2\u5411\u4e0b\u53d6\u6574\u662f\u53f6\u5b50\u7ed3\u70b9\uff0ci<n/2\u5411\u4e0b\u53d6\u6574\u662f\u5206\u652f\u7ed3\u70b9 \u4e94\u3001\u5b58\u50a8\u7ed3\u6784 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8 \uff0c\u4e00\u822c\u7528\u94fe\u5f0f\u5b58\u50a8 \u516d\u3001\u4e8c\u53c9\u6811\u7684\u987a\u5e8f\u5b58\u50a8 \u00b6 \u53ea\u9002\u5408\u5b58\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u666e\u901a\u4e8c\u53c9\u6811\u4f1a\u6d6a\u8d39\u5f88\u591a\u7a7a\u95f4 \u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u63cf\u8ff0 \u00b6 #define MaxSize 10 struct TreeNode { Elemtype value ; //\u7ed3\u70b9\u4e2d\u7684\u6570\u636e\u5143\u7d20 bool isEmpty ; //\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a }; TreeNode t [ MaxSize ]; \u521d\u59cb\u5316 \u00b6 //\u521d\u59cb\u5316 bool initBTree ( TreeNode & t ){ for ( int i = 0 ; i < MaxSize ; i ++ ){ t [ i ]. isEmpty = true ; } } \u4e03\u3001\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff08\u4e8c\u53c9\u94fe\u8868\uff09 \u00b6 \u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u8868\u8ff0 \u00b6 typedef struct TreeNode { Elemtype data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BiTNode , * BiTree ; \u6ce8 \uff1an\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u94fe\u8868\u5171\u6709n+1\u4e2a\u7a7a\u94fe\u57df \u56e0\u4e3an\u4e2a\u7ed3\u70b9\uff0c\u6709n-1\u4e2a\u6709\u6307\u5411\uff1b2n\u4e2a\u6307\u9488\uff0c\u5219\u6307\u5411NULL\u7684\u4e2a\u6570=2n-(n-1)=n+1 \u521d\u59cb\u5316\uff08\u90e8\u5206\u4ee3\u7801\uff09 \u00b6 //\u6570\u636e\u57df struct Elemtype { int value ; }; //\u5b9a\u4e49\u4e00\u9897\u7a7a\u6811 BiTree root = NULL ; //\u63d2\u5165\u6839\u7ed3\u70b9 root = ( BiTree ) malloc ( sizeof ( BiTNode )); root -> data = { 1 }; root -> lchild = NULL ; root -> rchild = NULL ; //\u63d2\u5165\u65b0\u7ed3\u70b9 BiTNode * p = ( BiTNode * ) malloc ( sizeof ( BiTNode )); p -> data = { 2 }; p -> lchild = NULL ; p -> rchild = NULL ; root -> lchild = p ; //\u4f5c\u4e3a\u6839\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50 \u627e\u7ed3\u70b9p\u7684\u7236\u8282\u70b9\u5f88\u96be\uff0c\u89e3\u51b3\uff1a \u00b6 typedef struct TreeNode { Elemtype data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 struct BiTNode * parent ; //\u7236\u8282\u70b9\u6307\u9488 } BiTNode , * BiTree ; \u516b\u3001\u4e8c\u53c9\u6811\u7684\u904d\u5386 \u00b6 \u5148\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386 \u5148\u5e8f\u904d\u5386 \uff1a\u6839\u5de6\u53f3\uff08NLR\uff09 \u4e2d\u5e8f\u904d\u5386 \uff1a\u5de6\u6839\u53f3\uff08LNR\uff09 \u540e\u5e8f\u904d\u5386 \uff1a\u5de6\u53f3\u6839\uff08LRN\uff09 \u4ee3\u7801\uff1a\uff08\u7528\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09 \u00b6 \u5148\u5e8f\u904d\u5386\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4f1a\u88ab\u8def\u8fc73\u6b21\uff0c\u7b2c\u4e00\u6b21\u8def\u8fc7\u65f6\u8bbf\u95ee\u7ed3\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u5148\u5e8f\u904d\u5386 void PreOrder ( BiTree T ){ if ( T != NULL ){ visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 PreOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 PreOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } \u4e2d\u5e8f\u904d\u5386\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4f1a\u88ab\u8def\u8fc73\u6b21\uff0c\u7b2c\u4e8c\u6b21\u8def\u8fc7\u65f6\u8bbf\u95ee\u7ed3\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u4e2d\u5e8f\u904d\u5386 void InOrder ( BiTree T ){ if ( T != NULL ){ InOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 InOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } \u540e\u5e8f\u904d\u5386\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4f1a\u88ab\u8def\u8fc73\u6b21\uff0c\u7b2c\u4e09\u6b21\u8def\u8fc7\u65f6\u8bbf\u95ee\u7ed3\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u540e\u5e8f\u904d\u5386 void PostOrder ( BiTree T ){ if ( T != NULL ){ PostOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 PostOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 } } \u5e94\u7528\uff1a \u00b6 1.\u7b97\u6570\u8868\u8fbe\u5f0f\u7684 \u5206\u6790\u6811 \u5148\u5e8f\u904d\u5386 ->\u524d\u7f00\u8868\u8fbe\u5f0f \u4e2d\u5e8f\u904d\u5386 ->\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff08\u9700\u8981\u52a0\u754c\u9650\u7b26\uff09 \u540e\u5e8f\u904d\u5386 ->\u540e\u7f00\u8868\u8fbe\u5f0f 2.\u6c42\u6811\u7684\u6df1\u5ea6 //\u6c42\u6811\u7684\u6df1\u5ea6 void treeDepth ( BiTree T ){ if ( T != NULL ){ return 0 ; } else { int l = treeDepth ( T -> lchild ); //\u5de6\u5b50\u6811\u9ad8\u5ea6 int r = treeDepth ( T -> rchild ); //\u53f3\u5b50\u6811\u9ad8\u5ea6 //\u6811\u7684\u6df1\u5ea6=Max\uff08\u5de6\u5b50\u6811\u6df1\u5ea6\uff0c\u53f3\u5b50\u6811\u6df1\u5ea6\uff09+1 return l > r ? l + 1 : r + 1 ; } } \u4e5d\u3001\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\uff08\u5c42\u5e8f\u904d\u5386\uff09 \u00b6 \u7b97\u6cd5\u601d\u60f3\uff1a \u2460\u521d\u59cb\u5316\u4e00\u4e2a\u8f85\u52a9\u961f\u5217\uff08\u94fe\u961f\u5217\uff09 \u2461\u6839\u7ed3\u70b9\u5165\u961f \u2462\u82e5\u961f\u5217\u975e\u7a7a\uff0c\u5219\u961f\u5934\u7ed3\u70b9\u51fa\u961f\uff0c\u8bbf\u95ee\u8be5\u7ed3\u70b9\u5e76\u5c06\u5176\u5de6\u3001\u53f3\u5b69\u5b50\u63d2\u5165\u961f\u5c3e(\u5982\u679c\u6709\u7684\u8bdd) \u2463\u91cd\u590d\u2462\u76f4\u81f3\u961f\u5217\u4e3a\u7a7a \u94fe\u961f\u5217 \u00b6 //\u7c7b\u578b\u63cf\u8ff0 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b ElemType data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode ; typedef struct { LNode * front , * rear ; } LinkQueue ; \u4ee3\u7801\uff1a\uff08\u7528\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09 \u00b6 //\u5c42\u6b21\u904d\u5386 void LevelOrder ( BiTree T ){ LinkQueue Q ; InitQueue ( Q ); BiTree p ; //T\u4e3a\u6839\u7ed3\u70b9\uff0cp\u4e5f\u662f\u6839\u7ed3\u70b9\uff0c\u4fdd\u8bc1\u6839\u51fa\u961f\u540e\u53ef\u4ee5\u6307\u5411\u5b69\u5b50\uff0c\u56e0\u4e3aT\u51fa\u961f\u540e\uff0cT->lchild\u65e0\u6548 EnQueue ( Q , T ); //\u6839\u7ed3\u70b9\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , T ); //\u6839\u7ed3\u70b9\u51fa\u961f if ( p -> lchild != NULL ) EnQueue ( Q , p -> lchild ); //\u5de6\u7ed3\u70b9\u5165\u961f if ( p -> rchild != NULL ) EnQueue ( Q , p -> rchild ); //\u53f3\u7ed3\u70b9\u5165\u961f } } \u5341\u3001\u7531\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u00b6 1.\u524d\u5e8f+\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217 2.\u540e\u5e8f+\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217 3.\u5c42\u5e8f+\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217 \u5173\u952e\u662f\u6709\u975e\u4e2d\u5e8f\u786e\u5b9a\u6839\u7ed3\u70b9\u662f\u8c01\uff0c\u518d\u5c06\u6839\u7ed3\u70b9\u4ee3\u5165\u4e2d\u5e8f\u5f97\u5de6\u53f3\u5b50\u6811\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002","title":"4.2\u4e8c\u53c9\u6811"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#binary-tree","text":"","title":"\u4e8c\u53c9\u6811 \u2014\u2014 Binary Tree"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"\u4e8c\u53c9\u6811 \u662fn(n\u22650)\u4e2a\u7ed3\u70b9\u7684\u6709\u9650\u96c6\u5408 \u2460\u6216\u8005\u4e3a\u7a7a\u4e8c\u53c9\u6811\uff0c\u5373n=0\u3002 \u2461\u6216\u8005\u7531\u4e00\u4e2a\u6839\u7ed3\u70b9\u548c\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u88ab\u79f0\u4e3a\u6839\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7ec4\u6210\u3002\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u53c8\u5206\u522b\u662f\u4e00\u68f5\u4e8c\u53c9\u6811 \u7279\u70b9\uff1a\u2460\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u591a\u53ea\u6709\u4e24\u68f5\u5b50\u6811 \u2461\u5de6\u53f3\u5b50\u6811\u4e0d\u80fd\u98a0\u5012\uff08\u4e8c\u53c9\u6811\u662f\u6709\u5e8f\u6811\uff09","title":"\u4e00\u3001\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\uff1a"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","text":"","title":"\u4e8c\u3001\u4e8c\u53c9\u6811\u7684\u4e94\u79cd\u72b6\u6001"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","text":"\u6ee1\u4e8c\u53c9\u6811 \uff1a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5982\u679c\u6bcf\u4e00\u4e2a\u5c42\u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5219\u8fd9\u4e2a\u4e8c\u53c9\u6811\u5c31\u662f\u6ee1\u4e8c\u53c9\u6811\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u5c42\u6570\u4e3aK\uff0c\u4e14\u7ed3\u70b9\u603b\u6570\u662f(2^k) -1 \uff0c\u5219\u5b83\u5c31\u662f\u6ee1\u4e8c\u53c9\u6811\u3002 \u7279\u70b9 \uff1a \u2460\u53ea\u6709\u6700\u540e\u4e00\u5c42\u6709\u53f6\u5b50\u7ed3\u70b9 \u2461\u4e0d\u5b58\u5728\u5ea6\u4e3a1\u7684\u7ed3\u70b9 \u2462\u6309\u5c42\u5e8f\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u7ed3\u70b9i\u7684\u5de6\u5b69\u5b50\u4e3a2i\uff0c\u53f3\u5b69\u5b50\u4e3a2+1\uff1b\u7ed3\u70b9i\u7684\u7236\u8282\u70b9\u4e3ai/2\u5411\u4e0b\u53d6\u6574\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09 \u5b8c\u5168\u4e8c\u53c9\u6811 \uff1a\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4e0e\u76f8\u540c\u9ad8\u5ea6\u7684\u6ee1\u4e8c\u53c9\u6811\u7684\u7f16\u53f7\u4e00\u4e00\u5bf9\u5e94 \u7279\u70b9\uff1a \u2460\u53ea\u6709\u6700\u540e\u4e24\u5c42\u53ef\u80fd\u6709\u53f6\u5b50\u7ed3\u70b9 \u2461\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5ea6\u4e3a1\u7684\u7ed3\u70b9 \u2462\u6309\u5c42\u5e8f\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u7ed3\u70b9i\u7684\u5de6\u5b69\u5b50\u4e3a2i\uff0c\u53f3\u5b69\u5b50\u4e3a2+1\uff1b\u7ed3\u70b9i\u7684\u7236\u8282\u70b9\u4e3ai/2\u5411\u4e0b\u53d6\u6574\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09 \u2463i \u2264 n/2\u5411\u4e0b\u53d6\u6574\u4e3a\u5206\u652f\u7ed3\u70b9\uff0ci \u2265 n/2\u5411\u4e0b\u53d6\u6574\u4e3a\u53f6\u5b50\u7ed3\u70b9 \u4e8c\u53c9\u6392\u5e8f\u6811 \uff1a\u4e00\u68f5\u4e8c\u53c9\u6811\u6216\u8005\u662f\u7a7a\u4e8c\u53c9\u6811\uff0c\u6216\u8005\u662f\u5177\u6709\u5982\u4e0b\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747\u5c0f\u4e8e\u6839\u7ed3\u70b9\u7684\u5173\u952e\u5b57\uff1b\u53f3\u5b50\u6811\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747\u5927\u4e8e\u6839\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u3002 \u5e73\u8861\u4e8c\u53c9\u6811 \uff1a\u6811\u4e0a\u4efb\u4e00\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u4e4b\u5dee\u4e0d\u8d85\u8fc71\u3002","title":"\u4e09\u3001\u7279\u6b8a\u7684\u4e8c\u53c9\u6811"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","text":"\u51e0\u4e2a\u91cd\u8981\u5e38\u8003\u7684\u57fa\u672c\u64cd\u4f5c\uff1a i\u7684\u5de6\u5b69\u5b50\u2014\u20142i i\u7684\u53f3\u5b69\u5b50\u2014\u20142i+1 i\u7684\u7236\u8282\u70b9\u2014\u2014i/2\u5411\u4e0b\u53d6\u6574 i\u6240\u5728\u7684\u5c42\u6b21 \u2014\u2014log2(n+1)\u5411\u4e0a\u53d6\u6574 \u6216 log2n\u5411\u4e0b\u53d6\u6574+1 \u82e5 \u5b8c\u5168\u4e8c\u53c9\u6811 \u4e2d\u5171\u6709n\u4e2a\u7ed3\u70b9\uff08\u975e\u5b8c\u5168\u4e8c\u53c9\u6811\u4e0d\u884c\uff09\uff0c\u5219 \u5224\u65adi\u662f\u5426\u6709\u5de6\u5b69\u5b50\uff1f\u2014\u20142i\u2264n\u5219\u6709 \u00b7\u5224\u65ad\u662f\u5426\u6709\u53f3\u5b69\u5b50\uff1f\u2014\u20142i+1<n\u5219\u6709 \u5224\u65adi\u662f\u5426\u662f\u53f6\u5b50/\u5206\u652f\u7ed3\u70b9\uff1f\u2014\u2014i>n/2\u5411\u4e0b\u53d6\u6574\u662f\u53f6\u5b50\u7ed3\u70b9\uff0ci<n/2\u5411\u4e0b\u53d6\u6574\u662f\u5206\u652f\u7ed3\u70b9","title":"\u56db\u3001\u4e8c\u53c9\u6811\u7684\u6027\u8d28"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","text":"\u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8 \uff0c\u4e00\u822c\u7528\u94fe\u5f0f\u5b58\u50a8","title":"\u4e94\u3001\u5b58\u50a8\u7ed3\u6784"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_6","text":"\u53ea\u9002\u5408\u5b58\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u666e\u901a\u4e8c\u53c9\u6811\u4f1a\u6d6a\u8d39\u5f88\u591a\u7a7a\u95f4","title":"\u516d\u3001\u4e8c\u53c9\u6811\u7684\u987a\u5e8f\u5b58\u50a8"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_7","text":"#define MaxSize 10 struct TreeNode { Elemtype value ; //\u7ed3\u70b9\u4e2d\u7684\u6570\u636e\u5143\u7d20 bool isEmpty ; //\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a }; TreeNode t [ MaxSize ];","title":"\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u63cf\u8ff0"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_8","text":"//\u521d\u59cb\u5316 bool initBTree ( TreeNode & t ){ for ( int i = 0 ; i < MaxSize ; i ++ ){ t [ i ]. isEmpty = true ; } }","title":"\u521d\u59cb\u5316"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_9","text":"","title":"\u4e03\u3001\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff08\u4e8c\u53c9\u94fe\u8868\uff09"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_10","text":"typedef struct TreeNode { Elemtype data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BiTNode , * BiTree ; \u6ce8 \uff1an\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u94fe\u8868\u5171\u6709n+1\u4e2a\u7a7a\u94fe\u57df \u56e0\u4e3an\u4e2a\u7ed3\u70b9\uff0c\u6709n-1\u4e2a\u6709\u6307\u5411\uff1b2n\u4e2a\u6307\u9488\uff0c\u5219\u6307\u5411NULL\u7684\u4e2a\u6570=2n-(n-1)=n+1","title":"\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u8868\u8ff0"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_11","text":"//\u6570\u636e\u57df struct Elemtype { int value ; }; //\u5b9a\u4e49\u4e00\u9897\u7a7a\u6811 BiTree root = NULL ; //\u63d2\u5165\u6839\u7ed3\u70b9 root = ( BiTree ) malloc ( sizeof ( BiTNode )); root -> data = { 1 }; root -> lchild = NULL ; root -> rchild = NULL ; //\u63d2\u5165\u65b0\u7ed3\u70b9 BiTNode * p = ( BiTNode * ) malloc ( sizeof ( BiTNode )); p -> data = { 2 }; p -> lchild = NULL ; p -> rchild = NULL ; root -> lchild = p ; //\u4f5c\u4e3a\u6839\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50","title":"\u521d\u59cb\u5316\uff08\u90e8\u5206\u4ee3\u7801\uff09"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#p","text":"typedef struct TreeNode { Elemtype data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 struct BiTNode * parent ; //\u7236\u8282\u70b9\u6307\u9488 } BiTNode , * BiTree ;","title":"\u627e\u7ed3\u70b9p\u7684\u7236\u8282\u70b9\u5f88\u96be\uff0c\u89e3\u51b3\uff1a"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_12","text":"\u5148\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386 \u5148\u5e8f\u904d\u5386 \uff1a\u6839\u5de6\u53f3\uff08NLR\uff09 \u4e2d\u5e8f\u904d\u5386 \uff1a\u5de6\u6839\u53f3\uff08LNR\uff09 \u540e\u5e8f\u904d\u5386 \uff1a\u5de6\u53f3\u6839\uff08LRN\uff09","title":"\u516b\u3001\u4e8c\u53c9\u6811\u7684\u904d\u5386"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_13","text":"\u5148\u5e8f\u904d\u5386\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4f1a\u88ab\u8def\u8fc73\u6b21\uff0c\u7b2c\u4e00\u6b21\u8def\u8fc7\u65f6\u8bbf\u95ee\u7ed3\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u5148\u5e8f\u904d\u5386 void PreOrder ( BiTree T ){ if ( T != NULL ){ visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 PreOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 PreOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } \u4e2d\u5e8f\u904d\u5386\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4f1a\u88ab\u8def\u8fc73\u6b21\uff0c\u7b2c\u4e8c\u6b21\u8def\u8fc7\u65f6\u8bbf\u95ee\u7ed3\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u4e2d\u5e8f\u904d\u5386 void InOrder ( BiTree T ){ if ( T != NULL ){ InOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 InOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } \u540e\u5e8f\u904d\u5386\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4f1a\u88ab\u8def\u8fc73\u6b21\uff0c\u7b2c\u4e09\u6b21\u8def\u8fc7\u65f6\u8bbf\u95ee\u7ed3\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u540e\u5e8f\u904d\u5386 void PostOrder ( BiTree T ){ if ( T != NULL ){ PostOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 PostOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 } }","title":"\u4ee3\u7801\uff1a\uff08\u7528\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_14","text":"1.\u7b97\u6570\u8868\u8fbe\u5f0f\u7684 \u5206\u6790\u6811 \u5148\u5e8f\u904d\u5386 ->\u524d\u7f00\u8868\u8fbe\u5f0f \u4e2d\u5e8f\u904d\u5386 ->\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff08\u9700\u8981\u52a0\u754c\u9650\u7b26\uff09 \u540e\u5e8f\u904d\u5386 ->\u540e\u7f00\u8868\u8fbe\u5f0f 2.\u6c42\u6811\u7684\u6df1\u5ea6 //\u6c42\u6811\u7684\u6df1\u5ea6 void treeDepth ( BiTree T ){ if ( T != NULL ){ return 0 ; } else { int l = treeDepth ( T -> lchild ); //\u5de6\u5b50\u6811\u9ad8\u5ea6 int r = treeDepth ( T -> rchild ); //\u53f3\u5b50\u6811\u9ad8\u5ea6 //\u6811\u7684\u6df1\u5ea6=Max\uff08\u5de6\u5b50\u6811\u6df1\u5ea6\uff0c\u53f3\u5b50\u6811\u6df1\u5ea6\uff09+1 return l > r ? l + 1 : r + 1 ; } }","title":"\u5e94\u7528\uff1a"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_15","text":"\u7b97\u6cd5\u601d\u60f3\uff1a \u2460\u521d\u59cb\u5316\u4e00\u4e2a\u8f85\u52a9\u961f\u5217\uff08\u94fe\u961f\u5217\uff09 \u2461\u6839\u7ed3\u70b9\u5165\u961f \u2462\u82e5\u961f\u5217\u975e\u7a7a\uff0c\u5219\u961f\u5934\u7ed3\u70b9\u51fa\u961f\uff0c\u8bbf\u95ee\u8be5\u7ed3\u70b9\u5e76\u5c06\u5176\u5de6\u3001\u53f3\u5b69\u5b50\u63d2\u5165\u961f\u5c3e(\u5982\u679c\u6709\u7684\u8bdd) \u2463\u91cd\u590d\u2462\u76f4\u81f3\u961f\u5217\u4e3a\u7a7a","title":"\u4e5d\u3001\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\uff08\u5c42\u5e8f\u904d\u5386\uff09"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_16","text":"//\u7c7b\u578b\u63cf\u8ff0 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b ElemType data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode ; typedef struct { LNode * front , * rear ; } LinkQueue ;","title":"\u94fe\u961f\u5217"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_17","text":"//\u5c42\u6b21\u904d\u5386 void LevelOrder ( BiTree T ){ LinkQueue Q ; InitQueue ( Q ); BiTree p ; //T\u4e3a\u6839\u7ed3\u70b9\uff0cp\u4e5f\u662f\u6839\u7ed3\u70b9\uff0c\u4fdd\u8bc1\u6839\u51fa\u961f\u540e\u53ef\u4ee5\u6307\u5411\u5b69\u5b50\uff0c\u56e0\u4e3aT\u51fa\u961f\u540e\uff0cT->lchild\u65e0\u6548 EnQueue ( Q , T ); //\u6839\u7ed3\u70b9\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , T ); //\u6839\u7ed3\u70b9\u51fa\u961f if ( p -> lchild != NULL ) EnQueue ( Q , p -> lchild ); //\u5de6\u7ed3\u70b9\u5165\u961f if ( p -> rchild != NULL ) EnQueue ( Q , p -> rchild ); //\u53f3\u7ed3\u70b9\u5165\u961f } }","title":"\u4ee3\u7801\uff1a\uff08\u7528\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09"},{"location":"04-%E6%A0%91/5.2%E4%BA%8C%E5%8F%89%E6%A0%91/#_18","text":"1.\u524d\u5e8f+\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217 2.\u540e\u5e8f+\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217 3.\u5c42\u5e8f+\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217 \u5173\u952e\u662f\u6709\u975e\u4e2d\u5e8f\u786e\u5b9a\u6839\u7ed3\u70b9\u662f\u8c01\uff0c\u518d\u5c06\u6839\u7ed3\u70b9\u4ee3\u5165\u4e2d\u5e8f\u5f97\u5de6\u53f3\u5b50\u6811\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002","title":"\u5341\u3001\u7531\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u7ebf\u7d22\u4e8c\u53c9\u6811\u2014\u2014Threaded Binary Tree \u00b6 \u4e00\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811\u5b9a\u4e49 \u00b6 \u80cc\u666f\uff1a\u4e3a\u89e3\u51b3\u904d\u5386\u53ea\u80fd\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u666e\u901a\u4e8c\u53c9\u6811\u627e\u524d\u9a71\u548c\u540e\u7ee7\u5f88\u9ebb\u70e6 \u7ebf\u7d22\u4e8c\u53c9\u6811 \u5728\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u4e0a\u52a0\u4e0a \u7ebf\u7d22 \u7684\u4e8c\u53c9\u6811\u3002 \u4e8c\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u7531\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\u6539\u8fdb\u800c\u6765 \u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u8868\u8ff0 \u00b6 typedef struct TreeNode { Elemtype data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BiTNode , * BiTree ; \u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u8868\u8ff0 \u00b6 typedef struct TreeNode { Elemtype data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 int ltag , rtag ; //\u5de6\u3001\u53f3\u7ebf\u7d22\u6807\u5fd7 } ThreadNode , * ThreadTree ; tag==0 \uff1a\u8868\u793a\u6307\u9488\u6307\u5411 \u5b69\u5b50 tag==1 \uff1a\u8868\u793a\u6307\u9488\u6307\u5411 \u7ebf\u7d22 \u4e09\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u5206\u7c7b \u00b6 \u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u3001 \u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u3001 \u540e\u7eed\u7ebf\u7d22\u4e8c\u53c9\u6811 \u56db\u3001\u4e8c\u53c9\u6811\u7ebf\u7d22\u5316 \u00b6 \u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c\u7ebf\u7d22\u5316 \uff1a\u5bf9\u4e8c\u53c9\u6811\u4ee5\u67d0\u79cd\u904d\u5386\u65b9\u5f0f\uff08\u5982\u5148\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u6216\u5c42\u6b21\u7b49\uff09\u8fdb\u884c\u904d\u5386\uff0c\u4f7f\u5176\u53d8\u4e3a\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u8fc7\u7a0b\u3002 \u4e2d\u5e8f\u7ebf\u7d22\u5316 \u00b6 //\u5168\u5c40\u53d8\u91cfpre\uff0c\u6307\u5411\u5f53\u524d\u8bbf\u95ee\u7ed3\u70b9\u7684\u524d\u9a71 ThreadNode * pre = NULL ; //\u4e2d\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811T(\u4e09\u79cd\u4e00\u6837\uff0c\u53ea\u662f\u8c03\u7528\u7ebf\u7d22\u5316\u51fd\u6570\u4e0d\u540c) void CreateThread ( ThreadTree T ){ pre = NULL ; //pre\u521d\u59cb\u4e3aNULL if ( T != NULL ){ //\u975e\u7a7a\u4e8c\u53c9\u6811\u624d\u80fd\u7ebf\u7d22\u5316 InTread ( T ); //\u4e2d\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811 if ( pre -> rchild == NULL ){ pre -> rtag = 1 ; //\u5904\u7406\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 } } } //\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u4e00\u8fb9\u904d\u5386\uff0c\u4e00\u8fb9\u7ebf\u7d22\u5316 void InOrder ( ThreadTree T ){ if ( T != NULL ){ InOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 InOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } //\u8bbf\u95ee\u7ed3\u70b9\uff0c\u987a\u4fbf\u7ebf\u7d22\u5316\uff08\u4e09\u79cd\u4e00\u6837\uff09 void visit ( TheadNode * q ){ if ( q -> lchild == NULL ){ //\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5efa\u7acb\u524d\u9a71\u7ebf\u7d22 q -> lchild = pre ; q -> ltag = 1 ; } if ( pre != NULL && pre -> rchild == NULL ){ pre -> rchild = q ; //\u5efa\u7acb\u524d\u9a71\u7ed3\u70b9\u7684\u540e\u7ee7\u7ebf\u7d22 pre -> rtage = 1 ; } pre = q ; } \u5148\u5e8f\u7ebf\u7d22\u5316 \u00b6 //\u5168\u5c40\u53d8\u91cfpre\uff0c\u6307\u5411\u5f53\u524d\u8bbf\u95ee\u7ed3\u70b9\u7684\u524d\u9a71 ThreadNode * pre = NULL ; //\u5148\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811T(\u4e09\u79cd\u4e00\u6837\uff0c\u53ea\u662f\u8c03\u7528\u7ebf\u7d22\u5316\u51fd\u6570\u4e0d\u540c) void CreateThread ( ThreadTree T ){ pre = NULL ; //pre\u521d\u59cb\u4e3aNULL if ( T != NULL ){ //\u975e\u7a7a\u4e8c\u53c9\u6811\u624d\u80fd\u7ebf\u7d22\u5316 PreTread ( T ); //\u5148\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811 if ( pre -> rchild == NULL ){ pre -> rtag = 1 ; //\u5904\u7406\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 } } } //\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u4e00\u8fb9\u904d\u5386\uff0c\u4e00\u8fb9\u7ebf\u7d22\u5316 void PreOrder ( ThreadTree T ){ if ( T != NULL ){ visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 if ( T -> ltag == 0 ) //lchild\u4e0d\u662f\u524d\u9a71\u7ebf\u7d22\uff0c\u662f\u7ebf\u7d22\u8fd8\u904d\u5386\u5219\u65e0\u9650\u5faa\u73af InOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 InOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } //\u8bbf\u95ee\u7ed3\u70b9\uff0c\u987a\u4fbf\u7ebf\u7d22\u5316\uff08\u4e09\u79cd\u4e00\u6837\uff09 void visit ( TheadNode * q ){ if ( q -> lchild == NULL ){ //\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5efa\u7acb\u524d\u9a71\u7ebf\u7d22 q -> lchild = pre ; q -> ltag = 1 ; } if ( pre != NULL && pre -> rchild == NULL ){ pre -> rchild = q ; //\u5efa\u7acb\u524d\u9a71\u7ed3\u70b9\u7684\u540e\u7ee7\u7ebf\u7d22 pre -> rtage = 1 ; } pre = q ; } \u540e\u7eed\u7ebf\u7d22\u5316 \u00b6 //\u5168\u5c40\u53d8\u91cfpre\uff0c\u6307\u5411\u5f53\u524d\u8bbf\u95ee\u7ed3\u70b9\u7684\u524d\u9a71 ThreadNode * pre = NULL ; //\u540e\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811T(\u4e09\u79cd\u4e00\u6837\uff0c\u53ea\u662f\u8c03\u7528\u7ebf\u7d22\u5316\u51fd\u6570\u4e0d\u540c) void CreateThread ( ThreadTree T ){ pre = NULL ; //pre\u521d\u59cb\u4e3aNULL if ( T != NULL ){ //\u975e\u7a7a\u4e8c\u53c9\u6811\u624d\u80fd\u7ebf\u7d22\u5316 PostTread ( T ); //\u540e\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811 if ( pre -> rchild == NULL ){ pre -> rtag = 1 ; //\u5904\u7406\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 } } } //\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u4e00\u8fb9\u904d\u5386\uff0c\u4e00\u8fb9\u7ebf\u7d22\u5316 void PostOrder ( ThreadTree T ){ if ( T != NULL ){ InOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 InOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 } } //\u8bbf\u95ee\u7ed3\u70b9\uff0c\u987a\u4fbf\u7ebf\u7d22\u5316\uff08\u4e09\u79cd\u4e00\u6837\uff09 void visit ( TheadNode * q ){ if ( q -> lchild == NULL ){ //\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5efa\u7acb\u524d\u9a71\u7ebf\u7d22 q -> lchild = pre ; q -> ltag = 1 ; } if ( pre != NULL && pre -> rchild == NULL ){ pre -> rchild = q ; //\u5efa\u7acb\u524d\u9a71\u7ed3\u70b9\u7684\u540e\u7ee7\u7ebf\u7d22 pre -> rtage = 1 ; } pre = q ; } \u4e94\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u524d\u9a71\u548c\u540e\u7ee7 \u00b6 1.1\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u4e2d\u5e8f\u540e\u7ee7 \u00b6 \u5728 \u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u4e2d\u5e8f\u540e\u7ee7next \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219next\u4e3a\u540e\u7ee7\u7ebf\u7d22\uff0c\u5373 next = p->rchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219p\u5fc5\u6709\u53f3\u5b69\u5b50\uff0c next\u4e3ap\u7684\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u4e0b\u7ed3\u70b9 \u3002 //\u627e\u5230\u4ee5P\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u88ab\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u70b9 ThreadNode * Firstnode ( ThreadNode * p ){ //\u5faa\u73af\u627e\u5230\u6700\u5de6\u4e0b\u7ed3\u70b9(\u4e0d\u4e00\u5b9a\u662f\u53f6\u5b50\u7ed3\u70b9) while ( p -> ltag == 0 ) p = p -> lchild ; return p ; } //\u5728\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u4e2d\u627e\u5230\u7ed3\u70b9p\u7684\u540e\u7ee7\u7ed3\u70b9 TheadNode * Nextnode ( ThreadNode * p ){ //\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u4e0b\u7ed3\u70b9 if ( p -> rtag == 0 ) return Fistnode ( p -> rchild ); else return p -> rchild ; //rtag=1\u76f4\u63a5\u8fd4\u56de\u540e\u7ee7\u7ebf\u7d22 } \u5e94\u7528\uff1a\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 =O(1) //\u5bf9\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c8\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff08\u5229\u7528\u7ebf\u7d22\u5b9e\u73b0\u7684\u975e\u9012\u7b97\u6cd5\uff09 void Inorder ( ThreadNode * T ){ for ( ThreadNode * p = Firstnode ( T ); p != NULL ; p = Nextnode ( p )) visit ( p ); } 1.2\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u4e2d\u5e8f\u524d\u9a71 \u00b6 \u5728 \u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u4e2d\u5e8f\u524d\u9a71pre \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219pre\u4e3a\u524d\u9a71\u7ebf\u7d22\uff0c\u5373 pre = p->lchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219p\u5fc5\u6709\u5de6\u5b69\u5b50\uff0c pre\u4e3ap\u7684\u5de6\u5b50\u6811\u4e2d\u6700\u53f3\u4e0b\u7ed3\u70b9 \u3002 //\u627e\u5230\u4ee5P\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u540e\u4e00\u4e2a\u88ab\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u70b9 ThreadNode * Lastnode ( ThreadNode * p ){ //\u5faa\u73af\u627e\u5230\u6700\u53f3\u4e0b\u7ed3\u70b9(\u4e0d\u4e00\u5b9a\u662f\u53f6\u5b50\u7ed3\u70b9) while ( p -> rtag == 0 ) p = p -> rchild ; return p ; } //\u5728\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u4e2d\u627e\u5230\u7ed3\u70b9p\u7684\u524d\u9a71\u7ed3\u70b9 TheadNode * Prenode ( ThreadNode * p ){ //\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u4e0b\u7ed3\u70b9 if ( p -> rtag == 0 ) return Lastnode ( p -> lchild ); else return p -> lchild ; //rtag=1\u76f4\u63a5\u8fd4\u56de\u524d\u9a71\u7ebf\u7d22 } \u5e94\u7528\uff1a\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u9006\u5411\u4e2d\u5e8f\u904d\u5386 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 =O(1) //\u5bf9\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c8\u6811\u8fdb\u884c\u9006\u5411\u4e2d\u5e8f\u904d\u5386\uff08\u5229\u7528\u7ebf\u7d22\u5b9e\u73b0\u7684\u975e\u9012\u7b97\u6cd5\uff09 void Inorder ( ThreadNode * T ){ for ( ThreadNode * p = Lastnode ( T ); p != NULL ; p = Prenode ( p )) visit ( p ); } 2.1\u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u5148\u5e8f\u540e\u7ee7 \u00b6 \u5728 \u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u5148\u5e8f\u540e\u7ee7next \u5148\u5e8f\u904d\u5386\uff1a\u6839\u5de6\u53f3\u3002 \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219pre\u4e3a\u524d\u9a71\u7ebf\u7d22\uff0c\u5373 next = p->rchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219 \u2460\u82e5 p\u6709\u5de6\u5b69\u5b50 \uff0c\u5219 next\u4e3a\u5de6\u5b69\u5b50 \u2461\u82e5 p\u6ca1\u6709\u5de6\u5b69\u5b50 \uff0c\u5219 next\u4e3a\u53f3\u5b69\u5b50 2.2\u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u5148\u5e8f\u524d\u9a71 \u00b6 \u5728 \u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u5148\u5e8f\u524d\u9a71pre \u7531\u4e8e\u5148\u5e8f\u904d\u5386\uff1a\u6839\u5de6\u53f3\u3002p\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u53ea\u80fd\u662f\u6839\u7684\u540e\u7ee7\uff0c\u4e0d\u53ef\u80fd\u662f\u524d\u9a71\uff0c\u56e0\u6b64 \u65e0\u6cd5\u627e\u524d\u9a71 \u89e3\u51b3 \uff1a\u6539\u7528\u4e09\u53c9\u94fe\u8868\uff0c\u4e09\u4e2a\u6307\u9488\uff1a\u6307\u5411\u7236\u7ed3\u70b9\u3001\u5de6\u5b69\u5b50\u7ed3\u70b9\u548c\u53f3\u5b69\u5b50\u7ed3\u70b9 \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219pre\u4e3a\u524d\u9a71\u7ebf\u7d22\uff0c\u5373 pre = p->lchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219 \u200b \u2460\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u5de6\u5b69\u5b50 \uff0c\u5219 pre\u4e3a\u7236\u7ed3\u70b9 \u200b \u2461\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u53f3\u5b69\u5b50 \uff0c\u5176 \u5de6\u5144\u5f1f\u4e3a\u7a7a \uff0c\u5219 pre\u4e3a\u7236\u7ed3\u70b9 \u200b \u2461\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u53f3\u5b69\u5b50 \uff0c\u5176 \u5de6\u5144\u5f1f\u4e3a\u975e\u7a7a \uff0c\u5219 pre\u4e3a\u5de6\u5144\u5f1f\u5b50\u6811\u4e2d\u6700\u540e\u4e00\u4e2a\u88ab\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u70b9 \u3002 3.1\u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u540e\u5e8f\u540e\u7ee7 \u00b6 \u5728 \u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u540e\u5e8f\u540e\u7ee7next \u7531\u4e8e\u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839\u3002p\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u53ea\u80fd\u662f\u6839\u7684\u540e\u524d\u9a71\uff0c\u4e0d\u53ef\u80fd\u662f\u540e\u7ee7\uff0c\u56e0\u6b64`\u65e0\u6cd5\u627e\u524d\u540e\u7ee7 \u89e3\u51b3 \uff1a\u6539\u7528\u4e09\u53c9\u94fe\u8868\uff0c\u4e09\u4e2a\u6307\u9488\uff1a\u6307\u5411\u7236\u7ed3\u70b9\u3001\u5de6\u5b69\u5b50\u7ed3\u70b9\u548c\u53f3\u5b69\u5b50\u7ed3\u70b9 \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219next\u4e3a\u540e\u7ee7\u7ebf\u7d22\uff0c\u5373 next = p->rchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219 \u200b \u2460\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u53f3\u5b69\u5b50 \uff0c\u5219 next\u4e3a\u7236\u7ed3\u70b9 \u200b \u2461\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u5de6\u5b69\u5b50 \uff0c\u5176 \u53f3\u5144\u5f1f\u4e3a\u7a7a \uff0c\u5219 next\u4e3a\u7236\u7ed3\u70b9 \u200b \u2461\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u5de6\u5b69\u5b50 \uff0c\u5176 \u53f3\u5144\u5f1f\u4e3a\u975e\u7a7a \uff0c\u5219 next\u4e3a\u5de6\u5144\u5f1f\u5b50\u6811\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u540e\u7eed\u5e8f\u904d\u5386\u7684\u7ed3\u70b9 \u3002 3.2\u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u540e\u5e8f\u524d\u9a71 \u00b6 \u5728 \u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u540e\u5e8f\u524d\u9a71pre \u5148\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839\u3002 \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219pre\u4e3a\u524d\u9a71\u7ebf\u7d22\uff0c\u5373 pre = p->lchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219 \u2460\u82e5 p\u6709\u53f3\u5b69\u5b50 \uff0c\u5219 pre\u4e3a\u53f3\u5b69\u5b50 \u2461\u82e5 p\u6ca1\u6709\u53f3\u5b69\u5b50 \uff0c\u5219 pre\u4e3a\u5de6\u5b69\u5b50","title":"4.3\u7ebf\u7d22\u4e8c\u53c9\u6811"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#threaded-binary-tree","text":"","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811\u2014\u2014Threaded Binary Tree"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"\u80cc\u666f\uff1a\u4e3a\u89e3\u51b3\u904d\u5386\u53ea\u80fd\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u666e\u901a\u4e8c\u53c9\u6811\u627e\u524d\u9a71\u548c\u540e\u7ee7\u5f88\u9ebb\u70e6 \u7ebf\u7d22\u4e8c\u53c9\u6811 \u5728\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u4e0a\u52a0\u4e0a \u7ebf\u7d22 \u7684\u4e8c\u53c9\u6811\u3002","title":"\u4e00\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811\u5b9a\u4e49"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","text":"\u7531\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\u6539\u8fdb\u800c\u6765","title":"\u4e8c\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","text":"typedef struct TreeNode { Elemtype data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BiTNode , * BiTree ;","title":"\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u8868\u8ff0"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","text":"typedef struct TreeNode { Elemtype data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 int ltag , rtag ; //\u5de6\u3001\u53f3\u7ebf\u7d22\u6807\u5fd7 } ThreadNode , * ThreadTree ; tag==0 \uff1a\u8868\u793a\u6307\u9488\u6307\u5411 \u5b69\u5b50 tag==1 \uff1a\u8868\u793a\u6307\u9488\u6307\u5411 \u7ebf\u7d22","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u8868\u8ff0"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","text":"\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u3001 \u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u3001 \u540e\u7eed\u7ebf\u7d22\u4e8c\u53c9\u6811","title":"\u4e09\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u5206\u7c7b"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_6","text":"\u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c\u7ebf\u7d22\u5316 \uff1a\u5bf9\u4e8c\u53c9\u6811\u4ee5\u67d0\u79cd\u904d\u5386\u65b9\u5f0f\uff08\u5982\u5148\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u6216\u5c42\u6b21\u7b49\uff09\u8fdb\u884c\u904d\u5386\uff0c\u4f7f\u5176\u53d8\u4e3a\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u8fc7\u7a0b\u3002","title":"\u56db\u3001\u4e8c\u53c9\u6811\u7ebf\u7d22\u5316"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_7","text":"//\u5168\u5c40\u53d8\u91cfpre\uff0c\u6307\u5411\u5f53\u524d\u8bbf\u95ee\u7ed3\u70b9\u7684\u524d\u9a71 ThreadNode * pre = NULL ; //\u4e2d\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811T(\u4e09\u79cd\u4e00\u6837\uff0c\u53ea\u662f\u8c03\u7528\u7ebf\u7d22\u5316\u51fd\u6570\u4e0d\u540c) void CreateThread ( ThreadTree T ){ pre = NULL ; //pre\u521d\u59cb\u4e3aNULL if ( T != NULL ){ //\u975e\u7a7a\u4e8c\u53c9\u6811\u624d\u80fd\u7ebf\u7d22\u5316 InTread ( T ); //\u4e2d\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811 if ( pre -> rchild == NULL ){ pre -> rtag = 1 ; //\u5904\u7406\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 } } } //\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u4e00\u8fb9\u904d\u5386\uff0c\u4e00\u8fb9\u7ebf\u7d22\u5316 void InOrder ( ThreadTree T ){ if ( T != NULL ){ InOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 InOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } //\u8bbf\u95ee\u7ed3\u70b9\uff0c\u987a\u4fbf\u7ebf\u7d22\u5316\uff08\u4e09\u79cd\u4e00\u6837\uff09 void visit ( TheadNode * q ){ if ( q -> lchild == NULL ){ //\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5efa\u7acb\u524d\u9a71\u7ebf\u7d22 q -> lchild = pre ; q -> ltag = 1 ; } if ( pre != NULL && pre -> rchild == NULL ){ pre -> rchild = q ; //\u5efa\u7acb\u524d\u9a71\u7ed3\u70b9\u7684\u540e\u7ee7\u7ebf\u7d22 pre -> rtage = 1 ; } pre = q ; }","title":"\u4e2d\u5e8f\u7ebf\u7d22\u5316"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_8","text":"//\u5168\u5c40\u53d8\u91cfpre\uff0c\u6307\u5411\u5f53\u524d\u8bbf\u95ee\u7ed3\u70b9\u7684\u524d\u9a71 ThreadNode * pre = NULL ; //\u5148\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811T(\u4e09\u79cd\u4e00\u6837\uff0c\u53ea\u662f\u8c03\u7528\u7ebf\u7d22\u5316\u51fd\u6570\u4e0d\u540c) void CreateThread ( ThreadTree T ){ pre = NULL ; //pre\u521d\u59cb\u4e3aNULL if ( T != NULL ){ //\u975e\u7a7a\u4e8c\u53c9\u6811\u624d\u80fd\u7ebf\u7d22\u5316 PreTread ( T ); //\u5148\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811 if ( pre -> rchild == NULL ){ pre -> rtag = 1 ; //\u5904\u7406\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 } } } //\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u4e00\u8fb9\u904d\u5386\uff0c\u4e00\u8fb9\u7ebf\u7d22\u5316 void PreOrder ( ThreadTree T ){ if ( T != NULL ){ visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 if ( T -> ltag == 0 ) //lchild\u4e0d\u662f\u524d\u9a71\u7ebf\u7d22\uff0c\u662f\u7ebf\u7d22\u8fd8\u904d\u5386\u5219\u65e0\u9650\u5faa\u73af InOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 InOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } //\u8bbf\u95ee\u7ed3\u70b9\uff0c\u987a\u4fbf\u7ebf\u7d22\u5316\uff08\u4e09\u79cd\u4e00\u6837\uff09 void visit ( TheadNode * q ){ if ( q -> lchild == NULL ){ //\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5efa\u7acb\u524d\u9a71\u7ebf\u7d22 q -> lchild = pre ; q -> ltag = 1 ; } if ( pre != NULL && pre -> rchild == NULL ){ pre -> rchild = q ; //\u5efa\u7acb\u524d\u9a71\u7ed3\u70b9\u7684\u540e\u7ee7\u7ebf\u7d22 pre -> rtage = 1 ; } pre = q ; }","title":"\u5148\u5e8f\u7ebf\u7d22\u5316"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_9","text":"//\u5168\u5c40\u53d8\u91cfpre\uff0c\u6307\u5411\u5f53\u524d\u8bbf\u95ee\u7ed3\u70b9\u7684\u524d\u9a71 ThreadNode * pre = NULL ; //\u540e\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811T(\u4e09\u79cd\u4e00\u6837\uff0c\u53ea\u662f\u8c03\u7528\u7ebf\u7d22\u5316\u51fd\u6570\u4e0d\u540c) void CreateThread ( ThreadTree T ){ pre = NULL ; //pre\u521d\u59cb\u4e3aNULL if ( T != NULL ){ //\u975e\u7a7a\u4e8c\u53c9\u6811\u624d\u80fd\u7ebf\u7d22\u5316 PostTread ( T ); //\u540e\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811 if ( pre -> rchild == NULL ){ pre -> rtag = 1 ; //\u5904\u7406\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 } } } //\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u4e00\u8fb9\u904d\u5386\uff0c\u4e00\u8fb9\u7ebf\u7d22\u5316 void PostOrder ( ThreadTree T ){ if ( T != NULL ){ InOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 InOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 } } //\u8bbf\u95ee\u7ed3\u70b9\uff0c\u987a\u4fbf\u7ebf\u7d22\u5316\uff08\u4e09\u79cd\u4e00\u6837\uff09 void visit ( TheadNode * q ){ if ( q -> lchild == NULL ){ //\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5efa\u7acb\u524d\u9a71\u7ebf\u7d22 q -> lchild = pre ; q -> ltag = 1 ; } if ( pre != NULL && pre -> rchild == NULL ){ pre -> rchild = q ; //\u5efa\u7acb\u524d\u9a71\u7ed3\u70b9\u7684\u540e\u7ee7\u7ebf\u7d22 pre -> rtage = 1 ; } pre = q ; }","title":"\u540e\u7eed\u7ebf\u7d22\u5316"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_10","text":"","title":"\u4e94\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u524d\u9a71\u548c\u540e\u7ee7"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#11","text":"\u5728 \u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u4e2d\u5e8f\u540e\u7ee7next \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219next\u4e3a\u540e\u7ee7\u7ebf\u7d22\uff0c\u5373 next = p->rchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219p\u5fc5\u6709\u53f3\u5b69\u5b50\uff0c next\u4e3ap\u7684\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u4e0b\u7ed3\u70b9 \u3002 //\u627e\u5230\u4ee5P\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u88ab\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u70b9 ThreadNode * Firstnode ( ThreadNode * p ){ //\u5faa\u73af\u627e\u5230\u6700\u5de6\u4e0b\u7ed3\u70b9(\u4e0d\u4e00\u5b9a\u662f\u53f6\u5b50\u7ed3\u70b9) while ( p -> ltag == 0 ) p = p -> lchild ; return p ; } //\u5728\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u4e2d\u627e\u5230\u7ed3\u70b9p\u7684\u540e\u7ee7\u7ed3\u70b9 TheadNode * Nextnode ( ThreadNode * p ){ //\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u4e0b\u7ed3\u70b9 if ( p -> rtag == 0 ) return Fistnode ( p -> rchild ); else return p -> rchild ; //rtag=1\u76f4\u63a5\u8fd4\u56de\u540e\u7ee7\u7ebf\u7d22 }","title":"1.1\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u4e2d\u5e8f\u540e\u7ee7"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_11","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 =O(1) //\u5bf9\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c8\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff08\u5229\u7528\u7ebf\u7d22\u5b9e\u73b0\u7684\u975e\u9012\u7b97\u6cd5\uff09 void Inorder ( ThreadNode * T ){ for ( ThreadNode * p = Firstnode ( T ); p != NULL ; p = Nextnode ( p )) visit ( p ); }","title":"\u5e94\u7528\uff1a\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#12","text":"\u5728 \u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u4e2d\u5e8f\u524d\u9a71pre \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219pre\u4e3a\u524d\u9a71\u7ebf\u7d22\uff0c\u5373 pre = p->lchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219p\u5fc5\u6709\u5de6\u5b69\u5b50\uff0c pre\u4e3ap\u7684\u5de6\u5b50\u6811\u4e2d\u6700\u53f3\u4e0b\u7ed3\u70b9 \u3002 //\u627e\u5230\u4ee5P\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u540e\u4e00\u4e2a\u88ab\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u70b9 ThreadNode * Lastnode ( ThreadNode * p ){ //\u5faa\u73af\u627e\u5230\u6700\u53f3\u4e0b\u7ed3\u70b9(\u4e0d\u4e00\u5b9a\u662f\u53f6\u5b50\u7ed3\u70b9) while ( p -> rtag == 0 ) p = p -> rchild ; return p ; } //\u5728\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u4e2d\u627e\u5230\u7ed3\u70b9p\u7684\u524d\u9a71\u7ed3\u70b9 TheadNode * Prenode ( ThreadNode * p ){ //\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u4e0b\u7ed3\u70b9 if ( p -> rtag == 0 ) return Lastnode ( p -> lchild ); else return p -> lchild ; //rtag=1\u76f4\u63a5\u8fd4\u56de\u524d\u9a71\u7ebf\u7d22 }","title":"1.2\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u4e2d\u5e8f\u524d\u9a71"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_12","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 =O(1) //\u5bf9\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c8\u6811\u8fdb\u884c\u9006\u5411\u4e2d\u5e8f\u904d\u5386\uff08\u5229\u7528\u7ebf\u7d22\u5b9e\u73b0\u7684\u975e\u9012\u7b97\u6cd5\uff09 void Inorder ( ThreadNode * T ){ for ( ThreadNode * p = Lastnode ( T ); p != NULL ; p = Prenode ( p )) visit ( p ); }","title":"\u5e94\u7528\uff1a\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u9006\u5411\u4e2d\u5e8f\u904d\u5386"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#21","text":"\u5728 \u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u5148\u5e8f\u540e\u7ee7next \u5148\u5e8f\u904d\u5386\uff1a\u6839\u5de6\u53f3\u3002 \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219pre\u4e3a\u524d\u9a71\u7ebf\u7d22\uff0c\u5373 next = p->rchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219 \u2460\u82e5 p\u6709\u5de6\u5b69\u5b50 \uff0c\u5219 next\u4e3a\u5de6\u5b69\u5b50 \u2461\u82e5 p\u6ca1\u6709\u5de6\u5b69\u5b50 \uff0c\u5219 next\u4e3a\u53f3\u5b69\u5b50","title":"2.1\u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u5148\u5e8f\u540e\u7ee7"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#22","text":"\u5728 \u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u5148\u5e8f\u524d\u9a71pre \u7531\u4e8e\u5148\u5e8f\u904d\u5386\uff1a\u6839\u5de6\u53f3\u3002p\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u53ea\u80fd\u662f\u6839\u7684\u540e\u7ee7\uff0c\u4e0d\u53ef\u80fd\u662f\u524d\u9a71\uff0c\u56e0\u6b64 \u65e0\u6cd5\u627e\u524d\u9a71 \u89e3\u51b3 \uff1a\u6539\u7528\u4e09\u53c9\u94fe\u8868\uff0c\u4e09\u4e2a\u6307\u9488\uff1a\u6307\u5411\u7236\u7ed3\u70b9\u3001\u5de6\u5b69\u5b50\u7ed3\u70b9\u548c\u53f3\u5b69\u5b50\u7ed3\u70b9 \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219pre\u4e3a\u524d\u9a71\u7ebf\u7d22\uff0c\u5373 pre = p->lchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219 \u200b \u2460\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u5de6\u5b69\u5b50 \uff0c\u5219 pre\u4e3a\u7236\u7ed3\u70b9 \u200b \u2461\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u53f3\u5b69\u5b50 \uff0c\u5176 \u5de6\u5144\u5f1f\u4e3a\u7a7a \uff0c\u5219 pre\u4e3a\u7236\u7ed3\u70b9 \u200b \u2461\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u53f3\u5b69\u5b50 \uff0c\u5176 \u5de6\u5144\u5f1f\u4e3a\u975e\u7a7a \uff0c\u5219 pre\u4e3a\u5de6\u5144\u5f1f\u5b50\u6811\u4e2d\u6700\u540e\u4e00\u4e2a\u88ab\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u70b9 \u3002","title":"2.2\u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u5148\u5e8f\u524d\u9a71"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#31","text":"\u5728 \u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u540e\u5e8f\u540e\u7ee7next \u7531\u4e8e\u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839\u3002p\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u53ea\u80fd\u662f\u6839\u7684\u540e\u524d\u9a71\uff0c\u4e0d\u53ef\u80fd\u662f\u540e\u7ee7\uff0c\u56e0\u6b64`\u65e0\u6cd5\u627e\u524d\u540e\u7ee7 \u89e3\u51b3 \uff1a\u6539\u7528\u4e09\u53c9\u94fe\u8868\uff0c\u4e09\u4e2a\u6307\u9488\uff1a\u6307\u5411\u7236\u7ed3\u70b9\u3001\u5de6\u5b69\u5b50\u7ed3\u70b9\u548c\u53f3\u5b69\u5b50\u7ed3\u70b9 \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219next\u4e3a\u540e\u7ee7\u7ebf\u7d22\uff0c\u5373 next = p->rchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219 \u200b \u2460\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u53f3\u5b69\u5b50 \uff0c\u5219 next\u4e3a\u7236\u7ed3\u70b9 \u200b \u2461\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u5de6\u5b69\u5b50 \uff0c\u5176 \u53f3\u5144\u5f1f\u4e3a\u7a7a \uff0c\u5219 next\u4e3a\u7236\u7ed3\u70b9 \u200b \u2461\u82e5 \u80fd\u627e\u5230p\u7684\u7236\u7ed3\u70b9 \u4e14 p\u662f\u5de6\u5b69\u5b50 \uff0c\u5176 \u53f3\u5144\u5f1f\u4e3a\u975e\u7a7a \uff0c\u5219 next\u4e3a\u5de6\u5144\u5f1f\u5b50\u6811\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u540e\u7eed\u5e8f\u904d\u5386\u7684\u7ed3\u70b9 \u3002","title":"3.1\u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u540e\u5e8f\u540e\u7ee7"},{"location":"04-%E6%A0%91/5.3%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#32","text":"\u5728 \u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u627e\u6307\u5b9a\u7ed3\u70b9*p\u7684 \u540e\u5e8f\u524d\u9a71pre \u5148\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839\u3002 \u7b97\u6cd5\u601d\u60f3\uff1a (1)\u82e5 p->rtag == 1 \uff0c\u5219pre\u4e3a\u524d\u9a71\u7ebf\u7d22\uff0c\u5373 pre = p->lchild \u3002 (2)\u82e5 p->rtag == 0 \uff0c\u5219 \u2460\u82e5 p\u6709\u53f3\u5b69\u5b50 \uff0c\u5219 pre\u4e3a\u53f3\u5b69\u5b50 \u2461\u82e5 p\u6ca1\u6709\u53f3\u5b69\u5b50 \uff0c\u5219 pre\u4e3a\u5de6\u5b69\u5b50","title":"3.2\u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u627e\u540e\u5e8f\u524d\u9a71"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","text":"\u6811\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u4e00\u3001\u5b58\u50a8\u7ed3\u6784 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8 \u65b9\u6cd5\uff1a \u53cc\u4eb2\u8868\u793a\u6cd5 \uff08\u987a\u5e8f\u5b58\u50a8\uff09 \u5b69\u5b50\u8868\u793a\u6cd5 \uff08\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff09 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5 \uff08\u94fe\u5f0f\u5b58\u50a8\uff09 \u4e8c\u3001\u53cc\u4eb2\u8868\u793a\u6cd5\uff08\u987a\u5e8f\u5b58\u50a8\uff09 \u00b6 \u53cc\u4eb2\u8868\u793a\u6cd5\uff1a \u987a\u5e8f\u5b58\u50a8 \u7ed3\u70b9\u6570\u636e\uff0c\u7ed3\u70b9\u4e2d\u4fdd\u5b58\u7236\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 \u4f18\u70b9 \uff1a\u627e\u7236\u8282\u70b9\u65b9\u4fbf\u3002 \u7f3a\u70b9 \uff1a\u627e\u5b69\u5b50\u4e0d\u65b9\u4fbf\u3002 \u6ce8 \uff1a\u53cc\u4eb2\u8868\u793a\u6cd5\u4e0e\u4e8c\u53c9\u6811\u7684\u987a\u5e8f\u5b58\u50a8\u4e0d\u4e00\u6837\uff0c\u53cc\u4eb2\u8868\u793a\u6cd5\u4e5f\u53ef\u8868\u793a\u4e8c\u53c9\u6811 \u7c7b\u578b\u63cf\u8ff0 \u00b6 \u7ed3\u70b9 \u5305\u62ec \u6570\u636e \u548c \u7236\u4eb2\u4e0b\u6807 \uff0c \u6811 \u5305\u62ec \u7ed3\u70b9\u6570\u7ec4 \u548c \u7ed3\u70b9\u4e2a\u6570 #define MAX_TREE_SIZE 100 //\u6811\u4e2d\u6700\u591a\u7ed3\u70b9\u6570 typedef struct { //\u6811\u7684\u7ed3\u70b9\u5b9a\u4e49 ElemType data ; //\u6570\u636e\u5143\u7d20 int parent ; //\u53cc\u4eb2\u4f4d\u7f6e\u57df } PTNode ; typedef struct { //\u6811\u7684\u7c7b\u578b\u5b9a\u4e49 PTNode nodes [ MAX_TREE_SIZE ]; //\u53cc\u4eb2\u8868\u793a int n ; //\u7ed3\u70b9\u6570 } PTree ; \u589e\u52a0\u4e00\u4e2a\u7ed3\u70b9 \u00b6 \u65b0\u589e\u5143\u7d20\uff0c\u65e0\u9700\u6309\u903b\u8f91\u6b21\u5e8f\u5b58\u50a8\uff0c\u53ef\u4ee5\u653e\u5230\u5220\u9664\u7ed3\u70b9\u7559\u4e0b\u7684\u5b58\u50a8\u7a7a\u95f4\u91cc \u5220\u9664\u4e00\u4e2a\u7ed3\u70b9 \u00b6 \u65b9\u6848\u4e00\uff1a\u6570\u636e\u53d6\u51fa\uff0c\u53cc\u4eb2\u6307\u9488\u6539\u4e3a-1 \u65b9\u6848\u4e8c\uff1a\u7528\u5b58\u50a8\u7a7a\u95f4\u4e2d\u6700\u540e\u4e00\u4e2a\u5b58\u7684\u7ed3\u70b9\u628a\u8981\u5220\u7684\u7ed3\u70b9\u8986\u76d6 \u67e5\u627e\u4e00\u4e2a\u7ed3\u70b9 \u00b6 \u627e\u7236\u7ed3\u70b9\u65b9\u4fbf\u3001\u627e\u5b69\u5b50\u4e0d\u65b9\u4fbf\u3002 \u7a7a\u6570\u636e\u5bfc\u81f4\u904d\u5386\u6162\u3002 \u4e8c\u3001\u5b69\u5b50\u8868\u793a\u6cd5\uff08\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff09 \u00b6 \u5b69\u5b50\u8868\u793a\u6cd5\uff1a \u987a\u5e8f\u5b58\u50a8 \u7ed3\u70b9\u6570\u636e\uff0c\u7ed3\u70b9\u4e2d\u4fdd\u5b58\u5b69\u5b50 \u94fe\u8868 \u5934\u6307\u9488\uff08 \u94fe\u5f0f\u5b58\u50a8 \uff09 \u4f18\u70b9 \uff1a\u627e\u5b69\u5b50\u65b9\u4fbf\u3002 \u7f3a\u70b9 \uff1a\u627e\u7236\u8282\u70b9\u4e0d\u65b9\u4fbf\u3002 \u7c7b\u578b\u63cf\u8ff0 \u00b6 \u5b69\u5b50\u7ed3\u70b9 \u5305\u62ec \u5b69\u5b50\u4e0b\u6807 \u548c \u4e0b\u4e00\u4e2a\u5b69\u5b50\u6307\u9488 \uff0c \u6570\u7ec4 \u5305\u62ec \u6570\u636e \u548c \u5b69\u5b50\u7ed3\u70b9 \uff0c \u6811 \u5305\u62ec \u6570\u7ec4 \u548c \u6570\u7ec4\u5143\u7d20\uff08\u7ed3\u70b9\uff09\u4e2a\u6570 \u53ca \u6839\u7684\u4e0b\u6807 #define MAX_TREE_SIZE 100 //\u6811\u4e2d\u6700\u591a\u7ed3\u70b9\u6570 struct CTNode { int child ; //\u5b69\u5b50\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e struct CTNode * next ; //\u4e0b\u4e00\u4e2a\u5b69\u5b50 }; typedef struct { ElemType data ; struct CTNode * firstchild ; //\u7b2c\u4e00\u4e2a\u5b69\u5b50 } CTBox ; typedef struct { CTBox nodes [ MAX_TREE_SIZE ]; int n , r ; //\u7ed3\u70b9\u6570\u548c\u6839\u7684\u4f4d\u7f6e } CTree ; \u589e\u52a0\u4e00\u4e2a\u7ed3\u70b9 \u00b6 \u65b0\u589e\u5143\u7d20\uff0c\u7236\u7ed3\u70b9\u540e\u65b0\u589e\u4e00\u4e2a\u5b69\u5b50\u7ed3\u70b9\uff0c\u6570\u7ec4\u4e2d\u52a0\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20 \u5220\u9664\u4e00\u4e2a\u7ed3\u70b9 \u00b6 \u7236\u7ed3\u70b9\u540e\u7684\u94fe\u8868\u4e2d\u5c06\u6b64\u7ed3\u70b9\u5220\u9664 \u6570\u7ec4\u4e2d\uff1a \u2460\u82e5\u6b64\u7ed3\u70b9\u540e\u65e0\u94fe\u8868\uff0c\u5219\u76f4\u63a5\u5220\u9664 \u2461\u82e5\u6b64\u7ed3\u70b9\u540e\u6709\u94fe\u8868\uff0c\u518d\u5904\u7406\u5b50\u6811 \u67e5\u627e\u4e00\u4e2a\u7ed3\u70b9 \u00b6 \u6309\u56fe\u4e00\u884c\u4e00\u884c\u904d\u5386 \u627e\u5b69\u5b50\u7ed3\u70b9\u65b9\u4fbf\uff0c\u627e\u7236\u7ed3\u70b9\u4e0d\u65b9\u4fbf \u4e09\u3001\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\uff08\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff09 \u00b6 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\uff1a\u7528 \u4e8c\u53c9\u94fe\u8868 \u5b58\u50a8 \u6811 \u2014\u2014 \u4e24\u4e2a\u6307\u9488 \uff1a \u7b2c\u4e00\u4e2a\u5b69\u5b50 \u548c \u53f3\u5144\u5f1f \u7528\u6b64\u65b9\u6cd5\u5b58\u50a8\u7684\u6811\uff0c\u5f62\u6001\u4e0a\u548c \u4e8c\u53c9\u6811 \u7c7b\u4f3c \u7c7b\u578b\u63cf\u8ff0 \u00b6 \u7531\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff08\u4e8c\u53c9\u94fe\u8868\uff09\u6539\u53d8\u800c\u6765 typedef struct CSNode { Elemtype data ; //\u6570\u636e\u57df struct CSTNode * firstchild , * nextsibling ; //\u7b2c\u4e00\u4e2a\u5b69\u5b50\u548c\u53f3\u5144\u5f1f\u6307\u9488 } CSTNode , * CSTree ; \u5e94\u7528\uff1a\u6811\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362 \u00b6 \u56db\u3001\u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362 \u00b6 \u672c\u8d28\uff1a\u7528 \u4e8c\u53c9\u94fe\u8868 \u5b58\u50a8 \u68ee\u6797 \u5c06\u68ee\u6797\u7684\u6839\u7ed3\u70b9\u8fde\u8d77\u6765\uff0c\u89c6\u4e3a\u5144\u5f1f\u5173\u7cfb","title":"4.4\u6811\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u6811\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_2","text":"\u987a\u5e8f\u5b58\u50a8 \u548c \u94fe\u5f0f\u5b58\u50a8 \u65b9\u6cd5\uff1a \u53cc\u4eb2\u8868\u793a\u6cd5 \uff08\u987a\u5e8f\u5b58\u50a8\uff09 \u5b69\u5b50\u8868\u793a\u6cd5 \uff08\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff09 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5 \uff08\u94fe\u5f0f\u5b58\u50a8\uff09","title":"\u4e00\u3001\u5b58\u50a8\u7ed3\u6784"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_3","text":"\u53cc\u4eb2\u8868\u793a\u6cd5\uff1a \u987a\u5e8f\u5b58\u50a8 \u7ed3\u70b9\u6570\u636e\uff0c\u7ed3\u70b9\u4e2d\u4fdd\u5b58\u7236\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 \u4f18\u70b9 \uff1a\u627e\u7236\u8282\u70b9\u65b9\u4fbf\u3002 \u7f3a\u70b9 \uff1a\u627e\u5b69\u5b50\u4e0d\u65b9\u4fbf\u3002 \u6ce8 \uff1a\u53cc\u4eb2\u8868\u793a\u6cd5\u4e0e\u4e8c\u53c9\u6811\u7684\u987a\u5e8f\u5b58\u50a8\u4e0d\u4e00\u6837\uff0c\u53cc\u4eb2\u8868\u793a\u6cd5\u4e5f\u53ef\u8868\u793a\u4e8c\u53c9\u6811","title":"\u4e8c\u3001\u53cc\u4eb2\u8868\u793a\u6cd5\uff08\u987a\u5e8f\u5b58\u50a8\uff09"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_4","text":"\u7ed3\u70b9 \u5305\u62ec \u6570\u636e \u548c \u7236\u4eb2\u4e0b\u6807 \uff0c \u6811 \u5305\u62ec \u7ed3\u70b9\u6570\u7ec4 \u548c \u7ed3\u70b9\u4e2a\u6570 #define MAX_TREE_SIZE 100 //\u6811\u4e2d\u6700\u591a\u7ed3\u70b9\u6570 typedef struct { //\u6811\u7684\u7ed3\u70b9\u5b9a\u4e49 ElemType data ; //\u6570\u636e\u5143\u7d20 int parent ; //\u53cc\u4eb2\u4f4d\u7f6e\u57df } PTNode ; typedef struct { //\u6811\u7684\u7c7b\u578b\u5b9a\u4e49 PTNode nodes [ MAX_TREE_SIZE ]; //\u53cc\u4eb2\u8868\u793a int n ; //\u7ed3\u70b9\u6570 } PTree ;","title":"\u7c7b\u578b\u63cf\u8ff0"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_5","text":"\u65b0\u589e\u5143\u7d20\uff0c\u65e0\u9700\u6309\u903b\u8f91\u6b21\u5e8f\u5b58\u50a8\uff0c\u53ef\u4ee5\u653e\u5230\u5220\u9664\u7ed3\u70b9\u7559\u4e0b\u7684\u5b58\u50a8\u7a7a\u95f4\u91cc","title":"\u589e\u52a0\u4e00\u4e2a\u7ed3\u70b9"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_6","text":"\u65b9\u6848\u4e00\uff1a\u6570\u636e\u53d6\u51fa\uff0c\u53cc\u4eb2\u6307\u9488\u6539\u4e3a-1 \u65b9\u6848\u4e8c\uff1a\u7528\u5b58\u50a8\u7a7a\u95f4\u4e2d\u6700\u540e\u4e00\u4e2a\u5b58\u7684\u7ed3\u70b9\u628a\u8981\u5220\u7684\u7ed3\u70b9\u8986\u76d6","title":"\u5220\u9664\u4e00\u4e2a\u7ed3\u70b9"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_7","text":"\u627e\u7236\u7ed3\u70b9\u65b9\u4fbf\u3001\u627e\u5b69\u5b50\u4e0d\u65b9\u4fbf\u3002 \u7a7a\u6570\u636e\u5bfc\u81f4\u904d\u5386\u6162\u3002","title":"\u67e5\u627e\u4e00\u4e2a\u7ed3\u70b9"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_8","text":"\u5b69\u5b50\u8868\u793a\u6cd5\uff1a \u987a\u5e8f\u5b58\u50a8 \u7ed3\u70b9\u6570\u636e\uff0c\u7ed3\u70b9\u4e2d\u4fdd\u5b58\u5b69\u5b50 \u94fe\u8868 \u5934\u6307\u9488\uff08 \u94fe\u5f0f\u5b58\u50a8 \uff09 \u4f18\u70b9 \uff1a\u627e\u5b69\u5b50\u65b9\u4fbf\u3002 \u7f3a\u70b9 \uff1a\u627e\u7236\u8282\u70b9\u4e0d\u65b9\u4fbf\u3002","title":"\u4e8c\u3001\u5b69\u5b50\u8868\u793a\u6cd5\uff08\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff09"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_9","text":"\u5b69\u5b50\u7ed3\u70b9 \u5305\u62ec \u5b69\u5b50\u4e0b\u6807 \u548c \u4e0b\u4e00\u4e2a\u5b69\u5b50\u6307\u9488 \uff0c \u6570\u7ec4 \u5305\u62ec \u6570\u636e \u548c \u5b69\u5b50\u7ed3\u70b9 \uff0c \u6811 \u5305\u62ec \u6570\u7ec4 \u548c \u6570\u7ec4\u5143\u7d20\uff08\u7ed3\u70b9\uff09\u4e2a\u6570 \u53ca \u6839\u7684\u4e0b\u6807 #define MAX_TREE_SIZE 100 //\u6811\u4e2d\u6700\u591a\u7ed3\u70b9\u6570 struct CTNode { int child ; //\u5b69\u5b50\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e struct CTNode * next ; //\u4e0b\u4e00\u4e2a\u5b69\u5b50 }; typedef struct { ElemType data ; struct CTNode * firstchild ; //\u7b2c\u4e00\u4e2a\u5b69\u5b50 } CTBox ; typedef struct { CTBox nodes [ MAX_TREE_SIZE ]; int n , r ; //\u7ed3\u70b9\u6570\u548c\u6839\u7684\u4f4d\u7f6e } CTree ;","title":"\u7c7b\u578b\u63cf\u8ff0"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_10","text":"\u65b0\u589e\u5143\u7d20\uff0c\u7236\u7ed3\u70b9\u540e\u65b0\u589e\u4e00\u4e2a\u5b69\u5b50\u7ed3\u70b9\uff0c\u6570\u7ec4\u4e2d\u52a0\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20","title":"\u589e\u52a0\u4e00\u4e2a\u7ed3\u70b9"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_11","text":"\u7236\u7ed3\u70b9\u540e\u7684\u94fe\u8868\u4e2d\u5c06\u6b64\u7ed3\u70b9\u5220\u9664 \u6570\u7ec4\u4e2d\uff1a \u2460\u82e5\u6b64\u7ed3\u70b9\u540e\u65e0\u94fe\u8868\uff0c\u5219\u76f4\u63a5\u5220\u9664 \u2461\u82e5\u6b64\u7ed3\u70b9\u540e\u6709\u94fe\u8868\uff0c\u518d\u5904\u7406\u5b50\u6811","title":"\u5220\u9664\u4e00\u4e2a\u7ed3\u70b9"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_12","text":"\u6309\u56fe\u4e00\u884c\u4e00\u884c\u904d\u5386 \u627e\u5b69\u5b50\u7ed3\u70b9\u65b9\u4fbf\uff0c\u627e\u7236\u7ed3\u70b9\u4e0d\u65b9\u4fbf","title":"\u67e5\u627e\u4e00\u4e2a\u7ed3\u70b9"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_13","text":"\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\uff1a\u7528 \u4e8c\u53c9\u94fe\u8868 \u5b58\u50a8 \u6811 \u2014\u2014 \u4e24\u4e2a\u6307\u9488 \uff1a \u7b2c\u4e00\u4e2a\u5b69\u5b50 \u548c \u53f3\u5144\u5f1f \u7528\u6b64\u65b9\u6cd5\u5b58\u50a8\u7684\u6811\uff0c\u5f62\u6001\u4e0a\u548c \u4e8c\u53c9\u6811 \u7c7b\u4f3c","title":"\u4e09\u3001\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\uff08\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff09"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_14","text":"\u7531\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff08\u4e8c\u53c9\u94fe\u8868\uff09\u6539\u53d8\u800c\u6765 typedef struct CSNode { Elemtype data ; //\u6570\u636e\u57df struct CSTNode * firstchild , * nextsibling ; //\u7b2c\u4e00\u4e2a\u5b69\u5b50\u548c\u53f3\u5144\u5f1f\u6307\u9488 } CSTNode , * CSTree ;","title":"\u7c7b\u578b\u63cf\u8ff0"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_15","text":"","title":"\u5e94\u7528\uff1a\u6811\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362"},{"location":"04-%E6%A0%91/5.4%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_16","text":"\u672c\u8d28\uff1a\u7528 \u4e8c\u53c9\u94fe\u8868 \u5b58\u50a8 \u68ee\u6797 \u5c06\u68ee\u6797\u7684\u6839\u7ed3\u70b9\u8fde\u8d77\u6765\uff0c\u89c6\u4e3a\u5144\u5f1f\u5173\u7cfb","title":"\u56db\u3001\u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/","text":"\u4e8c\u53c9\u6392\u5e8f\u6811\u2014\u2014Binary Search Tree \u00b6 \u4e00\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5b9a\u4e49 \u00b6 \u4e8c\u53c9\u6392\u5e8f\u6811 \uff0c\u53c8\u79f0 \u4e8c\u53c9\u67e5\u627e\u6811 ( BST , Binary Search Tree ) \u5b9a\u4e49\uff1a\u4e00\u68f5\u4e8c\u53c9\u6811\u6216\u8005\u662f\u7a7a\u4e8c\u53c9\u6811\uff0c\u6216\u8005\u662f\u5177\u6709\u5982\u4e0b\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a \u5de6\u5b50\u6811 \u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747 \u5c0f\u4e8e \u6839\u7ed3\u70b9 \u7684\u5173\u952e\u5b57\uff1b \u53f3\u5b50\u6811 \u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747 \u5927\u4e8e \u6839\u7ed3\u70b9 \u7684\u5173\u952e\u5b57\u3002 \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u53c8\u5404\u662f\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811\u3002 \u5de6\u5b50\u6811\u7ed3\u70b9\u503c<\u6839\u7ed3\u70b9\u503c<\u53f3\u5b50\u6811\u7ed3\u70b9\u503c \u8fdb\u884c \u4e2d\u5e8f\u904d\u5386 ,\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a \u9012\u589e\u7684\u6709\u5e8f\u5e8f\u5217 \u4f5c\u7528 \uff1a\u5143\u7d20\u7684\u6709\u5e8f\u7ec4\u7ec7\u3001 \u641c\u7d22 \u3002 \u4e8c\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5b58\u50a8\u7ed3\u6784\uff08\u7528\u94fe\u5f0f\u5b58\u50a8\uff09 \u00b6 \u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u7c7b\u578b\u8868\u8ff0\uff08\u4e0e\u4e8c\u53c9\u6811\u4e00\u6837\uff09 typedef struct TreeNode { int data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BSTNode , * BSTree ; \u4e09\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u67e5\u627e \u00b6 \u975e\u9012\u5f52\u597d\u4e8e\u9012\u5f52 \u7b97\u6cd5\u601d\u60f3\uff1a \u82e5\u6811\u975e\u7a7a\uff0c\u76ee\u6807\u503c\u4e0e\u6839\u7ed3\u70b9\u7684\u503c\u6bd4\u8f83\uff1a \u82e5\u76f8\u7b49\uff0c\u5219\u67e5\u627e\u6210\u529f\u3002 \u82e5\u5c0f\u4e8e\u6839\u7ed3\u70b9,\u5219\u5728\u5de6\u5b50\u6811\u4e0a\u67e5\u627e,\u5426\u5219\u5728\u53f3\u5b50\u6811\u4e0a\u67e5\u627e\u3002 \u67e5\u627e\u6210\u529f,\u8fd4\u56de\u7ed3\u70b9\u6307\u9488;\u67e5\u627e\u5931\u8d25\u8fd4\u56deNULL\u3002 \u9012\u5f52\u67e5\u627e \u00b6 \u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u67e5\u627e\u503c\u4e3akey\u7684\u7ed3\u70b9\uff08\u9012\u5f52\u5b9e\u73b0\uff09 BSTNode * BST_Search ( BSTree T , int key ){ if ( T == NULL ) return NULL ; if ( key == T -> data ) return T ; else if ( key < T -> data ) return BST_Search ( T -> lchild , key ); else return BST_Search ( T -> rchild , key ); } \u975e\u9012\u5f52\u67e5\u627e \u00b6 \u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6 =O(1) //\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u67e5\u627e\u503c\u4e3akey\u7684\u7ed3\u70b9 BSTNode * NoRBST_Search ( BSTree T , int key ){ while ( T != NULL && key != T -> data ){ if ( key < T -> data ) T = T -> lchild ; else T = T -> rchild ; } return T ; } \u56db\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u63d2\u5165 \u00b6 \u975e\u9012\u5f52\u597d\u4e8e\u9012\u5f52 \u7b97\u6cd5\u601d\u60f3\uff1a \u82e5\u539f\u4e8c\u53c9\u6392\u5e8f\u6811\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u63d2\u5165\u7ed3\u70b9\uff1b \u5426\u5219\uff0c\u82e5\u5173\u952e\u5b57k\u5c0f\u4e8e\u6839\u7ed3\u70b9\u503c,\u5219\u63d2\u5165\u5230\u5de6\u5b50\u6811\uff0c\u82e5\u5173\u952e\u5b57k\u5927\u4e8e\u6839\u7ed3\u70b9\u503c\uff0c\u5219\u63d2\u5165\u5230\u53f3\u5b50\u6811 \u9012\u5f52\u63d2\u5165 \u00b6 \u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u63d2\u5165\u5173\u952e\u5b57\u4e3ak\u7684\u65b0\u7ed3\u70b9(\u9012\u5f52\u5b9e\u73b0) int BST_Insert ( BSTree & T , int key ){ if ( T == NULL ){ //\u6811\u4e3a\u7a7a\uff0c\u5219\u63d2\u5165\u6839\u7ed3\u70b9 T = ( BSTree ) malloc ( sizeof ( BSTNode )); T -> data = k ; T -> lchild = T -> rchild = NULL ; return 1 ; } if ( key == T -> data ){ //\u6811\u4e2d\u5b58\u5728\u76f8\u540c\u5173\u952e\u5b57\u7684\u7ed3\u70b9\uff0c\u63d2\u5165\u5931\u8d25 return 0 ; } else if ( key < T -> data ){ return BST_Insert ( T -> lchild , key ); //\u63d2\u5165\u5230T\u7684\u5de6\u5b50\u6811 } else { return BST_Insert ( T -> rchild , key ); //\u63d2\u5165\u5230T\u7684\u53f3\u5b50\u6811 } } \u975e\u9012\u5f52\u63d2\u5165 \u00b6 \u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6 =O(1) //\u4e8c\u53c9\u6392\u5e8f\u6811\u975e\u9012\u5f52\u63d2\u5165\uff0c\u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6Sn=O(1) int NoRBST_Insert ( BSTree & T , int key ) { BSTNode * pre = NULL ; //\u4e8c\u53c9\u6811\u91cc\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 if ( T == NULL ) { //\u539f\u6765\u6811\u4e3a\u7a7a\uff0c\u7533\u8bf7\u7ed3\u70b9\u5c06\u5176\u63d2\u5165\u8fdb\u53bb T = ( BSTree ) malloc ( sizeof ( BSTNode )); T -> data = key ; T -> lchild = T -> rchild = NULL ; return 1 ; //\u6210\u529f\u63d2\u5165 } //\u83b7\u53d6\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 while ( T != NULL ) { if ( key == T -> data ) { return 0 ; //\u4e8c\u53c9\u6392\u5e8f\u6811\u91cc\u4e0d\u53ef\u80fd\u5b58\u5728\u76f8\u540c\u7684\u7ed3\u70b9\uff0c\u63d2\u5165\u5931\u8d25 } else if ( key < T -> data ) { pre = T ; T = T -> lchild ; //\u904d\u5386\u5de6\u5b69\u5b50 } else { pre = T ; T = T -> rchild ; //\u904d\u5386\u53f3\u5b69\u5b50 } } //\u63d2\u5165\u5230\u5de6\u5b50\u6811 if ( key < pre -> data ) { T = ( BSTree ) malloc ( sizeof ( BSTNode )); T -> data = key ; pre -> lchild = T ; } else { //\u5230\u4e86\u6b64\u6b65\u5df2\u7ecf\u4e0d\u5b58\u5728\u7b49\u4e8e\u7684\u60c5\u51b5 //\u63d2\u5165\u5230\u53f3\u5b50\u6811 T = ( BSTree ) malloc ( sizeof ( BSTNode )); T -> data = key ; pre -> rchild = T ; } } \u4e94\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6784\u9020 \u00b6 //\u6309\u7167str[]\u4e2d\u7684\u5173\u952e\u5b57\u5e8f\u5efa\u7acb\u4e8c\u53c9\u6392\u5e8f\u6811 void Creat_BST ( BSTree & T , int str [], int n ){ T = NULL ; int i = 0 ; while ( i < n ){ BST_Insert ( T , str [ i ]); i ++ ; } } \u516d\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5220\u9664 \u00b6 \u5148\u641c\u7d22\u627e\u5230\u76ee\u6807\u7ed3\u70b9z\uff1a \u2460\u82e5\u88ab\u5220\u9664\u7ed3\u70b9z\u662f \u53f6\u5b50\u7ed3\u70b9 \uff0c\u5219 \u76f4\u63a5\u5220\u9664 \uff0c\u4e0d\u4f1a\u7834\u574f\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6027\u8d28\u3002 \u2461\u82e5\u7ed3\u70b9z\u53ea\u6709\u4e00\u9897\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\uff0c\u5219\u8ba9z\u7684\u5b50\u6811\u5206\u4e3az\u7236\u7ed3\u70b9\u7684\u5b50\u6811\uff0c\u4ee3\u66ffz\u7684\u4f4d\u7f6e \u2462\u82e5\u7ed3\u70b9z\u6709\u5de6\u3001\u53f3\u4e24\u68f5\u5b50\u6811\uff0c\u5219\u4ee4z\u7684\u76f4\u63a5\u540e\u7ee7(\u6216\u76f4\u63a5\u524d\u9a71)\u66ff\u4ee3z\uff0c\u7136\u540e\u4ece\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u5220\u53bb\u8fd9\u4e2a\u76f4\u63a5\u540e\u7ee7(\u6216\u76f4\u63a5\u524d\u9a71)\uff0c\u8fd9\u6837\u5c31\u8f6c\u6362\u6210\u4e86\u7b2c\u4e00\u6216\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u76f4\u63a5\u540e\u7ee7\u4ee3\u66ff \u76f4\u63a5\u524d\u9a71\u4ee3\u66ff \u4e03\u3001\u67e5\u627e\u6548\u7387\u7684\u5206\u6790 \u00b6 \u67e5\u627e\u957f\u5ea6\uff1a\u5bf9\u6bd4\u5173\u952e\u5b57\u7684\u6b21\u6570\uff0c\u53cd\u6620\u4e86\u67e5\u627e\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4e0e\u9ad8\u5ea6h\u6709\u5173\u3002\u9ad8\u5ea6\u8d8a\u5c0f\uff0c\u67e5\u627e\u6548\u7387\u8d8a\u9ad8 \u5e73\u8861\u4e8c\u53c9\u6811\u7684\u67e5\u627e\u6548\u7387\u6700\u9ad8\uff0c\u4e5f\u662f\u6700\u597d\u60c5\u51b5 \u6700\u597d\u60c5\u51b5\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6=O(log~2~n) \u6700\u574f\u60c5\u51b5\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6=O(n) \u5e73\u5747\u67e5\u627e\u957f\u5ea6\u8ba1\u7b97 \u00b6 \u67e5\u627e \u6210\u529f \u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff1a \u67e5\u627e \u5931\u8d25 \u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff1a","title":"4.5\u4e8c\u53c9\u6392\u5e8f\u6811"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#binary-search-tree","text":"","title":"\u4e8c\u53c9\u6392\u5e8f\u6811\u2014\u2014Binary Search Tree"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_1","text":"\u4e8c\u53c9\u6392\u5e8f\u6811 \uff0c\u53c8\u79f0 \u4e8c\u53c9\u67e5\u627e\u6811 ( BST , Binary Search Tree ) \u5b9a\u4e49\uff1a\u4e00\u68f5\u4e8c\u53c9\u6811\u6216\u8005\u662f\u7a7a\u4e8c\u53c9\u6811\uff0c\u6216\u8005\u662f\u5177\u6709\u5982\u4e0b\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a \u5de6\u5b50\u6811 \u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747 \u5c0f\u4e8e \u6839\u7ed3\u70b9 \u7684\u5173\u952e\u5b57\uff1b \u53f3\u5b50\u6811 \u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747 \u5927\u4e8e \u6839\u7ed3\u70b9 \u7684\u5173\u952e\u5b57\u3002 \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u53c8\u5404\u662f\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811\u3002 \u5de6\u5b50\u6811\u7ed3\u70b9\u503c<\u6839\u7ed3\u70b9\u503c<\u53f3\u5b50\u6811\u7ed3\u70b9\u503c \u8fdb\u884c \u4e2d\u5e8f\u904d\u5386 ,\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a \u9012\u589e\u7684\u6709\u5e8f\u5e8f\u5217 \u4f5c\u7528 \uff1a\u5143\u7d20\u7684\u6709\u5e8f\u7ec4\u7ec7\u3001 \u641c\u7d22 \u3002","title":"\u4e00\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5b9a\u4e49"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_2","text":"\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u7c7b\u578b\u8868\u8ff0\uff08\u4e0e\u4e8c\u53c9\u6811\u4e00\u6837\uff09 typedef struct TreeNode { int data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BSTNode , * BSTree ;","title":"\u4e8c\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5b58\u50a8\u7ed3\u6784\uff08\u7528\u94fe\u5f0f\u5b58\u50a8\uff09"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_3","text":"\u975e\u9012\u5f52\u597d\u4e8e\u9012\u5f52 \u7b97\u6cd5\u601d\u60f3\uff1a \u82e5\u6811\u975e\u7a7a\uff0c\u76ee\u6807\u503c\u4e0e\u6839\u7ed3\u70b9\u7684\u503c\u6bd4\u8f83\uff1a \u82e5\u76f8\u7b49\uff0c\u5219\u67e5\u627e\u6210\u529f\u3002 \u82e5\u5c0f\u4e8e\u6839\u7ed3\u70b9,\u5219\u5728\u5de6\u5b50\u6811\u4e0a\u67e5\u627e,\u5426\u5219\u5728\u53f3\u5b50\u6811\u4e0a\u67e5\u627e\u3002 \u67e5\u627e\u6210\u529f,\u8fd4\u56de\u7ed3\u70b9\u6307\u9488;\u67e5\u627e\u5931\u8d25\u8fd4\u56deNULL\u3002","title":"\u4e09\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u67e5\u627e"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_4","text":"\u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u67e5\u627e\u503c\u4e3akey\u7684\u7ed3\u70b9\uff08\u9012\u5f52\u5b9e\u73b0\uff09 BSTNode * BST_Search ( BSTree T , int key ){ if ( T == NULL ) return NULL ; if ( key == T -> data ) return T ; else if ( key < T -> data ) return BST_Search ( T -> lchild , key ); else return BST_Search ( T -> rchild , key ); }","title":"\u9012\u5f52\u67e5\u627e"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_5","text":"\u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6 =O(1) //\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u67e5\u627e\u503c\u4e3akey\u7684\u7ed3\u70b9 BSTNode * NoRBST_Search ( BSTree T , int key ){ while ( T != NULL && key != T -> data ){ if ( key < T -> data ) T = T -> lchild ; else T = T -> rchild ; } return T ; }","title":"\u975e\u9012\u5f52\u67e5\u627e"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_6","text":"\u975e\u9012\u5f52\u597d\u4e8e\u9012\u5f52 \u7b97\u6cd5\u601d\u60f3\uff1a \u82e5\u539f\u4e8c\u53c9\u6392\u5e8f\u6811\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u63d2\u5165\u7ed3\u70b9\uff1b \u5426\u5219\uff0c\u82e5\u5173\u952e\u5b57k\u5c0f\u4e8e\u6839\u7ed3\u70b9\u503c,\u5219\u63d2\u5165\u5230\u5de6\u5b50\u6811\uff0c\u82e5\u5173\u952e\u5b57k\u5927\u4e8e\u6839\u7ed3\u70b9\u503c\uff0c\u5219\u63d2\u5165\u5230\u53f3\u5b50\u6811","title":"\u56db\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u63d2\u5165"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_7","text":"\u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6 =O(h) //\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u63d2\u5165\u5173\u952e\u5b57\u4e3ak\u7684\u65b0\u7ed3\u70b9(\u9012\u5f52\u5b9e\u73b0) int BST_Insert ( BSTree & T , int key ){ if ( T == NULL ){ //\u6811\u4e3a\u7a7a\uff0c\u5219\u63d2\u5165\u6839\u7ed3\u70b9 T = ( BSTree ) malloc ( sizeof ( BSTNode )); T -> data = k ; T -> lchild = T -> rchild = NULL ; return 1 ; } if ( key == T -> data ){ //\u6811\u4e2d\u5b58\u5728\u76f8\u540c\u5173\u952e\u5b57\u7684\u7ed3\u70b9\uff0c\u63d2\u5165\u5931\u8d25 return 0 ; } else if ( key < T -> data ){ return BST_Insert ( T -> lchild , key ); //\u63d2\u5165\u5230T\u7684\u5de6\u5b50\u6811 } else { return BST_Insert ( T -> rchild , key ); //\u63d2\u5165\u5230T\u7684\u53f3\u5b50\u6811 } }","title":"\u9012\u5f52\u63d2\u5165"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_8","text":"\u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6 =O(1) //\u4e8c\u53c9\u6392\u5e8f\u6811\u975e\u9012\u5f52\u63d2\u5165\uff0c\u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6Sn=O(1) int NoRBST_Insert ( BSTree & T , int key ) { BSTNode * pre = NULL ; //\u4e8c\u53c9\u6811\u91cc\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 if ( T == NULL ) { //\u539f\u6765\u6811\u4e3a\u7a7a\uff0c\u7533\u8bf7\u7ed3\u70b9\u5c06\u5176\u63d2\u5165\u8fdb\u53bb T = ( BSTree ) malloc ( sizeof ( BSTNode )); T -> data = key ; T -> lchild = T -> rchild = NULL ; return 1 ; //\u6210\u529f\u63d2\u5165 } //\u83b7\u53d6\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 while ( T != NULL ) { if ( key == T -> data ) { return 0 ; //\u4e8c\u53c9\u6392\u5e8f\u6811\u91cc\u4e0d\u53ef\u80fd\u5b58\u5728\u76f8\u540c\u7684\u7ed3\u70b9\uff0c\u63d2\u5165\u5931\u8d25 } else if ( key < T -> data ) { pre = T ; T = T -> lchild ; //\u904d\u5386\u5de6\u5b69\u5b50 } else { pre = T ; T = T -> rchild ; //\u904d\u5386\u53f3\u5b69\u5b50 } } //\u63d2\u5165\u5230\u5de6\u5b50\u6811 if ( key < pre -> data ) { T = ( BSTree ) malloc ( sizeof ( BSTNode )); T -> data = key ; pre -> lchild = T ; } else { //\u5230\u4e86\u6b64\u6b65\u5df2\u7ecf\u4e0d\u5b58\u5728\u7b49\u4e8e\u7684\u60c5\u51b5 //\u63d2\u5165\u5230\u53f3\u5b50\u6811 T = ( BSTree ) malloc ( sizeof ( BSTNode )); T -> data = key ; pre -> rchild = T ; } }","title":"\u975e\u9012\u5f52\u63d2\u5165"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_9","text":"//\u6309\u7167str[]\u4e2d\u7684\u5173\u952e\u5b57\u5e8f\u5efa\u7acb\u4e8c\u53c9\u6392\u5e8f\u6811 void Creat_BST ( BSTree & T , int str [], int n ){ T = NULL ; int i = 0 ; while ( i < n ){ BST_Insert ( T , str [ i ]); i ++ ; } }","title":"\u4e94\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6784\u9020"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_10","text":"\u5148\u641c\u7d22\u627e\u5230\u76ee\u6807\u7ed3\u70b9z\uff1a \u2460\u82e5\u88ab\u5220\u9664\u7ed3\u70b9z\u662f \u53f6\u5b50\u7ed3\u70b9 \uff0c\u5219 \u76f4\u63a5\u5220\u9664 \uff0c\u4e0d\u4f1a\u7834\u574f\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6027\u8d28\u3002 \u2461\u82e5\u7ed3\u70b9z\u53ea\u6709\u4e00\u9897\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\uff0c\u5219\u8ba9z\u7684\u5b50\u6811\u5206\u4e3az\u7236\u7ed3\u70b9\u7684\u5b50\u6811\uff0c\u4ee3\u66ffz\u7684\u4f4d\u7f6e \u2462\u82e5\u7ed3\u70b9z\u6709\u5de6\u3001\u53f3\u4e24\u68f5\u5b50\u6811\uff0c\u5219\u4ee4z\u7684\u76f4\u63a5\u540e\u7ee7(\u6216\u76f4\u63a5\u524d\u9a71)\u66ff\u4ee3z\uff0c\u7136\u540e\u4ece\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u5220\u53bb\u8fd9\u4e2a\u76f4\u63a5\u540e\u7ee7(\u6216\u76f4\u63a5\u524d\u9a71)\uff0c\u8fd9\u6837\u5c31\u8f6c\u6362\u6210\u4e86\u7b2c\u4e00\u6216\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u76f4\u63a5\u540e\u7ee7\u4ee3\u66ff \u76f4\u63a5\u524d\u9a71\u4ee3\u66ff","title":"\u516d\u3001\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5220\u9664"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_11","text":"\u67e5\u627e\u957f\u5ea6\uff1a\u5bf9\u6bd4\u5173\u952e\u5b57\u7684\u6b21\u6570\uff0c\u53cd\u6620\u4e86\u67e5\u627e\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4e0e\u9ad8\u5ea6h\u6709\u5173\u3002\u9ad8\u5ea6\u8d8a\u5c0f\uff0c\u67e5\u627e\u6548\u7387\u8d8a\u9ad8 \u5e73\u8861\u4e8c\u53c9\u6811\u7684\u67e5\u627e\u6548\u7387\u6700\u9ad8\uff0c\u4e5f\u662f\u6700\u597d\u60c5\u51b5 \u6700\u597d\u60c5\u51b5\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6=O(log~2~n) \u6700\u574f\u60c5\u51b5\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6=O(n)","title":"\u4e03\u3001\u67e5\u627e\u6548\u7387\u7684\u5206\u6790"},{"location":"04-%E6%A0%91/5.5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/#_12","text":"\u67e5\u627e \u6210\u529f \u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff1a \u67e5\u627e \u5931\u8d25 \u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff1a","title":"\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u8ba1\u7b97"},{"location":"04-%E6%A0%91/5.6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u5e73\u8861\u4e8c\u53c9\u6811\u2014\u2014Balanced Binary Tree \u00b6 \u4e00\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49 \u00b6 \u5e73\u8861\u4e8c\u53c9\u6811 ,\u53c8\u88ab\u79f0\u4e3a AVL\u6811 \uff08\u6709\u522b\u4e8eAVL\u7b97\u6cd5\uff09\uff0c\u4e14\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a \u5b83\u662f\u4e00 \u68f5\u7a7a\u6811\u6216\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 AVL\u662f\u4e24\u4e2a\u4eba\u7684\u540d\u5b57\uff0cASL\u662f\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff0c\u4e0d\u4e00\u6837 \u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50=\u5de6\u5b50\u6811\u9ad8-\u53f3\u5b50\u6811\u9ad8 \u5e73\u8861\u4e8c\u53c9\u6811\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u7684\u503c\u53ea\u53ef\u80fd\u662f-1\u30010\u30011\u3002 \u4e8c\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784\uff08\u7528\u94fe\u5f0f\u5b58\u50a8\uff09 \u00b6 \u5e73\u8861\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u8868\u8ff0\uff08\u4e0e\u4e8c\u53c9\u6811\u4e0d\u4e00\u6837\uff09 typedef struct AVLNode { int key ; //\u6570\u636e\u57df int balance ; //\u5e73\u8861\u56e0\u5b50 struct AVLNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } AVLNode , * AVLTree ; \u4e09\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u63d2\u5165 \u00b6 \u5728\u5e73\u8861\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9\u5bfc\u81f4\u4e0d\u5e73\u8861\uff0c\u5982\u4f55\u8c03\u6574\u5e73\u8861\uff1f \u89e3\u51b3\u65b9\u6cd5\uff1a\u8c03\u6574 \u201c\u6700\u5c0f\u4e0d\u5e73\u8861\u6811\u201d \u56db\u79cd\u8c03\u6574\u65b9\u6cd5\uff1a \u2460LL\uff1a\u5728A\u7684 \u5de6\u5b69\u5b50\u7684\u5de6\u5b50\u6811 \u4e2d\u63d2\u5165\u5bfc\u81f4A\u7684\u4e0d\u5e73\u8861\uff0c\u5c06A\u7684 \u5de6\u5b69\u5b50\u53f3\u4e0a\u65cb \u3002 \u2461RR\uff1a\u5728A\u7684 \u53f3\u5b69\u5b50\u7684\u53f3\u5b50\u6811 \u4e2d\u63d2\u5165\u5bfc\u81f4A\u7684\u4e0d\u5e73\u8861\uff0c\u5c06A\u7684 \u53f3\u5b69\u5b50\u5de6\u4e0a\u65cb \u3002 \u2462LR\uff1a\u5728A\u7684 \u5de6\u5b69\u5b50\u7684\u53f3\u5b50\u6811 \u4e2d\u63d2\u5165\u5bfc\u81f4A\u7684\u4e0d\u5e73\u8861\uff0c\u5c06A\u7684 \u5de6\u5b69\u5b50\u7684\u53f3\u5b69\u5b50\uff0c\u5148\u5de6\u4e0a\u65cb\u518d\u53f3\u4e0a\u65cb \u3002 \u2463RL\uff1a\u5728A\u7684 \u53f3\u5b69\u5b50\u7684\u5de6\u5b50\u6811 \u4e2d\u63d2\u5165\u5bfc\u81f4A\u7684\u4e0d\u5e73\u8861\uff0c\u5c06A\u7684 \u53f3\u5b69\u5b50\u7684\u5de6\u5b69\u5b50\uff0c\u5148\u53f3\u4e0a\u65cb\u518d\u5de6\u4e0a\u65cb \u3002 \u56db\u3001\u67e5\u627e\u6548\u7387\u5206\u6790 \u00b6 \u5e73\u5747\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6 =O(log~2~h) \u4e94\u3001\u9ad8\u5ea6\u4e3ah\u7684\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u6700\u5c11\u7ed3\u70b9\u6570 \u00b6 \u9012\u63a8\u516c\u5f0f \uff1a \\( \\(n_h=n_{h-1}+n_{h-2}+1\\) \\)","title":"4.6\u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"04-%E6%A0%91/5.6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/#balanced-binary-tree","text":"","title":"\u5e73\u8861\u4e8c\u53c9\u6811\u2014\u2014Balanced Binary Tree"},{"location":"04-%E6%A0%91/5.6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"\u5e73\u8861\u4e8c\u53c9\u6811 ,\u53c8\u88ab\u79f0\u4e3a AVL\u6811 \uff08\u6709\u522b\u4e8eAVL\u7b97\u6cd5\uff09\uff0c\u4e14\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a \u5b83\u662f\u4e00 \u68f5\u7a7a\u6811\u6216\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 AVL\u662f\u4e24\u4e2a\u4eba\u7684\u540d\u5b57\uff0cASL\u662f\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff0c\u4e0d\u4e00\u6837 \u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50=\u5de6\u5b50\u6811\u9ad8-\u53f3\u5b50\u6811\u9ad8 \u5e73\u8861\u4e8c\u53c9\u6811\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u7684\u503c\u53ea\u53ef\u80fd\u662f-1\u30010\u30011\u3002","title":"\u4e00\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49"},{"location":"04-%E6%A0%91/5.6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","text":"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u8868\u8ff0\uff08\u4e0e\u4e8c\u53c9\u6811\u4e0d\u4e00\u6837\uff09 typedef struct AVLNode { int key ; //\u6570\u636e\u57df int balance ; //\u5e73\u8861\u56e0\u5b50 struct AVLNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } AVLNode , * AVLTree ;","title":"\u4e8c\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784\uff08\u7528\u94fe\u5f0f\u5b58\u50a8\uff09"},{"location":"04-%E6%A0%91/5.6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","text":"\u5728\u5e73\u8861\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9\u5bfc\u81f4\u4e0d\u5e73\u8861\uff0c\u5982\u4f55\u8c03\u6574\u5e73\u8861\uff1f \u89e3\u51b3\u65b9\u6cd5\uff1a\u8c03\u6574 \u201c\u6700\u5c0f\u4e0d\u5e73\u8861\u6811\u201d \u56db\u79cd\u8c03\u6574\u65b9\u6cd5\uff1a \u2460LL\uff1a\u5728A\u7684 \u5de6\u5b69\u5b50\u7684\u5de6\u5b50\u6811 \u4e2d\u63d2\u5165\u5bfc\u81f4A\u7684\u4e0d\u5e73\u8861\uff0c\u5c06A\u7684 \u5de6\u5b69\u5b50\u53f3\u4e0a\u65cb \u3002 \u2461RR\uff1a\u5728A\u7684 \u53f3\u5b69\u5b50\u7684\u53f3\u5b50\u6811 \u4e2d\u63d2\u5165\u5bfc\u81f4A\u7684\u4e0d\u5e73\u8861\uff0c\u5c06A\u7684 \u53f3\u5b69\u5b50\u5de6\u4e0a\u65cb \u3002 \u2462LR\uff1a\u5728A\u7684 \u5de6\u5b69\u5b50\u7684\u53f3\u5b50\u6811 \u4e2d\u63d2\u5165\u5bfc\u81f4A\u7684\u4e0d\u5e73\u8861\uff0c\u5c06A\u7684 \u5de6\u5b69\u5b50\u7684\u53f3\u5b69\u5b50\uff0c\u5148\u5de6\u4e0a\u65cb\u518d\u53f3\u4e0a\u65cb \u3002 \u2463RL\uff1a\u5728A\u7684 \u53f3\u5b69\u5b50\u7684\u5de6\u5b50\u6811 \u4e2d\u63d2\u5165\u5bfc\u81f4A\u7684\u4e0d\u5e73\u8861\uff0c\u5c06A\u7684 \u53f3\u5b69\u5b50\u7684\u5de6\u5b69\u5b50\uff0c\u5148\u53f3\u4e0a\u65cb\u518d\u5de6\u4e0a\u65cb \u3002","title":"\u4e09\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u63d2\u5165"},{"location":"04-%E6%A0%91/5.6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","text":"\u5e73\u5747\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6 =O(log~2~h)","title":"\u56db\u3001\u67e5\u627e\u6548\u7387\u5206\u6790"},{"location":"04-%E6%A0%91/5.6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/#h","text":"\u9012\u63a8\u516c\u5f0f \uff1a \\( \\(n_h=n_{h-1}+n_{h-2}+1\\) \\)","title":"\u4e94\u3001\u9ad8\u5ea6\u4e3ah\u7684\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u6700\u5c11\u7ed3\u70b9\u6570"},{"location":"04-%E6%A0%91/5.7%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/","text":"\u54c8\u592b\u66fc\u6811\u2014\u2014Huffman Tree \u00b6 \u4e00\u3001\u5e26\u6743\u8def\u5f84\u957f\u5ea6 \u00b6 \u7ed3\u70b9\u7684 \u6743 \uff1a\u6709\u67d0\u79cd\u73b0\u5b9e\u542b\u4e49\u7684\u6570\u503c\uff08\u5982\uff1a\u7ed3\u70b9\u7684\u91cd\u8981\u6027\u7b49\uff09 \u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6=\u8be5\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u00d7\u8be5\u7ed3\u70b9\u7684\u6743\u503c \u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6 =\u6240\u6709 \u53f6\u7ed3\u70b9 \u7684 \u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e4b\u548c \u4e8c\u3001\u54c8\u592b\u66fc\u6811\u7684\u5b9a\u4e49 \u00b6 \u7ed9\u5b9aN\u4e2a\u6743\u503c\u4f5c\u4e3aN\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u6784\u9020\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u82e5\u8be5\u6811\u7684 \u5e26\u6743\u8def\u5f84\u957f\u5ea6\u8fbe\u5230\u6700\u5c0f \uff0c\u79f0\u8fd9\u6837\u7684\u4e8c\u53c9\u6811\u4e3a \u6700\u4f18\u4e8c\u53c9\u6811 \uff0c\u4e5f\u79f0\u4e3a \u54c8\u592b\u66fc\u6811 (Huffman Tree)\u3002 \u54c8\u592b\u66fc\u6811\u662f\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u6811\uff0c\u6743\u503c\u8f83\u5927\u7684\u7ed3\u70b9\u79bb\u6839\u8f83\u8fd1\u3002 \u4e09\u3001\u54c8\u592b\u66fc\u6811\u7684\u6784\u9020 \u00b6 \u54c8\u592b\u66fc\u6811\u6784\u9020\u7684\u6811\u53ef\u4ee5\u4e0d\u540c\uff0c\u4f46\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u76f8\u540c \u56db\u3001\u54c8\u592b\u66fc\u7f16\u7801 \u00b6 \u2460\u56fa\u5b9a\u957f\u5ea6\u7f16\u7801\uff1a\u5e73\u8861\u4e8c\u53c9\u6811 \u2461\u53ef\u53d8\u957f\u5ea6\u7f16\u7801\uff1a\u54c8\u592b\u66fc\u6811\uff08\u6700\u4f18\u4e8c\u53c9\u6811\uff09","title":"4.7\u54c8\u592b\u66fc\u6811"},{"location":"04-%E6%A0%91/5.7%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/#huffman-tree","text":"","title":"\u54c8\u592b\u66fc\u6811\u2014\u2014Huffman Tree"},{"location":"04-%E6%A0%91/5.7%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/#_1","text":"\u7ed3\u70b9\u7684 \u6743 \uff1a\u6709\u67d0\u79cd\u73b0\u5b9e\u542b\u4e49\u7684\u6570\u503c\uff08\u5982\uff1a\u7ed3\u70b9\u7684\u91cd\u8981\u6027\u7b49\uff09 \u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6=\u8be5\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u00d7\u8be5\u7ed3\u70b9\u7684\u6743\u503c \u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6 =\u6240\u6709 \u53f6\u7ed3\u70b9 \u7684 \u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e4b\u548c","title":"\u4e00\u3001\u5e26\u6743\u8def\u5f84\u957f\u5ea6"},{"location":"04-%E6%A0%91/5.7%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/#_2","text":"\u7ed9\u5b9aN\u4e2a\u6743\u503c\u4f5c\u4e3aN\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u6784\u9020\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u82e5\u8be5\u6811\u7684 \u5e26\u6743\u8def\u5f84\u957f\u5ea6\u8fbe\u5230\u6700\u5c0f \uff0c\u79f0\u8fd9\u6837\u7684\u4e8c\u53c9\u6811\u4e3a \u6700\u4f18\u4e8c\u53c9\u6811 \uff0c\u4e5f\u79f0\u4e3a \u54c8\u592b\u66fc\u6811 (Huffman Tree)\u3002 \u54c8\u592b\u66fc\u6811\u662f\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u6811\uff0c\u6743\u503c\u8f83\u5927\u7684\u7ed3\u70b9\u79bb\u6839\u8f83\u8fd1\u3002","title":"\u4e8c\u3001\u54c8\u592b\u66fc\u6811\u7684\u5b9a\u4e49"},{"location":"04-%E6%A0%91/5.7%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/#_3","text":"\u54c8\u592b\u66fc\u6811\u6784\u9020\u7684\u6811\u53ef\u4ee5\u4e0d\u540c\uff0c\u4f46\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u76f8\u540c","title":"\u4e09\u3001\u54c8\u592b\u66fc\u6811\u7684\u6784\u9020"},{"location":"04-%E6%A0%91/5.7%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/#_4","text":"\u2460\u56fa\u5b9a\u957f\u5ea6\u7f16\u7801\uff1a\u5e73\u8861\u4e8c\u53c9\u6811 \u2461\u53ef\u53d8\u957f\u5ea6\u7f16\u7801\uff1a\u54c8\u592b\u66fc\u6811\uff08\u6700\u4f18\u4e8c\u53c9\u6811\uff09","title":"\u56db\u3001\u54c8\u592b\u66fc\u7f16\u7801"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/","text":"\u56fe\u2014\u2014Graph \u00b6 \u4e00\u3001\u56fe\u7684\u5b9a\u4e49 \u00b6 \u56feG \u7531 \u9876\u70b9\u96c6V \u548c \u8fb9\u96c6E \u7ec4\u6210\uff0c\u8bb0 \\( \\(G=(V\uff0cE)\\) \\) \u3002 \\( \\(|V|\\) \\) \u8868\u793a\u56feG\u4e2d\u9876\u70b9\u7684\u4e2a\u6570\uff0c\u4e5f\u79f0\u56feG\u7684\u9636\u3002 \\( \\(|E|\\) \\) \u8868\u793a\u56feG\u4e2d\u8fb9\u7684\u6761\u6570\u3002 \u6ce8\uff1a\u7ebf\u6027\u8868\u53ef\u4ee5\u662f\u7a7a\u8868\uff0c\u6811\u53ef\u4ee5\u662f\u7a7a\u6811\uff0c\u4f46 \u56fe\u4e0d\u53ef\u4ee5\u4e3a\u7a7a \uff0c\u5373V\u4e00\u5b9a\u662f\u975e\u7a7a\u96c6 \u4e8c\u3001\u56fe\u7684\u5206\u7c7b \u00b6 \u2460\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\u3002 \u2461\u7b80\u5355\u56fe\u548c\u591a\u91cd\u56fe \u4e09\u3001\u9876\u70b9\u7684\u5ea6\uff0c\u5165\u5ea6\u3001\u51fa\u5ea6 \u00b6 \u65e0\u5411\u56fe\uff1a \u9876\u70b9\u7684\u5ea6=\u8fde\u8be5\u9876\u70b9\u7684\u8fb9\u7684\u6761\u6570 \u65e0\u5165\u5ea6\u51fa\u5ea6\u6982\u5ff5 \u6709\u5411\u56fe\uff1a \u5165\u5ea6=\u6307\u5411\u8be5\u70b9\u7684\u8fb9\u7684\u6761\u6570 \u51fa\u5ea6=\u4ece\u8be5\u70b9\u6307\u5411\u5176\u5b83\u70b9\u7684\u8fb9\u7684\u6761\u6570 \u9876\u70b9\u7684\u5ea6=\u8fde\u8be5\u9876\u70b9\u7684\u8fb9\u7684\u6761\u6570=\u5165\u5ea6\u51fa\u5ea6\u4e4b\u548c \u56db\u3001\u9876\u70b9\u4e0e\u9876\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb \u00b6 \u4e94\u3001\u8fde\u901a\u56fe\u3001\u5f3a\u8fde\u901a\u56fe \u00b6 \u516d\u3001\u5b50\u56fe\u3001\u751f\u6210\u5b50\u56fe \u00b6 \u5b50\u56fe\uff1a\u70b9\u96c6\u662f\u5b50\u96c6\uff0c\u8fb9\u96c6\u662f\u5b50\u96c6 \u751f\u6210\u5b50\u56fe\uff1a\u70b9\u96c6\u4e0d\u53d8\uff0c\u8fb9\u96c6\u662f\u5b50\u96c6\u3002 \u4e03\u3001\u8fde\u901a\u5206\u91cf\u3001\u5f3a\u8fde\u901a\u5206\u91cf \u00b6 \u8fde\u901a\u5206\u91cf\uff1a\u65e0\u5411\u56fe\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe \u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6709\u5411\u56fe\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe \u516b\u3001\u751f\u6210\u6811\u3001\u751f\u6210\u68ee\u6797 \u00b6 \u8fde\u901a\u56fe\u53ef\u4ee5\u751f\u6210\u6811 \u975e\u8fde\u901a\u56fe\u53ef\u4ee5\u751f\u6210\u68ee\u6797 \u4e5d\u3001\u7279\u6b8a\u7684\u56fe \u00b6 \u2460\u65e0\u5411\u5b8c\u5168\u56fe\u3001\u6709\u5411\u5b8c\u5168\u56fe \u65e0\u5411\u5b8c\u5168\u56fe\uff1a\u65e0\u5411\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u8fb9 \u6709\u5411\u5b8c\u5168\u56fe\uff1a\u6709\u5411\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u76f8\u53cd\u7684\u4e24\u6761\u5f27 \u2461\u7a00\u758f\u56fe\u3001\u7a20\u5bc6\u56fe \u7a00\u758f\u56fe\uff1a\u8fb9\u5f88\u5c11\u7684\u56fe \u7a20\u5bc6\u56fe\uff1a\u8fb9\u5f88\u591a\u7684\u56fe \u2462\u6811\u3001\u6709\u5411\u6811 \u6811\uff1a\u4e0d\u5b58\u5728\u56de\u8def\u3001\u4e14\u8fde\u901a\u7684\u65e0\u5411\u56fe \u6709\u5411\u6811\uff1a\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u5176\u4f59\u9876\u70b9\u7684\u5165\u5ea6\u4e3a1 \u7684\u6709\u5411\u56fe","title":"5.1\u56fe"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#graph","text":"","title":"\u56fe\u2014\u2014Graph"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_1","text":"\u56feG \u7531 \u9876\u70b9\u96c6V \u548c \u8fb9\u96c6E \u7ec4\u6210\uff0c\u8bb0 \\( \\(G=(V\uff0cE)\\) \\) \u3002 \\( \\(|V|\\) \\) \u8868\u793a\u56feG\u4e2d\u9876\u70b9\u7684\u4e2a\u6570\uff0c\u4e5f\u79f0\u56feG\u7684\u9636\u3002 \\( \\(|E|\\) \\) \u8868\u793a\u56feG\u4e2d\u8fb9\u7684\u6761\u6570\u3002 \u6ce8\uff1a\u7ebf\u6027\u8868\u53ef\u4ee5\u662f\u7a7a\u8868\uff0c\u6811\u53ef\u4ee5\u662f\u7a7a\u6811\uff0c\u4f46 \u56fe\u4e0d\u53ef\u4ee5\u4e3a\u7a7a \uff0c\u5373V\u4e00\u5b9a\u662f\u975e\u7a7a\u96c6","title":"\u4e00\u3001\u56fe\u7684\u5b9a\u4e49"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_2","text":"\u2460\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\u3002 \u2461\u7b80\u5355\u56fe\u548c\u591a\u91cd\u56fe","title":"\u4e8c\u3001\u56fe\u7684\u5206\u7c7b"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_3","text":"\u65e0\u5411\u56fe\uff1a \u9876\u70b9\u7684\u5ea6=\u8fde\u8be5\u9876\u70b9\u7684\u8fb9\u7684\u6761\u6570 \u65e0\u5165\u5ea6\u51fa\u5ea6\u6982\u5ff5 \u6709\u5411\u56fe\uff1a \u5165\u5ea6=\u6307\u5411\u8be5\u70b9\u7684\u8fb9\u7684\u6761\u6570 \u51fa\u5ea6=\u4ece\u8be5\u70b9\u6307\u5411\u5176\u5b83\u70b9\u7684\u8fb9\u7684\u6761\u6570 \u9876\u70b9\u7684\u5ea6=\u8fde\u8be5\u9876\u70b9\u7684\u8fb9\u7684\u6761\u6570=\u5165\u5ea6\u51fa\u5ea6\u4e4b\u548c","title":"\u4e09\u3001\u9876\u70b9\u7684\u5ea6\uff0c\u5165\u5ea6\u3001\u51fa\u5ea6"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_4","text":"","title":"\u56db\u3001\u9876\u70b9\u4e0e\u9876\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_5","text":"","title":"\u4e94\u3001\u8fde\u901a\u56fe\u3001\u5f3a\u8fde\u901a\u56fe"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_6","text":"\u5b50\u56fe\uff1a\u70b9\u96c6\u662f\u5b50\u96c6\uff0c\u8fb9\u96c6\u662f\u5b50\u96c6 \u751f\u6210\u5b50\u56fe\uff1a\u70b9\u96c6\u4e0d\u53d8\uff0c\u8fb9\u96c6\u662f\u5b50\u96c6\u3002","title":"\u516d\u3001\u5b50\u56fe\u3001\u751f\u6210\u5b50\u56fe"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_7","text":"\u8fde\u901a\u5206\u91cf\uff1a\u65e0\u5411\u56fe\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe \u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6709\u5411\u56fe\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe","title":"\u4e03\u3001\u8fde\u901a\u5206\u91cf\u3001\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_8","text":"\u8fde\u901a\u56fe\u53ef\u4ee5\u751f\u6210\u6811 \u975e\u8fde\u901a\u56fe\u53ef\u4ee5\u751f\u6210\u68ee\u6797","title":"\u516b\u3001\u751f\u6210\u6811\u3001\u751f\u6210\u68ee\u6797"},{"location":"05-%E5%9B%BE/6.1%E5%9B%BE/#_9","text":"\u2460\u65e0\u5411\u5b8c\u5168\u56fe\u3001\u6709\u5411\u5b8c\u5168\u56fe \u65e0\u5411\u5b8c\u5168\u56fe\uff1a\u65e0\u5411\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u8fb9 \u6709\u5411\u5b8c\u5168\u56fe\uff1a\u6709\u5411\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u76f8\u53cd\u7684\u4e24\u6761\u5f27 \u2461\u7a00\u758f\u56fe\u3001\u7a20\u5bc6\u56fe \u7a00\u758f\u56fe\uff1a\u8fb9\u5f88\u5c11\u7684\u56fe \u7a20\u5bc6\u56fe\uff1a\u8fb9\u5f88\u591a\u7684\u56fe \u2462\u6811\u3001\u6709\u5411\u6811 \u6811\uff1a\u4e0d\u5b58\u5728\u56de\u8def\u3001\u4e14\u8fde\u901a\u7684\u65e0\u5411\u56fe \u6709\u5411\u6811\uff1a\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u5176\u4f59\u9876\u70b9\u7684\u5165\u5ea6\u4e3a1 \u7684\u6709\u5411\u56fe","title":"\u4e5d\u3001\u7279\u6b8a\u7684\u56fe"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","text":"\u56fe\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u4e00\u3001\u56fe\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u2460\u9886\u63a5\u77e9\u9635\uff1a\u987a\u5e8f\u5b58\u50a8\uff08\u4e00\u7ef4\u6570\u7ec4\u5b58\u70b9\u7684\u6570\u636e\uff0c\u4e8c\u7ef4\u6570\u7ec4\u5b58\u8fb9\u7684\u8fde\u63a5\u60c5\u51b5\uff09(\u5b58\u50a8\u65e0\u5411\u56fe\u3001\u6709\u5411\u56fe) \u2461\u90bb\u63a5\u8868\uff1a\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff08\u987a\u5e8f\u5b58\u70b9\u7684\u6570\u636e\uff0c\u94fe\u5b58\u8fde\u63a5\u8be5\u70b9\u7684\u8fb9\uff09\uff08\u5b58\u50a8\u6709\u5411\u56fe\u3001\u65e0\u5411\u56fe\uff09 \u2462\u5341\u5b57\u94fe\u8868\uff1a\u94fe\u5f0f\u5b58\u50a8\uff08\u5b58\u50a8\u6709\u5411\u56fe\uff09 \u2463\u90bb\u63a5\u591a\u91cd\u8868\uff1a\u94fe\u5f0f\u5b58\u50a8\uff08\u5b58\u50a8\u65e0\u5411\u56fe\uff09 \u4e8c\u3001\u90bb\u63a5\u77e9\u9635\u6cd5 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^2)\\) \\) \uff0c \u9002\u5408\u5b58\u7a20\u5bc6\u56fe \u65e0\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635 \u662f \u5bf9\u79f0\u77e9\u9635 \uff0c\u53ef\u4ee5 \u538b\u7f29\u5b58\u50a8 \uff0c\u89c13.6 \u6027\u8d28 \uff1a \\( \\(A\\) \\) \u4e3a\u56fe \\( \\(G\\) \\) \u7684\u90bb\u63a5\u77e9\u9635\uff0c\u5219 \\( \\(A^n\\) \\) \u7684\u5143\u7d20 \\( \\(A^n[i][j]\\) \\) = \u9876\u70b9i\u5230\u9876\u70b9j\u7684\u957f\u5ea6\u4e3an\u7684\u8def\u5f84\u7684\u6570\u76ee \u8ba1\u7b97\u5ea6\u3001\u5165\u5ea6\u3001\u51fa\u5ea6 \uff1a\u5fc5\u987b\u904d\u5386\u5bf9\u5e94\u7684\u884c\u6216\u5217\u3002 \u627e\u76f8\u90bb\u7684\u8fb9 \uff1a\u5fc5\u987b\u904d\u5386\u5bf9\u5e94\u7684\u884c\u6216\u5217\u3002 1.1\u666e\u901a\u56fe\u7684\u9886\u63a5\u77e9\u9635\u6cd5\uff1a \u00b6 #define MaxVertexNum 100 //\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c typedef struct { char Vex [ MaxVertexNum ]; //\u9876\u70b9\u8868\uff1a\u5b58\u6bcf\u4e2a\u70b9\u7684\u6570\u636e int Edge [ MaxVertexNum ][ MaxVertexNum ]; //\u90bb\u63a5\u77e9\u9635\uff0c\u8fb9\u8868\uff1a\u5b58\u8fb9\u7684\u8fde\u63a5\u60c5\u51b5 int vexnum , arcnum ; //\u56fe\u5f53\u524d\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\uff08\u5f27\u6570\uff09 } MGraph ; \u8fb9\u53ef\u4ee5\u662fint\uff0cbool\u6216\u679a\u4e3e\u578b\u53d8\u91cf\u3002 1.2\u666e\u901a\u56fe\u7684\u5ea6\u3001\u5165\u5ea6\u3001\u51fa\u5ea6 \u00b6 \u67d0\u70b9\u7684\u5ea6\uff1a\u67d0\u70b9\u7684\u8fb9\u6570 \u65e0\u5411\u56fe\uff1a \u7b2ci\u4e2a\u7ed3\u70b9\u7684\u5ea6 = \u7b2ci\u884c(\u7b2ci\u5217) \u7684 \u975e\u96f6\u5143\u7d20 \u4e2a\u6570\u3002 \u6709\u5411\u56fe\uff1a \u7b2ci\u4e2a\u7ed3\u70b9\u7684\u51fa\u5ea6 = \u7b2ci\u884c \u7684 \u975e\u96f6\u5143\u7d20 \u4e2a\u6570\u3002 \u7b2ci\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6 = \u7b2ci\u5217 \u7684 \u975e\u96f6\u5143\u7d20 \u4e2a\u6570\u3002 \u7b2ci\u4e2a\u7ed3\u70b9\u7684\u5ea6 = \u7b2ci\u884c\u3001\u7b2ci\u5217 \u7684 \u975e\u96f6\u5143\u7d20 \u4e2a\u6570 \u4e4b\u548c \u3002 \u6c42\u9876\u70b9\u7684\u5ea6\u3001\u5165\u5ea6\u3001\u51fa\u5ea6\u7684 \u65f6\u95f4\u590d\u6742\u5ea6 =O( \\( \\(|V|\\) \\) ) 2.\u5e26\u6743\u56fe\u7684\u9886\u63a5\u77e9\u9635\u6cd5 \u00b6 #define MaxVertexNum 100 //\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c #define INFINITY 4294967295 //\u5b8f\u5b9a\u4e49\u5e38\u91cf\u201c\u65e0\u7a77\u201d\uff0c4294967295\u4e3a\u6700\u5927\u7684int\u503c typedef char VertexType ; //\u9876\u70b9\u7684\u6570\u636e\u7c7b\u578b typedef int EdgeType ; //\u8fb9\u7684\u6570\u636e\u7c7b\u578b typedef struct { VertexType Vex [ MaxVertexNum ]; //\u9876\u70b9\u8868\uff1a\u5b58\u6bcf\u4e2a\u70b9\u7684\u6570\u636e EdgeType Edge [ MaxVertexNum ][ MaxVertexNum ]; //\u90bb\u63a5\u77e9\u9635\uff0c\u8fb9\u8868\uff1a\u5b58\u8fb9\u7684\u8fde\u63a5\u60c5\u51b5 int vexnum , arcnum ; //\u56fe\u5f53\u524d\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\uff08\u5f27\u6570\uff09 } MGraph ; \u4e09\u3001\u90bb\u63a5\u8868\u6cd5 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a\u65e0\u5411\u56fe\u4e3a \\( \\(O(|V|+2|E|)\\) \\) \uff0c\u6709\u5411\u56fe\u4e3a \\( \\(O(|V|+|E|)\\) \\) \uff0c \u9002\u5408\u5b58\u7a00\u758f\u56fe \u8868\u793a\u65b9\u5f0f\u4e0d\u552f\u4e00 \u90bb\u63a5\u77e9\u9635\u964d\u4f4e\u4e86\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u4f7f\u64cd\u4f5c\u4e0d\u65b9\u4fbf\u4e86\uff1a \u8ba1\u7b97\u5ea6\u3001\u5165\u5ea6\u3001\u51fa\u5ea6 \uff1a\u8ba1\u7b97\u6709\u5411\u56fe\u7684\u5ea6\u3001\u5165\u5ea6\u4e0d\u65b9\u4fbf\uff0c\u5176\u4f59\u5f88\u65b9\u4fbf\u3002 \u627e\u76f8\u90bb\u7684\u8fb9 \uff1a\u627e\u6709\u5411\u56fe\u7684\u5165\u8fb9\u4e0d\u65b9\u4fbf\u3002 \u56fe\u7684\u7c7b\u578b\u63cf\u8ff0\uff1a \u00b6 \u4e0e\u6811\u7684\u5b69\u5b50\u8868\u793a\u6cd5\u5f88\u50cf #define MaxVertexNum 100 //\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c //\"\u8fb9\uff08\u5f27\uff09\" typedef struct ArcNode { int adjvex ; //\u8fb9\uff08\u5f27\uff09\u6307\u5411\u90a3\u4e2a\u7ed3\u70b9 struct ArcNode * next ; //\u6307\u5411\u4e0b\u4e00\u6761\u5f27\u7684\u6307\u9488 //InfoType info; //\u8fb9\u6743\u503c } ArcNode ; //\"\u9876\u70b9\" typedef struct VNode { VertexType data ; //\u9876\u70b9\u6570\u636e ArcNode * first ; //\u9876\u70b9\u6307\u5411\u7684\u7b2c\u4e00\u6761\u8fb9 } VNode , AdjList [ MaxVertexNum ]; //\u7528\u9886\u63a5\u8868\u5b58\u50a8\u56fe typedef struct { AdjList vertices ; //\u9876\u70b9\u6570\u7ec4 int vernum , arcnum ; ////\u56fe\u5f53\u524d\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\uff08\u5f27\u6570\uff09 } ALGraph ; \u56db\u3001\u5341\u5b57\u94fe\u8868\u6cd5 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a \\( \\(O(|V|+|E|)\\) \\) \uff0c\u4e0e\u90bb\u63a5\u8868\u6cd5\u4e00\u6837 \u89e3\u51b3\u4e86\u90bb\u63a5\u8868\u6cd5\u7684\u627e\u5165\u8fb9\u96be\u7684\u95ee\u9898\u3002 \u4e94\u3001\u90bb\u63a5\u591a\u91cd\u8868 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a \\( \\(O(|V|+|E|)\\) \\) \uff0c\u6bd4\u90bb\u63a5\u8868\u6cd5\u7684 \\( \\(O(|V|+2|E|)\\) \\) \u597d \u89e3\u51b3\u4e86\u90bb\u63a5\u8868\u6cd5\u5b58\u4e24\u904d\u8fb9\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002 \u5220\u9664\u8fb9\u3001\u5220\u9664\u7ed3\u70b9\u7b49\u64cd\u4f5c\u5f88\u65b9\u4fbf\u3002","title":"5.2\u56fe\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u56fe\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_2","text":"\u2460\u9886\u63a5\u77e9\u9635\uff1a\u987a\u5e8f\u5b58\u50a8\uff08\u4e00\u7ef4\u6570\u7ec4\u5b58\u70b9\u7684\u6570\u636e\uff0c\u4e8c\u7ef4\u6570\u7ec4\u5b58\u8fb9\u7684\u8fde\u63a5\u60c5\u51b5\uff09(\u5b58\u50a8\u65e0\u5411\u56fe\u3001\u6709\u5411\u56fe) \u2461\u90bb\u63a5\u8868\uff1a\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff08\u987a\u5e8f\u5b58\u70b9\u7684\u6570\u636e\uff0c\u94fe\u5b58\u8fde\u63a5\u8be5\u70b9\u7684\u8fb9\uff09\uff08\u5b58\u50a8\u6709\u5411\u56fe\u3001\u65e0\u5411\u56fe\uff09 \u2462\u5341\u5b57\u94fe\u8868\uff1a\u94fe\u5f0f\u5b58\u50a8\uff08\u5b58\u50a8\u6709\u5411\u56fe\uff09 \u2463\u90bb\u63a5\u591a\u91cd\u8868\uff1a\u94fe\u5f0f\u5b58\u50a8\uff08\u5b58\u50a8\u65e0\u5411\u56fe\uff09","title":"\u4e00\u3001\u56fe\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_3","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^2)\\) \\) \uff0c \u9002\u5408\u5b58\u7a20\u5bc6\u56fe \u65e0\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635 \u662f \u5bf9\u79f0\u77e9\u9635 \uff0c\u53ef\u4ee5 \u538b\u7f29\u5b58\u50a8 \uff0c\u89c13.6 \u6027\u8d28 \uff1a \\( \\(A\\) \\) \u4e3a\u56fe \\( \\(G\\) \\) \u7684\u90bb\u63a5\u77e9\u9635\uff0c\u5219 \\( \\(A^n\\) \\) \u7684\u5143\u7d20 \\( \\(A^n[i][j]\\) \\) = \u9876\u70b9i\u5230\u9876\u70b9j\u7684\u957f\u5ea6\u4e3an\u7684\u8def\u5f84\u7684\u6570\u76ee \u8ba1\u7b97\u5ea6\u3001\u5165\u5ea6\u3001\u51fa\u5ea6 \uff1a\u5fc5\u987b\u904d\u5386\u5bf9\u5e94\u7684\u884c\u6216\u5217\u3002 \u627e\u76f8\u90bb\u7684\u8fb9 \uff1a\u5fc5\u987b\u904d\u5386\u5bf9\u5e94\u7684\u884c\u6216\u5217\u3002","title":"\u4e8c\u3001\u90bb\u63a5\u77e9\u9635\u6cd5"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#11","text":"#define MaxVertexNum 100 //\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c typedef struct { char Vex [ MaxVertexNum ]; //\u9876\u70b9\u8868\uff1a\u5b58\u6bcf\u4e2a\u70b9\u7684\u6570\u636e int Edge [ MaxVertexNum ][ MaxVertexNum ]; //\u90bb\u63a5\u77e9\u9635\uff0c\u8fb9\u8868\uff1a\u5b58\u8fb9\u7684\u8fde\u63a5\u60c5\u51b5 int vexnum , arcnum ; //\u56fe\u5f53\u524d\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\uff08\u5f27\u6570\uff09 } MGraph ; \u8fb9\u53ef\u4ee5\u662fint\uff0cbool\u6216\u679a\u4e3e\u578b\u53d8\u91cf\u3002","title":"1.1\u666e\u901a\u56fe\u7684\u9886\u63a5\u77e9\u9635\u6cd5\uff1a"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#12","text":"\u67d0\u70b9\u7684\u5ea6\uff1a\u67d0\u70b9\u7684\u8fb9\u6570 \u65e0\u5411\u56fe\uff1a \u7b2ci\u4e2a\u7ed3\u70b9\u7684\u5ea6 = \u7b2ci\u884c(\u7b2ci\u5217) \u7684 \u975e\u96f6\u5143\u7d20 \u4e2a\u6570\u3002 \u6709\u5411\u56fe\uff1a \u7b2ci\u4e2a\u7ed3\u70b9\u7684\u51fa\u5ea6 = \u7b2ci\u884c \u7684 \u975e\u96f6\u5143\u7d20 \u4e2a\u6570\u3002 \u7b2ci\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6 = \u7b2ci\u5217 \u7684 \u975e\u96f6\u5143\u7d20 \u4e2a\u6570\u3002 \u7b2ci\u4e2a\u7ed3\u70b9\u7684\u5ea6 = \u7b2ci\u884c\u3001\u7b2ci\u5217 \u7684 \u975e\u96f6\u5143\u7d20 \u4e2a\u6570 \u4e4b\u548c \u3002 \u6c42\u9876\u70b9\u7684\u5ea6\u3001\u5165\u5ea6\u3001\u51fa\u5ea6\u7684 \u65f6\u95f4\u590d\u6742\u5ea6 =O( \\( \\(|V|\\) \\) )","title":"1.2\u666e\u901a\u56fe\u7684\u5ea6\u3001\u5165\u5ea6\u3001\u51fa\u5ea6"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#2","text":"#define MaxVertexNum 100 //\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c #define INFINITY 4294967295 //\u5b8f\u5b9a\u4e49\u5e38\u91cf\u201c\u65e0\u7a77\u201d\uff0c4294967295\u4e3a\u6700\u5927\u7684int\u503c typedef char VertexType ; //\u9876\u70b9\u7684\u6570\u636e\u7c7b\u578b typedef int EdgeType ; //\u8fb9\u7684\u6570\u636e\u7c7b\u578b typedef struct { VertexType Vex [ MaxVertexNum ]; //\u9876\u70b9\u8868\uff1a\u5b58\u6bcf\u4e2a\u70b9\u7684\u6570\u636e EdgeType Edge [ MaxVertexNum ][ MaxVertexNum ]; //\u90bb\u63a5\u77e9\u9635\uff0c\u8fb9\u8868\uff1a\u5b58\u8fb9\u7684\u8fde\u63a5\u60c5\u51b5 int vexnum , arcnum ; //\u56fe\u5f53\u524d\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\uff08\u5f27\u6570\uff09 } MGraph ;","title":"2.\u5e26\u6743\u56fe\u7684\u9886\u63a5\u77e9\u9635\u6cd5"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_4","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a\u65e0\u5411\u56fe\u4e3a \\( \\(O(|V|+2|E|)\\) \\) \uff0c\u6709\u5411\u56fe\u4e3a \\( \\(O(|V|+|E|)\\) \\) \uff0c \u9002\u5408\u5b58\u7a00\u758f\u56fe \u8868\u793a\u65b9\u5f0f\u4e0d\u552f\u4e00 \u90bb\u63a5\u77e9\u9635\u964d\u4f4e\u4e86\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u4f7f\u64cd\u4f5c\u4e0d\u65b9\u4fbf\u4e86\uff1a \u8ba1\u7b97\u5ea6\u3001\u5165\u5ea6\u3001\u51fa\u5ea6 \uff1a\u8ba1\u7b97\u6709\u5411\u56fe\u7684\u5ea6\u3001\u5165\u5ea6\u4e0d\u65b9\u4fbf\uff0c\u5176\u4f59\u5f88\u65b9\u4fbf\u3002 \u627e\u76f8\u90bb\u7684\u8fb9 \uff1a\u627e\u6709\u5411\u56fe\u7684\u5165\u8fb9\u4e0d\u65b9\u4fbf\u3002","title":"\u4e09\u3001\u90bb\u63a5\u8868\u6cd5"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_5","text":"\u4e0e\u6811\u7684\u5b69\u5b50\u8868\u793a\u6cd5\u5f88\u50cf #define MaxVertexNum 100 //\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c //\"\u8fb9\uff08\u5f27\uff09\" typedef struct ArcNode { int adjvex ; //\u8fb9\uff08\u5f27\uff09\u6307\u5411\u90a3\u4e2a\u7ed3\u70b9 struct ArcNode * next ; //\u6307\u5411\u4e0b\u4e00\u6761\u5f27\u7684\u6307\u9488 //InfoType info; //\u8fb9\u6743\u503c } ArcNode ; //\"\u9876\u70b9\" typedef struct VNode { VertexType data ; //\u9876\u70b9\u6570\u636e ArcNode * first ; //\u9876\u70b9\u6307\u5411\u7684\u7b2c\u4e00\u6761\u8fb9 } VNode , AdjList [ MaxVertexNum ]; //\u7528\u9886\u63a5\u8868\u5b58\u50a8\u56fe typedef struct { AdjList vertices ; //\u9876\u70b9\u6570\u7ec4 int vernum , arcnum ; ////\u56fe\u5f53\u524d\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\uff08\u5f27\u6570\uff09 } ALGraph ;","title":"\u56fe\u7684\u7c7b\u578b\u63cf\u8ff0\uff1a"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_6","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a \\( \\(O(|V|+|E|)\\) \\) \uff0c\u4e0e\u90bb\u63a5\u8868\u6cd5\u4e00\u6837 \u89e3\u51b3\u4e86\u90bb\u63a5\u8868\u6cd5\u7684\u627e\u5165\u8fb9\u96be\u7684\u95ee\u9898\u3002","title":"\u56db\u3001\u5341\u5b57\u94fe\u8868\u6cd5"},{"location":"05-%E5%9B%BE/6.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/#_7","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a \\( \\(O(|V|+|E|)\\) \\) \uff0c\u6bd4\u90bb\u63a5\u8868\u6cd5\u7684 \\( \\(O(|V|+2|E|)\\) \\) \u597d \u89e3\u51b3\u4e86\u90bb\u63a5\u8868\u6cd5\u5b58\u4e24\u904d\u8fb9\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002 \u5220\u9664\u8fb9\u3001\u5220\u9664\u7ed3\u70b9\u7b49\u64cd\u4f5c\u5f88\u65b9\u4fbf\u3002","title":"\u4e94\u3001\u90bb\u63a5\u591a\u91cd\u8868"},{"location":"05-%E5%9B%BE/6.3%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","text":"\u56fe\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 //\u56fe\u7684\u57fa\u672c\u64cd\u4f5c Adjacent ( G , x , y ); //\u5224\u65ad\u56feG\u662f\u5426\u5b58\u5728\u8fb9<x,y>\u6216(x,y)\u3002 Neighbors ( G , x ); //\u5217\u51fa\u56feG\u4e2d\u4e0e\u7ed3\u70b9x\u90bb\u63a5\u7684\u8fb9\u3002 InsertVertex ( G , x ); //\u5728\u56feG\u4e2d\u63d2\u5165\u9876\u70b9x\u3002 DeleteVertex ( G , x ); //\u4ece\u56feG\u4e2d\u5220\u9664\u9876\u70b9x\u3002 AddEdge ( G , x , y ); //\u82e5\u65e0\u5411\u8fb9(x,y)\u6216\u6709\u5411\u8fb9<x,y>\u4e0d\u5b58\u5728\uff0c\u5219\u5411\u56feG\u4e2d\u6dfb\u52a0\u8be5\u8fb9\u3002 RemoveEdge ( G , x , y ); //\u82e5\u65e0\u5411\u8fb9(x,y)\u6216\u6709\u5411\u8fb9<x,y>\u5b58\u5728\uff0c\u5219\u4ece\u56feG\u4e2d\u5220\u9664\u8be5\u8fb9\u3002 FirstNeighbor ( G , x ); //\u6c42\u56feG\u4e2d\u9876\u70b9x\u7684\u7b2c\u4e00\u4e2a\u90bb\u63a5\u70b9\uff0c\u82e5\u6709\u5219\u8fd4\u56de\u9876\u70b9\u53f7\u3002\u82e5x\u6ca1\u6709\u90bb\u63a5\u70b9\u6216\u56fe\u4e2d\u4e0d\u5b58\u5728x\uff0c\u5219\u8fd4\u56de-1\u3002 NextNeighbor ( G , x , y ); //\u5047\u8bbe\u56feG\u4e2d\u9876\u70b9y\u662f\u9876\u70b9x\u7684\u4e00\u4e2a\u90bb\u63a5\u70b9\uff0c\u8fd4\u56de\u9664y\u4e4b\u5916\u9876\u70b9x\u7684\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\u7684\u9876\u70b9\u53f7\uff0c\u82e5y\u662fx\u7684\u6700\u540e\u4e00\u4e2a\u90bb\u63a5\u70b9\uff0c\u5219\u8fd4\u56de-1\u3002 Get_edge_value ( G , x , y ); //\u83b7\u53d6\u56feG\u4e2d\u8fb9(x,y)\u6216<x,y>\u5bf9\u5e94\u7684\u6743\u503c\u3002 Set_edge_value ( G , x , y , v ); //\u8bbe\u7f6e\u56feG\u4e2d\u8fb9(x,y)\u6216<x,y>\u5bf9\u5e94\u7684\u6743\u503c\u4e3av\u3002 \u56fe\u7684\u904d\u5386\u4e2d\u76f4\u63a5\u8c03\u7528FirstNeighbor(G, x);\u548cNextNeighbor(G, x, y);","title":"5.3\u56fe\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"05-%E5%9B%BE/6.3%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#_1","text":"//\u56fe\u7684\u57fa\u672c\u64cd\u4f5c Adjacent ( G , x , y ); //\u5224\u65ad\u56feG\u662f\u5426\u5b58\u5728\u8fb9<x,y>\u6216(x,y)\u3002 Neighbors ( G , x ); //\u5217\u51fa\u56feG\u4e2d\u4e0e\u7ed3\u70b9x\u90bb\u63a5\u7684\u8fb9\u3002 InsertVertex ( G , x ); //\u5728\u56feG\u4e2d\u63d2\u5165\u9876\u70b9x\u3002 DeleteVertex ( G , x ); //\u4ece\u56feG\u4e2d\u5220\u9664\u9876\u70b9x\u3002 AddEdge ( G , x , y ); //\u82e5\u65e0\u5411\u8fb9(x,y)\u6216\u6709\u5411\u8fb9<x,y>\u4e0d\u5b58\u5728\uff0c\u5219\u5411\u56feG\u4e2d\u6dfb\u52a0\u8be5\u8fb9\u3002 RemoveEdge ( G , x , y ); //\u82e5\u65e0\u5411\u8fb9(x,y)\u6216\u6709\u5411\u8fb9<x,y>\u5b58\u5728\uff0c\u5219\u4ece\u56feG\u4e2d\u5220\u9664\u8be5\u8fb9\u3002 FirstNeighbor ( G , x ); //\u6c42\u56feG\u4e2d\u9876\u70b9x\u7684\u7b2c\u4e00\u4e2a\u90bb\u63a5\u70b9\uff0c\u82e5\u6709\u5219\u8fd4\u56de\u9876\u70b9\u53f7\u3002\u82e5x\u6ca1\u6709\u90bb\u63a5\u70b9\u6216\u56fe\u4e2d\u4e0d\u5b58\u5728x\uff0c\u5219\u8fd4\u56de-1\u3002 NextNeighbor ( G , x , y ); //\u5047\u8bbe\u56feG\u4e2d\u9876\u70b9y\u662f\u9876\u70b9x\u7684\u4e00\u4e2a\u90bb\u63a5\u70b9\uff0c\u8fd4\u56de\u9664y\u4e4b\u5916\u9876\u70b9x\u7684\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\u7684\u9876\u70b9\u53f7\uff0c\u82e5y\u662fx\u7684\u6700\u540e\u4e00\u4e2a\u90bb\u63a5\u70b9\uff0c\u5219\u8fd4\u56de-1\u3002 Get_edge_value ( G , x , y ); //\u83b7\u53d6\u56feG\u4e2d\u8fb9(x,y)\u6216<x,y>\u5bf9\u5e94\u7684\u6743\u503c\u3002 Set_edge_value ( G , x , y , v ); //\u8bbe\u7f6e\u56feG\u4e2d\u8fb9(x,y)\u6216<x,y>\u5bf9\u5e94\u7684\u6743\u503c\u4e3av\u3002 \u56fe\u7684\u904d\u5386\u4e2d\u76f4\u63a5\u8c03\u7528FirstNeighbor(G, x);\u548cNextNeighbor(G, x, y);","title":"\u56fe\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/","text":"\u56fe\u7684\u904d\u5386 \u00b6 \u4e00\u3001\u56fe\u7684\u904d\u5386 \u00b6 \u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3001\u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u4e8c\u3001\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08BFS\uff09 \u00b6 \u4e0e \u6811 \u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08 \u5c42\u6b21\u904d\u5386 \uff09\u5f88\u50cf\u3002 \u9700\u8981\u4e00\u4e2a \u8f85\u52a9\u94fe\u961f\u5217 \u3002 \u6811\u7684\u5c42\u6b21\u904d\u5386\u7684\u7b97\u6cd5\u601d\u60f3\uff1a \u2460\u521d\u59cb\u5316\u4e00\u4e2a\u8f85\u52a9\u961f\u5217\uff08\u94fe\u961f\u5217\uff09 \u2461\u6839\u7ed3\u70b9\u5165\u961f \u2462\u82e5\u961f\u5217\u975e\u7a7a\uff0c\u5219\u961f\u5934\u7ed3\u70b9\u51fa\u961f\uff0c\u8bbf\u95ee\u8be5\u7ed3\u70b9\u5e76\u5c06\u5176 \u5de6\u3001\u53f3\u5b69\u5b50 \u63d2\u5165\u961f\u5c3e(\u5982\u679c\u6709\u7684\u8bdd) \u2463\u91cd\u590d\u2462\u76f4\u81f3\u961f\u5217\u4e3a\u7a7a \u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u7b97\u6cd5\u601d\u60f3\uff1a \u2460\u521d\u59cb\u5316\u4e00\u4e2a\u8f85\u52a9\u961f\u5217\uff08\u94fe\u961f\u5217\uff09 \u2461\u7ed3\u70b9\u5165\u961f \u2462\u82e5\u961f\u5217\u975e\u7a7a\uff0c\u5219\u961f\u5934\u7ed3\u70b9\u51fa\u961f\uff0c\u8bbf\u95ee\u8be5\u7ed3\u70b9\u5e76\u5c06\u5176 \u76f8\u90bb\u9876\u70b9 \u63d2\u5165\u961f\u5c3e(\u5982\u679c\u6709\u7684\u8bdd) \u2463\u91cd\u590d\u2462\u76f4\u81f3\u961f\u5217\u4e3a\u7a7a \u6811\u6ca1\u6709\u56de\u8def\uff0c\u4e0d\u53ef\u80fd\u641c\u5230\u5df2\u8bbf\u95ee\u7ed3\u70b9 \u56fe\u6709\u53ef\u80fd\u641c\u7d22\u5230\u5df2\u8bbf\u95ee\u7684\u7ed3\u70b9 \u89e3\u51b3\u65b9\u6cd5\uff1a \u7528\u4e00\u4e2a\u6570\u7ec4\u6807\u8bb0\u9876\u70b9\u7684\u8bbf\u95ee \u94fe\u961f\u5217 \u00b6 //\u7c7b\u578b\u63cf\u8ff0 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b ElemType data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode ; typedef struct { LNode * front , * rear ; } LinkQueue ; \u4ee3\u7801 \u00b6 //\u6811\u7684\u5c42\u6b21\u904d\u5386\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\uff08\u7528\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09 void LevelOrder ( BiTree T ){ LinkQueue Q ; InitQueue ( Q ); BiTree p ; //T\u4e3a\u6839\u7ed3\u70b9\uff0cp\u4e5f\u662f\u6839\u7ed3\u70b9\uff0c\u4fdd\u8bc1\u6839\u51fa\u961f\u540e\u53ef\u4ee5\u6307\u5411\u5b69\u5b50\uff0c\u56e0\u4e3aT\u51fa\u961f\u540e\uff0cT->lchild\u65e0\u6548 EnQueue ( Q , T ); //\u6839\u7ed3\u70b9\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , T ); //\u6839\u7ed3\u70b9\u51fa\u961f if ( p -> lchild != NULL ) EnQueue ( Q , p -> lchild ); //\u5de6\u7ed3\u70b9\u5165\u961f if ( p -> rchild != NULL ) EnQueue ( Q , p -> rchild ); //\u53f3\u7ed3\u70b9\u5165\u961f } } //\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u7528\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u3001\u9886\u63a5\u8868\u90fd\u53ef\u4ee5\uff0c\u53ea\u662fFirstNeighbor\u548cNextNeighbor\u51fd\u6570\u5b9e\u73b0\u4e0d\u4e00\u6837\uff09 bool visited [ MAX_VERTEX_NUM ]; //\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 void BFSTraverse ( Graph G ){ //\u5bf9\u56feG\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 for ( v = 0 ; v < G . vexnum ; ++ v ){ visited [ v ] = false ; //\u521d\u59cb\u5316\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 } InitQueue ( Q ); //\u521d\u59cb\u5316\u8f85\u52a9\u961f\u5217Q for ( v = 0 ; v < G . vexnum ; ++ v ){ if ( ! visited [ v ]){ //\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u8c03\u7528\u4e00\u6b21BFS BFS ( G , v ); //vi\u6ca1\u8bbf\u95ee\u8fc7\uff0c\u4ecevi\u5f00\u59cbBFS } } } void BFS ( Graph G , int v ){ visit ( v ); //\u8bbf\u95ee\u521d\u59cb\u9876\u70b9v visited [ v ] = true ; //\u5bf9v\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , v ); //\u9876\u70b9v\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , v ); //\u9876\u70b9v\u51fa\u961f for ( w = FirstNeighbor ( G , v ); w >= 0 ; w = NextNeighbor ( G , v , w )){ //\u68c0\u6d4bv\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9 if ( ! visited [ w ]){ //w\u4e3av\u5c1a\u672a\u8bbf\u95ee\u7684\u90bb\u63a5\u9876\u70b9 visit ( w ); //\u8bbf\u95ee\u9876\u70b9w visited [ w ] = true ; //\u5bf9w\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , w ); //\u9876\u70b9w\u5165\u961f } } } } \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \u90bb\u63a5\u77e9\u9635 = \\( \\(O(|V|^2)\\) \\) \uff0c \u90bb\u63a5\u8868 = \\( \\(O(|V|+|E|)\\) \\) \u539f\u7406\uff1a \u90bb\u63a5\u77e9\u9635\uff1a\u8bbf\u95ee\u70b9= \\( \\(O(|V|)\\) \\) \uff0c\u8bbf\u95ee\u8fb9= \\( \\(O(|V|^2)\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(|V|^2)=O(|V|^2)\\) \\) \u90bb\u63a5\u8868\uff1a\u8bbf\u95ee\u70b9= \\( \\(O(|V|)\\) \\) \uff0c\u8bbf\u95ee\u65e0\u5411\u8fb9= \\( \\(O(2|E|)\\) \\) \uff0c\u8bbf\u95ee\u65e0\u5411\u8fb9= \\( \\(O(|E|)\\) \\) \uff0c \u65e0\u5411\u56fe \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(2|E|)=O(|V|+|E|)\\) \\) \u6709\u5411\u56fe \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(|E|)=O(|V|+|E|)\\) \\) \u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u6811\u3001\u68ee\u6797 \u00b6 \u8fde\u901a\u56fe\u751f\u6210\u6811\uff0c\u975e\u8fde\u901a\u56fe\u751f\u68ee\u6797 \u7531\u4e8e\u9886\u63a5\u77e9\u9635\u8868\u793a\u6cd5\u552f\u4e00\uff0c\u9886\u63a5\u8868\u6cd5\u8868\u793a\u4e0d\u552f\u4e00 \u5bfc\u81f4\u90bb\u63a5\u77e9\u9635\u751f\u6210\u6811\u552f\u4e00\uff0c\u9886\u63a5\u8868\u751f\u6210\u6811\u4e0d\u552f\u4e00 \u4e09\u3001\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09 \u00b6 \u4ee3\u7801 \u00b6 \u4e0e \u6811 \u7684 \u5148\u5e8f\u904d\u5386 \u5f88\u50cf\u3002 //\u6811\u7684\u5148\u5e8f\u904d\u5386\uff08\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff09\uff08\u7528\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09 void PreOrder ( BiTree T ){ if ( T != NULL ){ visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 PreOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 PreOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } //\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u7528\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u3001\u9886\u63a5\u8868\u90fd\u53ef\u4ee5\uff0c\u53ea\u662fFirstNeighbor\u548cNextNeighbor\u51fd\u6570\u5b9e\u73b0\u4e0d\u4e00\u6837\uff09 bool visited [ MAX_VERTEX_NUM ]; //\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 void BFSTraverse ( Graph G ){ //\u5bf9\u56feG\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 for ( v = 0 ; v < G . vexnum ; ++ v ){ visited [ v ] = false ; //\u521d\u59cb\u5316\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 } for ( v = 0 ; v < G . vexnum ; ++ v ){ if ( ! visited [ v ]){ //\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u8c03\u7528\u4e00\u6b21BFS BFS ( G , v ); //vi\u6ca1\u8bbf\u95ee\u8fc7\uff0c\u4ecevi\u5f00\u59cbBFS } } } void DFS ( Graph G , int v ){ visit ( v ); //\u8bbf\u95ee\u521d\u59cb\u9876\u70b9v visited [ v ] = true ; //\u5bf9v\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 for ( w = FirstNeighbor ( G , v ); w >= 0 ; w = NextNeighbor ( G , v , w )){ //\u68c0\u6d4bv\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9 if ( ! visit [ w ]){ //w\u4e3av\u5c1a\u672a\u8bbf\u95ee\u7684\u90bb\u63a5\u9876\u70b9 DFS ( G , w ); } } } \u590d\u6742\u5ea6\u5206\u6790\uff08\u4e0eBFS\u4e00\u6837\uff09 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|)\\) \\) \uff0c\u6765\u81ea\u9012\u5f52\u5de5\u4f5c\u7ad9 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \u90bb\u63a5\u77e9\u9635 = \\( \\(O(|V|^2)\\) \\) \uff0c \u90bb\u63a5\u8868 = \\( \\(O(|V|+|E|)\\) \\) \u539f\u7406\uff1a \u90bb\u63a5\u77e9\u9635\uff1a\u8bbf\u95ee\u70b9= \\( \\(O(|V|)\\) \\) \uff0c\u8bbf\u95ee\u8fb9= \\( \\(O(|V|^2)\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(|V|^2)=O(|V|^2)\\) \\) \u90bb\u63a5\u8868\uff1a\u8bbf\u95ee\u70b9= \\( \\(O(|V|)\\) \\) \uff0c\u8bbf\u95ee\u65e0\u5411\u8fb9= \\( \\(O(2|E|)\\) \\) \uff0c\u8bbf\u95ee\u65e0\u5411\u8fb9= \\( \\(O(|E|)\\) \\) \uff0c \u65e0\u5411\u56fe \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(2|E|)=O(|V|+|E|)\\) \\) \u6709\u5411\u56fe \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(|E|)=O(|V|+|E|)\\) \\) \u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811\u3001\u68ee\u6797\uff08\u4e0eBFS\u4e00\u6837\uff09 \u00b6 \u8fde\u901a\u56fe\u751f\u6210\u6811\uff0c\u975e\u8fde\u901a\u56fe\u751f\u68ee\u6797 \u7531\u4e8e\u9886\u63a5\u77e9\u9635\u8868\u793a\u6cd5\u552f\u4e00\uff0c\u9886\u63a5\u8868\u6cd5\u8868\u793a\u4e0d\u552f\u4e00 \u5bfc\u81f4\u90bb\u63a5\u77e9\u9635\u751f\u6210\u6811\u552f\u4e00\uff0c\u9886\u63a5\u8868\u751f\u6210\u6811\u4e0d\u552f\u4e00 \u56db\u3001\u56fe\u7684\u904d\u5386\u4e0e\u56fe\u7684\u8fde\u901a\u6027 \u00b6 \u65e0\u5411\u56fe \u8fdb\u884cBFS/DFS\u904d\u5386\uff1a \u8c03\u7528BFS/DFS\u6b21\u6570=\u8fde\u901a\u5206\u91cf\u6570 \u8fde\u901a\u56fe\u53ea\u9700\u8c03\u7528\u4e00\u6b21BFS/DFS \u6709\u5411\u56fe \u8fdb\u884cBFS/DFS\u904d\u5386\uff1a\u8981\u5177\u4f53\u5206\u6790 \u82e5\u8d77\u59cb\u9876\u70b9\u5230\u5176\u5b83\u9876\u70b9\u90fd\u6709\u8def\u5f84\uff0c\u5219\u53ea\u9700\u8c03\u7528\u4e00\u6b21 \u5f3a\u8fde\u901a\u56fe\u4ece\u4efb\u610f\u7ed3\u70b9\u90fd\u53ea\u9700\u8c03\u7528\u4e00\u6b21BFS/DFS","title":"5.4\u56fe\u7684\u904d\u5386(BFS\u3001DFS)"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#_1","text":"","title":"\u56fe\u7684\u904d\u5386"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#_2","text":"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3001\u6df1\u5ea6\u4f18\u5148\u904d\u5386","title":"\u4e00\u3001\u56fe\u7684\u904d\u5386"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#bfs","text":"\u4e0e \u6811 \u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08 \u5c42\u6b21\u904d\u5386 \uff09\u5f88\u50cf\u3002 \u9700\u8981\u4e00\u4e2a \u8f85\u52a9\u94fe\u961f\u5217 \u3002 \u6811\u7684\u5c42\u6b21\u904d\u5386\u7684\u7b97\u6cd5\u601d\u60f3\uff1a \u2460\u521d\u59cb\u5316\u4e00\u4e2a\u8f85\u52a9\u961f\u5217\uff08\u94fe\u961f\u5217\uff09 \u2461\u6839\u7ed3\u70b9\u5165\u961f \u2462\u82e5\u961f\u5217\u975e\u7a7a\uff0c\u5219\u961f\u5934\u7ed3\u70b9\u51fa\u961f\uff0c\u8bbf\u95ee\u8be5\u7ed3\u70b9\u5e76\u5c06\u5176 \u5de6\u3001\u53f3\u5b69\u5b50 \u63d2\u5165\u961f\u5c3e(\u5982\u679c\u6709\u7684\u8bdd) \u2463\u91cd\u590d\u2462\u76f4\u81f3\u961f\u5217\u4e3a\u7a7a \u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u7b97\u6cd5\u601d\u60f3\uff1a \u2460\u521d\u59cb\u5316\u4e00\u4e2a\u8f85\u52a9\u961f\u5217\uff08\u94fe\u961f\u5217\uff09 \u2461\u7ed3\u70b9\u5165\u961f \u2462\u82e5\u961f\u5217\u975e\u7a7a\uff0c\u5219\u961f\u5934\u7ed3\u70b9\u51fa\u961f\uff0c\u8bbf\u95ee\u8be5\u7ed3\u70b9\u5e76\u5c06\u5176 \u76f8\u90bb\u9876\u70b9 \u63d2\u5165\u961f\u5c3e(\u5982\u679c\u6709\u7684\u8bdd) \u2463\u91cd\u590d\u2462\u76f4\u81f3\u961f\u5217\u4e3a\u7a7a \u6811\u6ca1\u6709\u56de\u8def\uff0c\u4e0d\u53ef\u80fd\u641c\u5230\u5df2\u8bbf\u95ee\u7ed3\u70b9 \u56fe\u6709\u53ef\u80fd\u641c\u7d22\u5230\u5df2\u8bbf\u95ee\u7684\u7ed3\u70b9 \u89e3\u51b3\u65b9\u6cd5\uff1a \u7528\u4e00\u4e2a\u6570\u7ec4\u6807\u8bb0\u9876\u70b9\u7684\u8bbf\u95ee","title":"\u4e8c\u3001\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08BFS\uff09"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#_3","text":"//\u7c7b\u578b\u63cf\u8ff0 typedef struct LNode { //\u5b9a\u4e49\u5355\u94fe\u8868\u7ed3\u70b9\u7c7b\u578b ElemType data ; //\u6570\u636e\u57df\uff0c\u53ef\u4ee5\u662f\u522b\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u672c\u6587\u7edf\u4e00\u7528int\u7c7b\u578b struct LNode * next ; //\u6307\u9488\u57df } LNode ; typedef struct { LNode * front , * rear ; } LinkQueue ;","title":"\u94fe\u961f\u5217"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#_4","text":"//\u6811\u7684\u5c42\u6b21\u904d\u5386\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\uff08\u7528\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09 void LevelOrder ( BiTree T ){ LinkQueue Q ; InitQueue ( Q ); BiTree p ; //T\u4e3a\u6839\u7ed3\u70b9\uff0cp\u4e5f\u662f\u6839\u7ed3\u70b9\uff0c\u4fdd\u8bc1\u6839\u51fa\u961f\u540e\u53ef\u4ee5\u6307\u5411\u5b69\u5b50\uff0c\u56e0\u4e3aT\u51fa\u961f\u540e\uff0cT->lchild\u65e0\u6548 EnQueue ( Q , T ); //\u6839\u7ed3\u70b9\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , T ); //\u6839\u7ed3\u70b9\u51fa\u961f if ( p -> lchild != NULL ) EnQueue ( Q , p -> lchild ); //\u5de6\u7ed3\u70b9\u5165\u961f if ( p -> rchild != NULL ) EnQueue ( Q , p -> rchild ); //\u53f3\u7ed3\u70b9\u5165\u961f } } //\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u7528\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u3001\u9886\u63a5\u8868\u90fd\u53ef\u4ee5\uff0c\u53ea\u662fFirstNeighbor\u548cNextNeighbor\u51fd\u6570\u5b9e\u73b0\u4e0d\u4e00\u6837\uff09 bool visited [ MAX_VERTEX_NUM ]; //\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 void BFSTraverse ( Graph G ){ //\u5bf9\u56feG\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 for ( v = 0 ; v < G . vexnum ; ++ v ){ visited [ v ] = false ; //\u521d\u59cb\u5316\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 } InitQueue ( Q ); //\u521d\u59cb\u5316\u8f85\u52a9\u961f\u5217Q for ( v = 0 ; v < G . vexnum ; ++ v ){ if ( ! visited [ v ]){ //\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u8c03\u7528\u4e00\u6b21BFS BFS ( G , v ); //vi\u6ca1\u8bbf\u95ee\u8fc7\uff0c\u4ecevi\u5f00\u59cbBFS } } } void BFS ( Graph G , int v ){ visit ( v ); //\u8bbf\u95ee\u521d\u59cb\u9876\u70b9v visited [ v ] = true ; //\u5bf9v\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , v ); //\u9876\u70b9v\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , v ); //\u9876\u70b9v\u51fa\u961f for ( w = FirstNeighbor ( G , v ); w >= 0 ; w = NextNeighbor ( G , v , w )){ //\u68c0\u6d4bv\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9 if ( ! visited [ w ]){ //w\u4e3av\u5c1a\u672a\u8bbf\u95ee\u7684\u90bb\u63a5\u9876\u70b9 visit ( w ); //\u8bbf\u95ee\u9876\u70b9w visited [ w ] = true ; //\u5bf9w\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , w ); //\u9876\u70b9w\u5165\u961f } } } }","title":"\u4ee3\u7801"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#_5","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \u90bb\u63a5\u77e9\u9635 = \\( \\(O(|V|^2)\\) \\) \uff0c \u90bb\u63a5\u8868 = \\( \\(O(|V|+|E|)\\) \\) \u539f\u7406\uff1a \u90bb\u63a5\u77e9\u9635\uff1a\u8bbf\u95ee\u70b9= \\( \\(O(|V|)\\) \\) \uff0c\u8bbf\u95ee\u8fb9= \\( \\(O(|V|^2)\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(|V|^2)=O(|V|^2)\\) \\) \u90bb\u63a5\u8868\uff1a\u8bbf\u95ee\u70b9= \\( \\(O(|V|)\\) \\) \uff0c\u8bbf\u95ee\u65e0\u5411\u8fb9= \\( \\(O(2|E|)\\) \\) \uff0c\u8bbf\u95ee\u65e0\u5411\u8fb9= \\( \\(O(|E|)\\) \\) \uff0c \u65e0\u5411\u56fe \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(2|E|)=O(|V|+|E|)\\) \\) \u6709\u5411\u56fe \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(|E|)=O(|V|+|E|)\\) \\)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#_6","text":"\u8fde\u901a\u56fe\u751f\u6210\u6811\uff0c\u975e\u8fde\u901a\u56fe\u751f\u68ee\u6797 \u7531\u4e8e\u9886\u63a5\u77e9\u9635\u8868\u793a\u6cd5\u552f\u4e00\uff0c\u9886\u63a5\u8868\u6cd5\u8868\u793a\u4e0d\u552f\u4e00 \u5bfc\u81f4\u90bb\u63a5\u77e9\u9635\u751f\u6210\u6811\u552f\u4e00\uff0c\u9886\u63a5\u8868\u751f\u6210\u6811\u4e0d\u552f\u4e00","title":"\u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u6811\u3001\u68ee\u6797"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#dfs","text":"","title":"\u4e09\u3001\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#_7","text":"\u4e0e \u6811 \u7684 \u5148\u5e8f\u904d\u5386 \u5f88\u50cf\u3002 //\u6811\u7684\u5148\u5e8f\u904d\u5386\uff08\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff09\uff08\u7528\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09 void PreOrder ( BiTree T ){ if ( T != NULL ){ visit ( T ); //\u8bbf\u95ee\u6839\u7ed3\u70b9 PreOrder ( T -> lchild ); //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 PreOrder ( T -> rchild ); //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 } } //\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u7528\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u3001\u9886\u63a5\u8868\u90fd\u53ef\u4ee5\uff0c\u53ea\u662fFirstNeighbor\u548cNextNeighbor\u51fd\u6570\u5b9e\u73b0\u4e0d\u4e00\u6837\uff09 bool visited [ MAX_VERTEX_NUM ]; //\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 void BFSTraverse ( Graph G ){ //\u5bf9\u56feG\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 for ( v = 0 ; v < G . vexnum ; ++ v ){ visited [ v ] = false ; //\u521d\u59cb\u5316\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 } for ( v = 0 ; v < G . vexnum ; ++ v ){ if ( ! visited [ v ]){ //\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u8c03\u7528\u4e00\u6b21BFS BFS ( G , v ); //vi\u6ca1\u8bbf\u95ee\u8fc7\uff0c\u4ecevi\u5f00\u59cbBFS } } } void DFS ( Graph G , int v ){ visit ( v ); //\u8bbf\u95ee\u521d\u59cb\u9876\u70b9v visited [ v ] = true ; //\u5bf9v\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 for ( w = FirstNeighbor ( G , v ); w >= 0 ; w = NextNeighbor ( G , v , w )){ //\u68c0\u6d4bv\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9 if ( ! visit [ w ]){ //w\u4e3av\u5c1a\u672a\u8bbf\u95ee\u7684\u90bb\u63a5\u9876\u70b9 DFS ( G , w ); } } }","title":"\u4ee3\u7801"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#bfs_1","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|)\\) \\) \uff0c\u6765\u81ea\u9012\u5f52\u5de5\u4f5c\u7ad9 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \u90bb\u63a5\u77e9\u9635 = \\( \\(O(|V|^2)\\) \\) \uff0c \u90bb\u63a5\u8868 = \\( \\(O(|V|+|E|)\\) \\) \u539f\u7406\uff1a \u90bb\u63a5\u77e9\u9635\uff1a\u8bbf\u95ee\u70b9= \\( \\(O(|V|)\\) \\) \uff0c\u8bbf\u95ee\u8fb9= \\( \\(O(|V|^2)\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(|V|^2)=O(|V|^2)\\) \\) \u90bb\u63a5\u8868\uff1a\u8bbf\u95ee\u70b9= \\( \\(O(|V|)\\) \\) \uff0c\u8bbf\u95ee\u65e0\u5411\u8fb9= \\( \\(O(2|E|)\\) \\) \uff0c\u8bbf\u95ee\u65e0\u5411\u8fb9= \\( \\(O(|E|)\\) \\) \uff0c \u65e0\u5411\u56fe \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(2|E|)=O(|V|+|E|)\\) \\) \u6709\u5411\u56fe \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(|V|)+O(|E|)=O(|V|+|E|)\\) \\)","title":"\u590d\u6742\u5ea6\u5206\u6790\uff08\u4e0eBFS\u4e00\u6837\uff09"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#bfs_2","text":"\u8fde\u901a\u56fe\u751f\u6210\u6811\uff0c\u975e\u8fde\u901a\u56fe\u751f\u68ee\u6797 \u7531\u4e8e\u9886\u63a5\u77e9\u9635\u8868\u793a\u6cd5\u552f\u4e00\uff0c\u9886\u63a5\u8868\u6cd5\u8868\u793a\u4e0d\u552f\u4e00 \u5bfc\u81f4\u90bb\u63a5\u77e9\u9635\u751f\u6210\u6811\u552f\u4e00\uff0c\u9886\u63a5\u8868\u751f\u6210\u6811\u4e0d\u552f\u4e00","title":"\u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811\u3001\u68ee\u6797\uff08\u4e0eBFS\u4e00\u6837\uff09"},{"location":"05-%E5%9B%BE/6.4%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%28BFS%E3%80%81DFS%29/#_8","text":"\u65e0\u5411\u56fe \u8fdb\u884cBFS/DFS\u904d\u5386\uff1a \u8c03\u7528BFS/DFS\u6b21\u6570=\u8fde\u901a\u5206\u91cf\u6570 \u8fde\u901a\u56fe\u53ea\u9700\u8c03\u7528\u4e00\u6b21BFS/DFS \u6709\u5411\u56fe \u8fdb\u884cBFS/DFS\u904d\u5386\uff1a\u8981\u5177\u4f53\u5206\u6790 \u82e5\u8d77\u59cb\u9876\u70b9\u5230\u5176\u5b83\u9876\u70b9\u90fd\u6709\u8def\u5f84\uff0c\u5219\u53ea\u9700\u8c03\u7528\u4e00\u6b21 \u5f3a\u8fde\u901a\u56fe\u4ece\u4efb\u610f\u7ed3\u70b9\u90fd\u53ea\u9700\u8c03\u7528\u4e00\u6b21BFS/DFS","title":"\u56db\u3001\u56fe\u7684\u904d\u5386\u4e0e\u56fe\u7684\u8fde\u901a\u6027"},{"location":"05-%E5%9B%BE/6.5%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%28Prim%E7%AE%97%E6%B3%95%E3%80%81Kruskal%E7%AE%97%E6%B3%95%29/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u4e00\u3001\u6700\u5c0f\u751f\u6210\u6811\u7684\u6982\u5ff5 \u00b6 \u8fde\u901a\u56fe\u751f\u6210\u6811\uff0c\u975e\u8fde\u901a\u56fe\u751f\u6210\u68ee\u6797 \u751f\u6210\u6811 \u662f\u5305\u542b\u56fe\u4e2d\u5168\u90e8\u9876\u70b9\u7684\u4e00\u4e2a \u6781\u5c0f\u8fde\u901a\u5b50\u56fe \u7279\u6027 \uff1a\u56fe\u4e2d\u6709n\u4e2a\u9876\u70b9\uff0c\u5219\u5b83\u7684\u751f\u6210\u6811\u542b\u6709n-1\u6761\u8fb9\u3002 \u53bb\u9664\u4e00\u6761\u8fb9\u4f1a\u53d8\u6210\u975e\u8fde\u901a\u56fe\uff1b\u52a0\u4e0a\u4e00\u6761\u8fb9\u4f1a\u53d8\u6210\u4e00\u4e2a\u56de\u8def \u4e4b\u524d\u5b66\u8fc7 \u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u6811 \u548c \u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811 \u3002 \u6700\u5c0f\u751f\u6210\u6811 \uff0c\u4e5f\u53eb \u6700\u5c0f\u4ee3\u4ef7\u6811 \u3002\u5728\u5e26\u6743\u8fde\u901a\u65e0\u5411\u56fe\u7684\u6240\u6709\u751f\u6210\u6811\u4e2d\uff0c\u6240\u6709\u8fb9\u7684\u4ee3\u4ef7\u548c\u6700\u5c0f\u3002 \u6700\u5c0f\u751f\u6210\u6811\u53ef\u80fd\u5f88\u591a\uff0c\u4f46\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u603b\u662f\u552f\u4e00\u4e14\u6700\u5c0f\u7684\u3002 \u6700\u5c0f\u751f\u6210\u7684\u8fb9=\u9876\u70b9\u6570-1 \u4e8c\u3001Prim\u7b97\u6cd5\uff08\u666e\u5229\u59c6\u7b97\u6cd5\uff09 \u00b6 \u6b64\u7b97\u6cd5\u53ef\u4ee5\u79f0\u4e3a \u201c\u52a0\u70b9\u6cd5\u201d \uff0c\u6bcf\u6b21\u8fed\u4ee3\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fb9\u5bf9\u5e94\u7684\u70b9\uff0c\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\u7b97\u6cd5\u4ece\u67d0\u4e00\u4e2a\u9876\u70b9s\u5f00\u59cb\uff0c\u9010\u6e10\u957f\u5927\u8986\u76d6\u6574\u4e2a\u8fde\u901a\u7f51\u7684\u6240\u6709\u9876\u70b9\u3002 \u5b9e\u73b0\u601d\u60f3\uff1a\u4ee5\u6700\u4f4e\u4ee3\u4ef7\u52a0\u5165 \u70b9 \u3002 \u7528\u4e24\u4e2a\u6570\u7ec4\uff1a \u2460 isJoin\u6570\u7ec4 \uff1a\u6807\u8bb0 \u5404\u7ed3\u70b9 \u662f\u5426\u5df2\u52a0\u5165\u6811\u3002 \u2461 lowCost\u6570\u7ec4 \uff1a\u5404\u8282\u70b9\u52a0\u5165\u6811\u7684\u6700\u4f4e\u4ee3\u4ef7\u3002 \u6bcf\u8f6e\u904d\u5386 isJoin \u6570\u7ec4\uff0c\u7b2c\u4e00\u904d\u627e\u5230 lowCost \u6700\u4f4e\u7684\u9876\u70b9\uff0c\u7136\u540e\u52a0\u5165\uff1b\u7b2c\u4e8c\u904d\u5faa\u73af\u904d\u5386\u66f4\u65b0\u5404\u70b9\u7684 lowCost \u503c\u3002 \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^2)\\) \\) \uff0c\u9002\u5408 \u8fb9\u7a20\u5bc6\u56fe \u4e09\u3001Kruskal\u7b97\u6cd5\uff08\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\uff09 \u00b6 \u6b64\u7b97\u6cd5\u53ef\u4ee5\u79f0\u4e3a \u201c\u52a0\u8fb9\u6cd5\u201d \uff0c\u521d\u59cb\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6570\u4e3a0\uff0c\u6bcf\u8fed\u4ee3\u4e00\u6b21\u5c31\u9009\u62e9\u4e00\u6761\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u4ee3\u4ef7\u8fb9\uff0c\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6\u5408\u91cc\u3002 \u5b9e\u73b0\u601d\u60f3\uff1a\u4ee5\u6700\u4f4e\u4ee3\u4ef7\u52a0\u5165 \u8fb9 \u3002 \u7528\u4e00\u4e2a\u8868\uff1a \uff08weight\uff08\u8fb9\u6743\uff09\uff0cVertex1\uff08\u70b91\uff09\uff0cVertex2\uff08\u70b92\uff09\uff09 \u7528 \u5e76\u67e5\u96c6 \u68c0\u67e5\u4e0b\u4e00\u4e2a\u8fb9\u7684\u4e24\u4e2a\u70b9\u662f\u5426\u5df2\u8fde\u63a5\u3002 \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u5df2\u8fde\u63a5\u9700\u8981 \\( \\(O(log_2|E|)\\) \\) \uff0c\u5de5\u6267\u884ce\u8f6e\u3002 \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|E|log_2|E|)\\) \\) \uff0c\u9002\u5408 \u8fb9\u7a00\u758f\u56fe","title":"5.5\u6700\u5c0f\u751f\u6210\u6811(Prim\u7b97\u6cd5\u3001Kruskal\u7b97\u6cd5)"},{"location":"05-%E5%9B%BE/6.5%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%28Prim%E7%AE%97%E6%B3%95%E3%80%81Kruskal%E7%AE%97%E6%B3%95%29/#_1","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"05-%E5%9B%BE/6.5%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%28Prim%E7%AE%97%E6%B3%95%E3%80%81Kruskal%E7%AE%97%E6%B3%95%29/#_2","text":"\u8fde\u901a\u56fe\u751f\u6210\u6811\uff0c\u975e\u8fde\u901a\u56fe\u751f\u6210\u68ee\u6797 \u751f\u6210\u6811 \u662f\u5305\u542b\u56fe\u4e2d\u5168\u90e8\u9876\u70b9\u7684\u4e00\u4e2a \u6781\u5c0f\u8fde\u901a\u5b50\u56fe \u7279\u6027 \uff1a\u56fe\u4e2d\u6709n\u4e2a\u9876\u70b9\uff0c\u5219\u5b83\u7684\u751f\u6210\u6811\u542b\u6709n-1\u6761\u8fb9\u3002 \u53bb\u9664\u4e00\u6761\u8fb9\u4f1a\u53d8\u6210\u975e\u8fde\u901a\u56fe\uff1b\u52a0\u4e0a\u4e00\u6761\u8fb9\u4f1a\u53d8\u6210\u4e00\u4e2a\u56de\u8def \u4e4b\u524d\u5b66\u8fc7 \u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u6811 \u548c \u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811 \u3002 \u6700\u5c0f\u751f\u6210\u6811 \uff0c\u4e5f\u53eb \u6700\u5c0f\u4ee3\u4ef7\u6811 \u3002\u5728\u5e26\u6743\u8fde\u901a\u65e0\u5411\u56fe\u7684\u6240\u6709\u751f\u6210\u6811\u4e2d\uff0c\u6240\u6709\u8fb9\u7684\u4ee3\u4ef7\u548c\u6700\u5c0f\u3002 \u6700\u5c0f\u751f\u6210\u6811\u53ef\u80fd\u5f88\u591a\uff0c\u4f46\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u603b\u662f\u552f\u4e00\u4e14\u6700\u5c0f\u7684\u3002 \u6700\u5c0f\u751f\u6210\u7684\u8fb9=\u9876\u70b9\u6570-1","title":"\u4e00\u3001\u6700\u5c0f\u751f\u6210\u6811\u7684\u6982\u5ff5"},{"location":"05-%E5%9B%BE/6.5%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%28Prim%E7%AE%97%E6%B3%95%E3%80%81Kruskal%E7%AE%97%E6%B3%95%29/#prim","text":"\u6b64\u7b97\u6cd5\u53ef\u4ee5\u79f0\u4e3a \u201c\u52a0\u70b9\u6cd5\u201d \uff0c\u6bcf\u6b21\u8fed\u4ee3\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fb9\u5bf9\u5e94\u7684\u70b9\uff0c\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\u7b97\u6cd5\u4ece\u67d0\u4e00\u4e2a\u9876\u70b9s\u5f00\u59cb\uff0c\u9010\u6e10\u957f\u5927\u8986\u76d6\u6574\u4e2a\u8fde\u901a\u7f51\u7684\u6240\u6709\u9876\u70b9\u3002 \u5b9e\u73b0\u601d\u60f3\uff1a\u4ee5\u6700\u4f4e\u4ee3\u4ef7\u52a0\u5165 \u70b9 \u3002 \u7528\u4e24\u4e2a\u6570\u7ec4\uff1a \u2460 isJoin\u6570\u7ec4 \uff1a\u6807\u8bb0 \u5404\u7ed3\u70b9 \u662f\u5426\u5df2\u52a0\u5165\u6811\u3002 \u2461 lowCost\u6570\u7ec4 \uff1a\u5404\u8282\u70b9\u52a0\u5165\u6811\u7684\u6700\u4f4e\u4ee3\u4ef7\u3002 \u6bcf\u8f6e\u904d\u5386 isJoin \u6570\u7ec4\uff0c\u7b2c\u4e00\u904d\u627e\u5230 lowCost \u6700\u4f4e\u7684\u9876\u70b9\uff0c\u7136\u540e\u52a0\u5165\uff1b\u7b2c\u4e8c\u904d\u5faa\u73af\u904d\u5386\u66f4\u65b0\u5404\u70b9\u7684 lowCost \u503c\u3002 \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^2)\\) \\) \uff0c\u9002\u5408 \u8fb9\u7a20\u5bc6\u56fe","title":"\u4e8c\u3001Prim\u7b97\u6cd5\uff08\u666e\u5229\u59c6\u7b97\u6cd5\uff09"},{"location":"05-%E5%9B%BE/6.5%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%28Prim%E7%AE%97%E6%B3%95%E3%80%81Kruskal%E7%AE%97%E6%B3%95%29/#kruskal","text":"\u6b64\u7b97\u6cd5\u53ef\u4ee5\u79f0\u4e3a \u201c\u52a0\u8fb9\u6cd5\u201d \uff0c\u521d\u59cb\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6570\u4e3a0\uff0c\u6bcf\u8fed\u4ee3\u4e00\u6b21\u5c31\u9009\u62e9\u4e00\u6761\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u4ee3\u4ef7\u8fb9\uff0c\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6\u5408\u91cc\u3002 \u5b9e\u73b0\u601d\u60f3\uff1a\u4ee5\u6700\u4f4e\u4ee3\u4ef7\u52a0\u5165 \u8fb9 \u3002 \u7528\u4e00\u4e2a\u8868\uff1a \uff08weight\uff08\u8fb9\u6743\uff09\uff0cVertex1\uff08\u70b91\uff09\uff0cVertex2\uff08\u70b92\uff09\uff09 \u7528 \u5e76\u67e5\u96c6 \u68c0\u67e5\u4e0b\u4e00\u4e2a\u8fb9\u7684\u4e24\u4e2a\u70b9\u662f\u5426\u5df2\u8fde\u63a5\u3002 \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u5df2\u8fde\u63a5\u9700\u8981 \\( \\(O(log_2|E|)\\) \\) \uff0c\u5de5\u6267\u884ce\u8f6e\u3002 \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|E|log_2|E|)\\) \\) \uff0c\u9002\u5408 \u8fb9\u7a00\u758f\u56fe","title":"\u4e09\u3001Kruskal\u7b97\u6cd5\uff08\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\uff09"},{"location":"05-%E5%9B%BE/6.6%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%28BFS%E3%80%81Dijkstra%E7%AE%97%E6%B3%95%E3%80%81Floyd%E7%AE%97%E6%B3%95%29/","text":"\u6700\u77ed\u8def\u5f84 \u00b6 \u4e00\u3001BFS\u7b97\u6cd5\uff08\u65e0\u6743\u56fe\uff09 \u00b6 \u7531 \u5e7f\u5ea6\u4f18\u5148\u7b97\u6cd5 \u6c42\u6700\u77ed\u8def\u5f84\uff1a //\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u7528\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u3001\u9886\u63a5\u8868\u90fd\u53ef\u4ee5\uff0c\u53ea\u662fFirstNeighbor\u548cNextNeighbor\u51fd\u6570\u5b9e\u73b0\u4e0d\u4e00\u6837\uff09 bool visited [ MAX_VERTEX_NUM ]; //\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 void BFSTraverse ( Graph G ){ //\u5bf9\u56feG\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 for ( v = 0 ; v < G . vexnum ; ++ v ){ visited [ v ] = false ; //\u521d\u59cb\u5316\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 } InitQueue ( Q ); //\u521d\u59cb\u5316\u8f85\u52a9\u961f\u5217Q for ( v = 0 ; v < G . vexnum ; ++ v ){ if ( ! visited [ v ]){ //\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u8c03\u7528\u4e00\u6b21BFS BFS ( G , v ); //vi\u6ca1\u8bbf\u95ee\u8fc7\uff0c\u4ecevi\u5f00\u59cbBFS } } } void BFS ( Graph G , int v ){ visit ( v ); //\u8bbf\u95ee\u521d\u59cb\u9876\u70b9v visited [ v ] = true ; //\u5bf9v\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , v ); //\u9876\u70b9v\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , v ); //\u9876\u70b9v\u51fa\u961f for ( w = FirstNeighbor ( G , v ); w >= 0 ; w = NextNeighbor ( G , v , w )){ //\u68c0\u6d4bv\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9 if ( ! visited [ w ]){ //w\u4e3av\u5c1a\u672a\u8bbf\u95ee\u7684\u90bb\u63a5\u9876\u70b9 visit ( w ); //\u8bbf\u95ee\u9876\u70b9w visited [ w ] = true ; //\u5bf9w\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , w ); //\u9876\u70b9w\u5165\u961f } } } } \u5b9e\u73b0\u65b9\u5f0f\uff1a \u7528\u4e24\u4e2a\u6570\u7ec4\uff1a \u2460 d\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u3002 \u2461 path\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u70b9\u7684\u524d\u9a71\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \u90bb\u63a5\u77e9\u9635 = \\( \\(O(|V|^2)\\) \\) \uff0c \u90bb\u63a5\u8868 = \\( \\(O(|V|+|E|)\\) \\) //\u7528BFS\u6c42\u9876\u70b9U\u5230\u5176\u5b83\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff08\u53ea\u6539\u4e86visit\u51fd\u6570\u8c03\u7528\u7684\u4e24\u884c\uff09 #define INFINITY 4294967295 //\u5b8f\u5b9a\u4e49\u5e38\u91cf\u201c\u65e0\u7a77\u201d\uff0c4294967295\u4e3a\u6700\u5927\u7684int\u503c bool visited [ MAX_VERTEX_NUM ]; //\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 void BFS ( Graph G , int v ){ //d[i]\u8868\u793a\u4eceu\u5230i\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84 for ( i = 0 ; i < G . vexnum ; ++ i ){ d [ i ] = INFINITY ; //\u521d\u59cb\u5316\u8def\u5f84\u957f\u5ea6 path [ i ] = -1 ; //\u6700\u77ed\u8def\u5f84\u4ece\u54ea\u4e2a\u9876\u70b9\u8fc7\u6765 } d [ u ] = 0 ; //\u4eceu\u5f00\u59cb visited [ v ] = true ; //\u5bf9v\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , v ); //\u9876\u70b9v\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , v ); //\u9876\u70b9v\u51fa\u961f for ( w = FirstNeighbor ( G , v ); w >= 0 ; w = NextNeighbor ( G , v , w )){ //\u68c0\u6d4bv\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9 if ( ! visited [ w ]){ //w\u4e3av\u5c1a\u672a\u8bbf\u95ee\u7684\u90bb\u63a5\u9876\u70b9 d [ w ] = d [ u ] + 1 ; //\u8def\u5f84\u957f\u5ea6\u52a01 path [ w ] = u ; //\u6700\u77ed\u8def\u5f84\u5e94\u4eceu\u5230w visited [ w ] = true ; //\u5bf9w\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , w ); //\u9876\u70b9w\u5165\u961f } } } } \u4e8c\u3001Dijkstra\u7b97\u6cd5\uff08\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\uff09\uff08\u5e26\u6743\u56fe\u3001\u65e0\u6743\u56fe\uff09 \u00b6 BFS\u7b97\u6cd5\u7684\u5c40\u9650\u6027\uff1a\u4e0d\u9002\u7528\u5e26\u6743\u56fe \u5b9e\u73b0\u65b9\u5f0f\uff1a \u7528\u4e24\u4e2a\u6570\u7ec4\uff1a \u2460 final\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u9876\u70b9\u662f\u5426\u5df2\u627e\u5230\u6700\u77ed\u8def\u5f84\u3002 \u2461 dist\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 \u2462 path\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u70b9\u8def\u5f84\u4e0a\u7684\u524d\u9a71\u3002 \u6bcf\u8f6e\u904d\u5386 final \u6570\u7ec4\uff0c\u7b2c\u4e00\u904d\u627e\u5230 dist \u6700\u4f4e\u7684\u9876\u70b9\uff0c\u7136\u540e\u52a0\u5165\uff1b\u7b2c\u4e8c\u904d\u5faa\u73af\u904d\u5386\u66f4\u65b0\u5404\u70b9\u7684 dist \u503c\u548c path \u503c\u3002 \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^2)\\) \\) Dijkstra\u7b97\u6cd5\u7684\u5c40\u9650\u6027\uff1a\u4e0d\u9002\u7528\u8d1f\u6743\u503c\u5e26\u6743\u56fe \u3002 \u4e09\u3001Floyd\u7b97\u6cd5\uff08\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\uff09\uff08\u5e26\u6743\u56fe\u3001\u65e0\u6743\u56fe\uff09 \u00b6 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u7528\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff1a \u2460 A\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u9876\u70b9\u4e4b\u95f4\u76ee\u524d\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 \u2461 path\u6570\u7ec4 \uff1a\u8bb0\u5f55\u4e24\u70b9\u4e4b\u95f4\u7684\u7b2c\u4e00\u4e2a\u4e2d\u8f6c\u70b9\u3002 \u4ee5\u67d0\u4e00\u70b9\u4e3a\u4e2d\u8f6c\u70b9\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4\uff0c\u66f4\u65b0\u4e24\u4e2a\u6570\u7ec4\uff0c\u5c06\u6240\u6709\u70b9\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u90fd\u904d\u5386\u4e00\u904d\uff0c\u5f62\u6210\u4e09\u91cd\u5faa\u73af \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^3)\\) \\) \uff0c \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^2)\\) \\) \u3002 Floyd\u7b97\u6cd5\u7684\u5c40\u9650\u6027\uff1a\u4e0d\u9002\u7528\u8d1f\u6743\u503c\u5e26\u6743\u56fe \u3002 //\u7701\u7565\u521d\u59cb\u5316A\u548cpath\u6570\u7ec4 //Floyd\u7b97\u6cd5\u7684\u6838\u5fc3 for ( int k = 0 ; k < n ; k ++ ){ //\u8003\u8651\u4ee5Vk\u4f5c\u4e3a\u4e2d\u8f6c\u70b9 for ( int i = 0 ; i < n ; i ++ ){ //\u904d\u5386\u6574\u4e2a\u77e9\u9635\uff0ci\u4e3a\u884c\u53f7\uff0cj\u4e3a\u5217\u53f7 for ( int i = 0 ; i < n ; i ++ ){ if ( A [ i ][ j ] > A [ i ][ k ] + A [ k ][ j ]){ //\u4ee5Vk\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u7684\u8def\u5f84\u66f4\u77ed A [ i ][ j ] = A [ i ][ k ] + A [ k ][ j ]; //\u66f4\u65b0\u6700\u77ed\u8def\u5f84\u957f\u5ea6 path [ i ][ j ] = k ; //\u4e2d\u8f6c\u70b9 } } } }","title":"5.6\u6700\u77ed\u8def\u5f84(BFS\u3001Dijkstra\u7b97\u6cd5\u3001Floyd\u7b97\u6cd5)"},{"location":"05-%E5%9B%BE/6.6%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%28BFS%E3%80%81Dijkstra%E7%AE%97%E6%B3%95%E3%80%81Floyd%E7%AE%97%E6%B3%95%29/#_1","text":"","title":"\u6700\u77ed\u8def\u5f84"},{"location":"05-%E5%9B%BE/6.6%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%28BFS%E3%80%81Dijkstra%E7%AE%97%E6%B3%95%E3%80%81Floyd%E7%AE%97%E6%B3%95%29/#bfs","text":"\u7531 \u5e7f\u5ea6\u4f18\u5148\u7b97\u6cd5 \u6c42\u6700\u77ed\u8def\u5f84\uff1a //\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u7528\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u3001\u9886\u63a5\u8868\u90fd\u53ef\u4ee5\uff0c\u53ea\u662fFirstNeighbor\u548cNextNeighbor\u51fd\u6570\u5b9e\u73b0\u4e0d\u4e00\u6837\uff09 bool visited [ MAX_VERTEX_NUM ]; //\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 void BFSTraverse ( Graph G ){ //\u5bf9\u56feG\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 for ( v = 0 ; v < G . vexnum ; ++ v ){ visited [ v ] = false ; //\u521d\u59cb\u5316\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 } InitQueue ( Q ); //\u521d\u59cb\u5316\u8f85\u52a9\u961f\u5217Q for ( v = 0 ; v < G . vexnum ; ++ v ){ if ( ! visited [ v ]){ //\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u8c03\u7528\u4e00\u6b21BFS BFS ( G , v ); //vi\u6ca1\u8bbf\u95ee\u8fc7\uff0c\u4ecevi\u5f00\u59cbBFS } } } void BFS ( Graph G , int v ){ visit ( v ); //\u8bbf\u95ee\u521d\u59cb\u9876\u70b9v visited [ v ] = true ; //\u5bf9v\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , v ); //\u9876\u70b9v\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , v ); //\u9876\u70b9v\u51fa\u961f for ( w = FirstNeighbor ( G , v ); w >= 0 ; w = NextNeighbor ( G , v , w )){ //\u68c0\u6d4bv\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9 if ( ! visited [ w ]){ //w\u4e3av\u5c1a\u672a\u8bbf\u95ee\u7684\u90bb\u63a5\u9876\u70b9 visit ( w ); //\u8bbf\u95ee\u9876\u70b9w visited [ w ] = true ; //\u5bf9w\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , w ); //\u9876\u70b9w\u5165\u961f } } } } \u5b9e\u73b0\u65b9\u5f0f\uff1a \u7528\u4e24\u4e2a\u6570\u7ec4\uff1a \u2460 d\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u3002 \u2461 path\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u70b9\u7684\u524d\u9a71\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \u90bb\u63a5\u77e9\u9635 = \\( \\(O(|V|^2)\\) \\) \uff0c \u90bb\u63a5\u8868 = \\( \\(O(|V|+|E|)\\) \\) //\u7528BFS\u6c42\u9876\u70b9U\u5230\u5176\u5b83\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff08\u53ea\u6539\u4e86visit\u51fd\u6570\u8c03\u7528\u7684\u4e24\u884c\uff09 #define INFINITY 4294967295 //\u5b8f\u5b9a\u4e49\u5e38\u91cf\u201c\u65e0\u7a77\u201d\uff0c4294967295\u4e3a\u6700\u5927\u7684int\u503c bool visited [ MAX_VERTEX_NUM ]; //\u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4 void BFS ( Graph G , int v ){ //d[i]\u8868\u793a\u4eceu\u5230i\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84 for ( i = 0 ; i < G . vexnum ; ++ i ){ d [ i ] = INFINITY ; //\u521d\u59cb\u5316\u8def\u5f84\u957f\u5ea6 path [ i ] = -1 ; //\u6700\u77ed\u8def\u5f84\u4ece\u54ea\u4e2a\u9876\u70b9\u8fc7\u6765 } d [ u ] = 0 ; //\u4eceu\u5f00\u59cb visited [ v ] = true ; //\u5bf9v\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , v ); //\u9876\u70b9v\u5165\u961f while ( ! isEmpty ( Q )){ //\u961f\u5217\u4e0d\u7a7a\u5219\u5faa\u73af DeQueue ( Q , v ); //\u9876\u70b9v\u51fa\u961f for ( w = FirstNeighbor ( G , v ); w >= 0 ; w = NextNeighbor ( G , v , w )){ //\u68c0\u6d4bv\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9 if ( ! visited [ w ]){ //w\u4e3av\u5c1a\u672a\u8bbf\u95ee\u7684\u90bb\u63a5\u9876\u70b9 d [ w ] = d [ u ] + 1 ; //\u8def\u5f84\u957f\u5ea6\u52a01 path [ w ] = u ; //\u6700\u77ed\u8def\u5f84\u5e94\u4eceu\u5230w visited [ w ] = true ; //\u5bf9w\u505a\u5df2\u8bbf\u95ee\u6807\u8bb0 EnQueue ( Q , w ); //\u9876\u70b9w\u5165\u961f } } } }","title":"\u4e00\u3001BFS\u7b97\u6cd5\uff08\u65e0\u6743\u56fe\uff09"},{"location":"05-%E5%9B%BE/6.6%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%28BFS%E3%80%81Dijkstra%E7%AE%97%E6%B3%95%E3%80%81Floyd%E7%AE%97%E6%B3%95%29/#dijkstra","text":"BFS\u7b97\u6cd5\u7684\u5c40\u9650\u6027\uff1a\u4e0d\u9002\u7528\u5e26\u6743\u56fe \u5b9e\u73b0\u65b9\u5f0f\uff1a \u7528\u4e24\u4e2a\u6570\u7ec4\uff1a \u2460 final\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u9876\u70b9\u662f\u5426\u5df2\u627e\u5230\u6700\u77ed\u8def\u5f84\u3002 \u2461 dist\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 \u2462 path\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u70b9\u8def\u5f84\u4e0a\u7684\u524d\u9a71\u3002 \u6bcf\u8f6e\u904d\u5386 final \u6570\u7ec4\uff0c\u7b2c\u4e00\u904d\u627e\u5230 dist \u6700\u4f4e\u7684\u9876\u70b9\uff0c\u7136\u540e\u52a0\u5165\uff1b\u7b2c\u4e8c\u904d\u5faa\u73af\u904d\u5386\u66f4\u65b0\u5404\u70b9\u7684 dist \u503c\u548c path \u503c\u3002 \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^2)\\) \\) Dijkstra\u7b97\u6cd5\u7684\u5c40\u9650\u6027\uff1a\u4e0d\u9002\u7528\u8d1f\u6743\u503c\u5e26\u6743\u56fe \u3002","title":"\u4e8c\u3001Dijkstra\u7b97\u6cd5\uff08\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\uff09\uff08\u5e26\u6743\u56fe\u3001\u65e0\u6743\u56fe\uff09"},{"location":"05-%E5%9B%BE/6.6%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%28BFS%E3%80%81Dijkstra%E7%AE%97%E6%B3%95%E3%80%81Floyd%E7%AE%97%E6%B3%95%29/#floyd","text":"\u5b9e\u73b0\u65b9\u5f0f\uff1a \u7528\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff1a \u2460 A\u6570\u7ec4 \uff1a\u8bb0\u5f55\u5404\u9876\u70b9\u4e4b\u95f4\u76ee\u524d\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 \u2461 path\u6570\u7ec4 \uff1a\u8bb0\u5f55\u4e24\u70b9\u4e4b\u95f4\u7684\u7b2c\u4e00\u4e2a\u4e2d\u8f6c\u70b9\u3002 \u4ee5\u67d0\u4e00\u70b9\u4e3a\u4e2d\u8f6c\u70b9\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4\uff0c\u66f4\u65b0\u4e24\u4e2a\u6570\u7ec4\uff0c\u5c06\u6240\u6709\u70b9\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u90fd\u904d\u5386\u4e00\u904d\uff0c\u5f62\u6210\u4e09\u91cd\u5faa\u73af \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^3)\\) \\) \uff0c \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(|V|^2)\\) \\) \u3002 Floyd\u7b97\u6cd5\u7684\u5c40\u9650\u6027\uff1a\u4e0d\u9002\u7528\u8d1f\u6743\u503c\u5e26\u6743\u56fe \u3002 //\u7701\u7565\u521d\u59cb\u5316A\u548cpath\u6570\u7ec4 //Floyd\u7b97\u6cd5\u7684\u6838\u5fc3 for ( int k = 0 ; k < n ; k ++ ){ //\u8003\u8651\u4ee5Vk\u4f5c\u4e3a\u4e2d\u8f6c\u70b9 for ( int i = 0 ; i < n ; i ++ ){ //\u904d\u5386\u6574\u4e2a\u77e9\u9635\uff0ci\u4e3a\u884c\u53f7\uff0cj\u4e3a\u5217\u53f7 for ( int i = 0 ; i < n ; i ++ ){ if ( A [ i ][ j ] > A [ i ][ k ] + A [ k ][ j ]){ //\u4ee5Vk\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u7684\u8def\u5f84\u66f4\u77ed A [ i ][ j ] = A [ i ][ k ] + A [ k ][ j ]; //\u66f4\u65b0\u6700\u77ed\u8def\u5f84\u957f\u5ea6 path [ i ][ j ] = k ; //\u4e2d\u8f6c\u70b9 } } } }","title":"\u4e09\u3001Floyd\u7b97\u6cd5\uff08\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\uff09\uff08\u5e26\u6743\u56fe\u3001\u65e0\u6743\u56fe\uff09"},{"location":"05-%E5%9B%BE/6.7%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/","text":"\u6709\u5411\u65e0\u73af\u56fe\u2014\u2014Directed Acyclic Graph \u00b6 \u4e00\u3001\u6709\u5411\u65e0\u73af\u56fe\u5b9a\u4e49 \u00b6 \u6709\u5411\u65e0\u73af\u56fe \uff1a\u6709\u5411\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\uff0c\u53c8\u79f0 DAG\u56fe \u3002 \u4e8c\u3001\u6709\u5411\u65e0\u73af\u56fe\u63cf\u8ff0\u8868\u8fbe\u5f0f \u00b6 \u7531\u8868\u8fbe\u5f0f\u753b \u6700\u5c11\u9876\u70b9 \u7684\u6709\u5411\u65e0\u73af\u56fe\uff1a","title":"5.7\u6709\u5411\u65e0\u73af\u56fe"},{"location":"05-%E5%9B%BE/6.7%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#directed-acyclic-graph","text":"","title":"\u6709\u5411\u65e0\u73af\u56fe\u2014\u2014Directed Acyclic Graph"},{"location":"05-%E5%9B%BE/6.7%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_1","text":"\u6709\u5411\u65e0\u73af\u56fe \uff1a\u6709\u5411\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\uff0c\u53c8\u79f0 DAG\u56fe \u3002","title":"\u4e00\u3001\u6709\u5411\u65e0\u73af\u56fe\u5b9a\u4e49"},{"location":"05-%E5%9B%BE/6.7%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_2","text":"\u7531\u8868\u8fbe\u5f0f\u753b \u6700\u5c11\u9876\u70b9 \u7684\u6709\u5411\u65e0\u73af\u56fe\uff1a","title":"\u4e8c\u3001\u6709\u5411\u65e0\u73af\u56fe\u63cf\u8ff0\u8868\u8fbe\u5f0f"},{"location":"05-%E5%9B%BE/6.8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/","text":"\u62d3\u6251\u6392\u5e8f \u00b6 \u4e00\u3001AOV\u7f51 \u00b6 AOV\u7f51 \uff08Activity On Vertex NetWork\uff0c\u7528 \u9876\u70b9\u8868\u793a\u6d3b\u52a8 \u7684\u7f51\uff09\uff1a \u7528DAG\u56fe\uff08 \u6709\u5411\u65e0\u73af\u56fe \uff09\u8868\u793a\u4e00\u4e2a\u5de5\u7a0b\u3002 \u9876\u70b9\u8868\u793a\u6d3b\u52a8 \uff0c\u8fb9 \\( \\(<V_i,V_j>\\) \\) \u8868\u793a\u6d3b\u52a8 \\( \\(V_i\\) \\) \u5fc5\u987b\u5148\u4e8e\u6d3b\u52a8 \\( \\(V_j\\) \\) \u8fdb\u884c \u4e8c\u3001\u62d3\u6251\u6392\u5e8f \u00b6 \u6709\u5411\u65e0\u73af\u56fe\u4e2d\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u65f6\uff0c\u79f0\u4e3a\u8be5\u56fe\u7684\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f\uff1a \u2460\u6bcf\u4e2a\u9876\u70b9\u51fa\u73b0\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21 \u2461\u82e5\u9876\u70b9A\u5728\u5e8f\u5217\u4e2d\u6392\u5728B\u7684\u524d\u9762\uff0c\u5219\u5728\u56fe\u4e2d\u4e0d\u5b58\u5728\u4eceB\u5230A\u7684\u8def\u5f84 \u6bcf\u4e2aAOV\u7f51\u6709\u591a\u4e2a\u62d3\u6251\u6392\u5e8f\u5e8f\u5217\u3002 \u62d3\u6251\u6392\u5e8f\uff1a\u627e\u5230\u505a\u4e8b\u7684\u5148\u540e\u987a\u5e8f\u3002 \u62d3\u6251\u6392\u5e8f\u7684\u5b9e\u73b0\uff1a \u2460\u4eceAOV\u7f51\u4e2d\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u524d\u9a71\uff08\u5165\u5ea6\u4e3a0\uff09\u7684\u9876\u70b9\u5e76\u8f93\u51fa\u3002 \u2461 \u4ece\u7f51\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u548c\u6240\u6709\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9\u3002 \u2462 \u91cd\u590d\u2460\u548c\u2461\u76f4\u5230\u5f53\u524d\u7684AOV\u7f51\u4e3a\u7a7a\u6216\u5f53\u524d\u7f51\u4e2d\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9\u4e3a\u6b62\u3002 \u56fe\u7684\u7c7b\u578b\u63cf\u8ff0\uff1a \u00b6 #define MaxVertexNum 100 //\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c //\"\u8fb9\uff08\u5f27\uff09\" typedef struct ArcNode { int adjvex ; //\u8fb9\uff08\u5f27\uff09\u6307\u5411\u90a3\u4e2a\u7ed3\u70b9 struct ArcNode * next ; //\u6307\u5411\u4e0b\u4e00\u6761\u5f27\u7684\u6307\u9488 //InfoType info; //\u8fb9\u6743\u503c } ArcNode ; //\"\u9876\u70b9\" typedef struct VNode { VertexType data ; //\u9876\u70b9\u6570\u636e ArcNode * first ; //\u9876\u70b9\u6307\u5411\u7684\u7b2c\u4e00\u6761\u8fb9 } VNode , AdjList [ MaxVertexNum ]; //\u7528\u9886\u63a5\u8868\u5b58\u50a8\u56fe typedef struct { AdjList vertices ; //\u9876\u70b9\u6570\u7ec4 int vernum , arcnum ; ////\u56fe\u5f53\u524d\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\uff08\u5f27\u6570\uff09 } ALGraph ; \u4ee3\u7801 \u00b6 bool TopologicalSort ( Graph G ){ InitStack ( S ); //\u521d\u59cb\u5316\u6808\uff0c\u5b58\u50a8\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9 for ( int i = 0 ; i < G . vexnum ; i ++ ){ if ( indegree [ i ] == 0 ){ Push ( S , i ); //\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u8fdb\u6808 } } int count = 0 \uff1b //\u8ba1\u6570\uff0c\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u8f93\u51fa\u7684\u9876\u70b9\u6570 while ( ! IsEmpty ( S )){ //\u6808\u4e0d\u7a7a\uff0c\u5219\u5b58\u5728\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9 Pop ( S , i ); //\u6808\u9876\u5143\u7d20\u51fa\u6808 print [ count ++ ] = i ; //\u8f93\u51fa\u9876\u70b9i for ( p = G . vertices [ i ]. firstarc ; p ; p = p -> nextarc ){ //p\u662f\u9876\u70b9\u7b2c\u4e00\u4e2a\u6307\u5411\u7684\u7ed3\u70b9\uff0cp\u5b58\u5728\u5219\u5faa\u73af //\u5c06\u6240\u6709i\u6307\u5411\u7684\u9876\u70b9\u7684\u5165\u5ea6\u51cf1\uff0c\u5e76\u4e14\u5c06\u5165\u5ea6\u51cf\u4e3a0\u7684\u9876\u70b9\u538b\u5165\u6808s v = p -> adjvex ; //v\u662f\u7ed3\u70b9p\u4e2d\u5b58\u7684\u9876\u70b9\u53f7 if ( ! ( -- indegree [ v ])) //\u5165\u5ea6\u5148\u51cf1\uff0c\u518d\u5224\u65ad\u662f\u5426\u4e3a0 Push ( S , v ); //\u5165\u5ea6\u4e3a0\uff0c\u5219\u5165\u6808 } } if ( count < G . vexnum ) return false ; //\u6392\u5e8f\u5931\u8d25\uff0c\u6709\u5411\u56fe\u4e2d\u6709\u56de\u8def else return true ; //\u62d3\u6251\u6392\u5e8f\u6210\u529f }","title":"5.8\u62d3\u6251\u6392\u5e8f"},{"location":"05-%E5%9B%BE/6.8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_1","text":"","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"05-%E5%9B%BE/6.8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#aov","text":"AOV\u7f51 \uff08Activity On Vertex NetWork\uff0c\u7528 \u9876\u70b9\u8868\u793a\u6d3b\u52a8 \u7684\u7f51\uff09\uff1a \u7528DAG\u56fe\uff08 \u6709\u5411\u65e0\u73af\u56fe \uff09\u8868\u793a\u4e00\u4e2a\u5de5\u7a0b\u3002 \u9876\u70b9\u8868\u793a\u6d3b\u52a8 \uff0c\u8fb9 \\( \\(<V_i,V_j>\\) \\) \u8868\u793a\u6d3b\u52a8 \\( \\(V_i\\) \\) \u5fc5\u987b\u5148\u4e8e\u6d3b\u52a8 \\( \\(V_j\\) \\) \u8fdb\u884c","title":"\u4e00\u3001AOV\u7f51"},{"location":"05-%E5%9B%BE/6.8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_2","text":"\u6709\u5411\u65e0\u73af\u56fe\u4e2d\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u65f6\uff0c\u79f0\u4e3a\u8be5\u56fe\u7684\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f\uff1a \u2460\u6bcf\u4e2a\u9876\u70b9\u51fa\u73b0\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21 \u2461\u82e5\u9876\u70b9A\u5728\u5e8f\u5217\u4e2d\u6392\u5728B\u7684\u524d\u9762\uff0c\u5219\u5728\u56fe\u4e2d\u4e0d\u5b58\u5728\u4eceB\u5230A\u7684\u8def\u5f84 \u6bcf\u4e2aAOV\u7f51\u6709\u591a\u4e2a\u62d3\u6251\u6392\u5e8f\u5e8f\u5217\u3002 \u62d3\u6251\u6392\u5e8f\uff1a\u627e\u5230\u505a\u4e8b\u7684\u5148\u540e\u987a\u5e8f\u3002 \u62d3\u6251\u6392\u5e8f\u7684\u5b9e\u73b0\uff1a \u2460\u4eceAOV\u7f51\u4e2d\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u524d\u9a71\uff08\u5165\u5ea6\u4e3a0\uff09\u7684\u9876\u70b9\u5e76\u8f93\u51fa\u3002 \u2461 \u4ece\u7f51\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u548c\u6240\u6709\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9\u3002 \u2462 \u91cd\u590d\u2460\u548c\u2461\u76f4\u5230\u5f53\u524d\u7684AOV\u7f51\u4e3a\u7a7a\u6216\u5f53\u524d\u7f51\u4e2d\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9\u4e3a\u6b62\u3002","title":"\u4e8c\u3001\u62d3\u6251\u6392\u5e8f"},{"location":"05-%E5%9B%BE/6.8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_3","text":"#define MaxVertexNum 100 //\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c //\"\u8fb9\uff08\u5f27\uff09\" typedef struct ArcNode { int adjvex ; //\u8fb9\uff08\u5f27\uff09\u6307\u5411\u90a3\u4e2a\u7ed3\u70b9 struct ArcNode * next ; //\u6307\u5411\u4e0b\u4e00\u6761\u5f27\u7684\u6307\u9488 //InfoType info; //\u8fb9\u6743\u503c } ArcNode ; //\"\u9876\u70b9\" typedef struct VNode { VertexType data ; //\u9876\u70b9\u6570\u636e ArcNode * first ; //\u9876\u70b9\u6307\u5411\u7684\u7b2c\u4e00\u6761\u8fb9 } VNode , AdjList [ MaxVertexNum ]; //\u7528\u9886\u63a5\u8868\u5b58\u50a8\u56fe typedef struct { AdjList vertices ; //\u9876\u70b9\u6570\u7ec4 int vernum , arcnum ; ////\u56fe\u5f53\u524d\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\uff08\u5f27\u6570\uff09 } ALGraph ;","title":"\u56fe\u7684\u7c7b\u578b\u63cf\u8ff0\uff1a"},{"location":"05-%E5%9B%BE/6.8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_4","text":"bool TopologicalSort ( Graph G ){ InitStack ( S ); //\u521d\u59cb\u5316\u6808\uff0c\u5b58\u50a8\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9 for ( int i = 0 ; i < G . vexnum ; i ++ ){ if ( indegree [ i ] == 0 ){ Push ( S , i ); //\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u8fdb\u6808 } } int count = 0 \uff1b //\u8ba1\u6570\uff0c\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u8f93\u51fa\u7684\u9876\u70b9\u6570 while ( ! IsEmpty ( S )){ //\u6808\u4e0d\u7a7a\uff0c\u5219\u5b58\u5728\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9 Pop ( S , i ); //\u6808\u9876\u5143\u7d20\u51fa\u6808 print [ count ++ ] = i ; //\u8f93\u51fa\u9876\u70b9i for ( p = G . vertices [ i ]. firstarc ; p ; p = p -> nextarc ){ //p\u662f\u9876\u70b9\u7b2c\u4e00\u4e2a\u6307\u5411\u7684\u7ed3\u70b9\uff0cp\u5b58\u5728\u5219\u5faa\u73af //\u5c06\u6240\u6709i\u6307\u5411\u7684\u9876\u70b9\u7684\u5165\u5ea6\u51cf1\uff0c\u5e76\u4e14\u5c06\u5165\u5ea6\u51cf\u4e3a0\u7684\u9876\u70b9\u538b\u5165\u6808s v = p -> adjvex ; //v\u662f\u7ed3\u70b9p\u4e2d\u5b58\u7684\u9876\u70b9\u53f7 if ( ! ( -- indegree [ v ])) //\u5165\u5ea6\u5148\u51cf1\uff0c\u518d\u5224\u65ad\u662f\u5426\u4e3a0 Push ( S , v ); //\u5165\u5ea6\u4e3a0\uff0c\u5219\u5165\u6808 } } if ( count < G . vexnum ) return false ; //\u6392\u5e8f\u5931\u8d25\uff0c\u6709\u5411\u56fe\u4e2d\u6709\u56de\u8def else return true ; //\u62d3\u6251\u6392\u5e8f\u6210\u529f }","title":"\u4ee3\u7801"},{"location":"05-%E5%9B%BE/6.9%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/","text":"\u5173\u952e\u8def\u5f84 \u00b6 \u4e00\u3001AOE\u7f51 \u00b6 AOE\u7f51 \uff08Activity On Edge NetWork\uff0c\u7528 \u8fb9\u8868\u793a\u6d3b\u52a8 \u7684\u7f51\uff09\uff1a \u5e26\u6743\u6709\u5411\u56fe \u4e2d\uff0c \u9876\u70b9\u8868\u793a\u4e8b\u4ef6 \uff0c \u6709\u5411\u8fb9\u8868\u793a\u6d3b\u52a8 \uff0c \u8fb9\u4e0a\u7684\u6743\u503c\u8868\u793a\u5b8c\u6210\u8be5\u6d3b\u52a8\u7684\u5f00\u9500 \u3002 AOE\u7f51\u5177\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6027\u8d28\uff1a \u2460\u53ea\u6709\u5728\u67d0\u9876\u70b9\u6240\u4ee3\u8868\u7684\u4e8b\u4ef6\u53d1\u751f\u540e\uff0c\u4ece\u8be5\u9876\u70b9\u51fa\u53d1\u7684\u5404\u6709\u5411\u8fb9\u6240\u4ee3\u8868\u7684\u6d3b\u52a8\u624d\u80fd\u5f00\u59cb\uff1b \u2461 \u53ea\u6709\u5728\u8fdb\u5165\u67d0\u9876\u70b9\u7684\u5404\u6709\u5411\u8fb9\u6240\u4ee3\u8868\u7684\u6d3b\u52a8\u90fd\u5df2\u7ed3\u675f\u65f6\uff0c\u8be5\u9876\u70b9\u6240\u4ee3\u8868\u7684\u4e8b\u4ef6\u624d\u80fd\u53d1\u751f\u3002 \u53e6\u5916\uff0c\u6709\u4e9b\u6d3b\u52a8\u662f\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u7684 \u5728AOE\u7f51\u4e2d\u4ec5\u6709\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\uff0c\u79f0\u4e3a \u5f00\u59cb\u9876\u70b9\uff08\u6e90\u70b9\uff09 \uff0c\u5b83\u8868\u793a\u6574\u4e2a\u5de5\u7a0b\u7684\u5f00\u59cb\uff1b \u4e5f\u4ec5\u6709\u4e00\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u9876\u70b9\uff0c\u79f0\u4e3a \u7ed3\u675f\u9876\u70b9\uff08\u6c47\u70b9\uff09 \uff0c\u5b83\u8868\u793a\u6574\u4e2a\u5de5\u7a0b\u7684\u7ed3\u675f\u3002 \u4e8c\u3001\u5173\u952e\u8def\u5f84 \u00b6 \u4ece\u6e90\u70b9\u5230\u6c47\u70b9 \u7684 \u6709\u5411\u8def\u5f84 \u53ef\u80fd\u6709\u591a\u6761\uff0c\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u5177\u6709 \u6700\u5927\u8def\u5f84\u957f\u5ea6 \u7684\u8def\u5f84\u79f0\u4e3a \u5173\u952e\u8def\u5f84 \uff0c\u800c\u628a \u5173\u952e\u8def\u5f84\u4e0a\u7684\u6d3b\u52a8 \u79f0\u4e3a \u5173\u952e\u6d3b\u52a8 \u7279\u6027 \uff1a \u82e5\u5173\u952e\u6d3b\u52a8\u8017\u65f6\u589e\u52a0\uff0c\u5219\u6574\u4e2a\u5de5\u7a0b\u7684\u5de5\u671f\u5c06\u589e\u957f \u7f29\u77ed\u5173\u952e\u6d3b\u52a8\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u7f29\u77ed\u6574\u4e2a\u5de5\u7a0b\u7684\u5de5\u671f \u5f53\u7f29\u77ed\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff0c\u5173\u952e\u6d3b\u52a8\u53ef\u80fd\u4f1a\u53d8\u6210\u975e\u5173\u952e\u6d3b\u52a8 \u53ef\u80fd\u6709\u591a\u6761\u5173\u952e\u8def\u5f84\uff0c\u53ea\u63d0\u9ad8\u4e00\u6761\u5173\u952e\u8def\u5f84\u4e0a\u7684\u5173\u952e\u6d3b\u52a8\u901f\u5ea6\u5e76\u4e0d\u80fd\u7f29\u77ed\u6574\u4e2a\u5de5\u7a0b\u7684\u5de5\u671f\uff0c\u53ea\u6709\u52a0\u5feb\u90a3\u4e9b\u5305\u62ec\u5728\u6240\u6709\u5173\u952e\u8def\u5f84\u4e0a\u7684\u5173\u952e\u6d3b\u52a8\u624d\u80fd\u8fbe\u5230\u7f29\u77ed\u5de5\u671f\u7684\u76ee\u7684\u3002 \u8ba1\u7b97 \uff1a \u4e8b\u4ef6\u6700\u65e9\u3001\u6700\u8fdf\u53d1\u751f\u65f6\u95f4 \u6d3b\u52a8\u6700\u65e9\u3001\u6700\u8fdf\u5f00\u59cb\u65f6\u95f4 \u6d3b\u52a8\u7684\u65f6\u95f4\u4f59\u91cf=\u6d3b\u52a8\u6700\u8fdf\u5f00\u59cb-\u6700\u65e9\u5f00\u59cb","title":"5.9\u5173\u952e\u8def\u5f84"},{"location":"05-%E5%9B%BE/6.9%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#_1","text":"","title":"\u5173\u952e\u8def\u5f84"},{"location":"05-%E5%9B%BE/6.9%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#aoe","text":"AOE\u7f51 \uff08Activity On Edge NetWork\uff0c\u7528 \u8fb9\u8868\u793a\u6d3b\u52a8 \u7684\u7f51\uff09\uff1a \u5e26\u6743\u6709\u5411\u56fe \u4e2d\uff0c \u9876\u70b9\u8868\u793a\u4e8b\u4ef6 \uff0c \u6709\u5411\u8fb9\u8868\u793a\u6d3b\u52a8 \uff0c \u8fb9\u4e0a\u7684\u6743\u503c\u8868\u793a\u5b8c\u6210\u8be5\u6d3b\u52a8\u7684\u5f00\u9500 \u3002 AOE\u7f51\u5177\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6027\u8d28\uff1a \u2460\u53ea\u6709\u5728\u67d0\u9876\u70b9\u6240\u4ee3\u8868\u7684\u4e8b\u4ef6\u53d1\u751f\u540e\uff0c\u4ece\u8be5\u9876\u70b9\u51fa\u53d1\u7684\u5404\u6709\u5411\u8fb9\u6240\u4ee3\u8868\u7684\u6d3b\u52a8\u624d\u80fd\u5f00\u59cb\uff1b \u2461 \u53ea\u6709\u5728\u8fdb\u5165\u67d0\u9876\u70b9\u7684\u5404\u6709\u5411\u8fb9\u6240\u4ee3\u8868\u7684\u6d3b\u52a8\u90fd\u5df2\u7ed3\u675f\u65f6\uff0c\u8be5\u9876\u70b9\u6240\u4ee3\u8868\u7684\u4e8b\u4ef6\u624d\u80fd\u53d1\u751f\u3002 \u53e6\u5916\uff0c\u6709\u4e9b\u6d3b\u52a8\u662f\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u7684 \u5728AOE\u7f51\u4e2d\u4ec5\u6709\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\uff0c\u79f0\u4e3a \u5f00\u59cb\u9876\u70b9\uff08\u6e90\u70b9\uff09 \uff0c\u5b83\u8868\u793a\u6574\u4e2a\u5de5\u7a0b\u7684\u5f00\u59cb\uff1b \u4e5f\u4ec5\u6709\u4e00\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u9876\u70b9\uff0c\u79f0\u4e3a \u7ed3\u675f\u9876\u70b9\uff08\u6c47\u70b9\uff09 \uff0c\u5b83\u8868\u793a\u6574\u4e2a\u5de5\u7a0b\u7684\u7ed3\u675f\u3002","title":"\u4e00\u3001AOE\u7f51"},{"location":"05-%E5%9B%BE/6.9%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#_2","text":"\u4ece\u6e90\u70b9\u5230\u6c47\u70b9 \u7684 \u6709\u5411\u8def\u5f84 \u53ef\u80fd\u6709\u591a\u6761\uff0c\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u5177\u6709 \u6700\u5927\u8def\u5f84\u957f\u5ea6 \u7684\u8def\u5f84\u79f0\u4e3a \u5173\u952e\u8def\u5f84 \uff0c\u800c\u628a \u5173\u952e\u8def\u5f84\u4e0a\u7684\u6d3b\u52a8 \u79f0\u4e3a \u5173\u952e\u6d3b\u52a8 \u7279\u6027 \uff1a \u82e5\u5173\u952e\u6d3b\u52a8\u8017\u65f6\u589e\u52a0\uff0c\u5219\u6574\u4e2a\u5de5\u7a0b\u7684\u5de5\u671f\u5c06\u589e\u957f \u7f29\u77ed\u5173\u952e\u6d3b\u52a8\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u7f29\u77ed\u6574\u4e2a\u5de5\u7a0b\u7684\u5de5\u671f \u5f53\u7f29\u77ed\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff0c\u5173\u952e\u6d3b\u52a8\u53ef\u80fd\u4f1a\u53d8\u6210\u975e\u5173\u952e\u6d3b\u52a8 \u53ef\u80fd\u6709\u591a\u6761\u5173\u952e\u8def\u5f84\uff0c\u53ea\u63d0\u9ad8\u4e00\u6761\u5173\u952e\u8def\u5f84\u4e0a\u7684\u5173\u952e\u6d3b\u52a8\u901f\u5ea6\u5e76\u4e0d\u80fd\u7f29\u77ed\u6574\u4e2a\u5de5\u7a0b\u7684\u5de5\u671f\uff0c\u53ea\u6709\u52a0\u5feb\u90a3\u4e9b\u5305\u62ec\u5728\u6240\u6709\u5173\u952e\u8def\u5f84\u4e0a\u7684\u5173\u952e\u6d3b\u52a8\u624d\u80fd\u8fbe\u5230\u7f29\u77ed\u5de5\u671f\u7684\u76ee\u7684\u3002 \u8ba1\u7b97 \uff1a \u4e8b\u4ef6\u6700\u65e9\u3001\u6700\u8fdf\u53d1\u751f\u65f6\u95f4 \u6d3b\u52a8\u6700\u65e9\u3001\u6700\u8fdf\u5f00\u59cb\u65f6\u95f4 \u6d3b\u52a8\u7684\u65f6\u95f4\u4f59\u91cf=\u6d3b\u52a8\u6700\u8fdf\u5f00\u59cb-\u6700\u65e9\u5f00\u59cb","title":"\u4e8c\u3001\u5173\u952e\u8def\u5f84"},{"location":"06-%E6%9F%A5%E6%89%BE/7.1%E6%9F%A5%E6%89%BE/","text":"\u67e5\u627e\u2014\u2014Search \u00b6 \u4e00\u3001\u67e5\u627e\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 \u67e5\u627e \uff1a\u5728\u6570\u636e\u96c6\u5408\u4e2d\u5bfb\u627e\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u7684\u6570\u636e\u5143\u7d20\u7684\u8fc7\u7a0b\u79f0\u4e3a\u67e5\u627e\u3002 \u67e5\u627e\u8868 \uff08\u67e5\u627e\u7ed3\u6784\uff09\uff1a\u7528\u4e8e\u67e5\u627e\u7684\u6570\u636e\u96c6\u5408\u79f0\u4e3a\u67e5\u627e\u8868\uff0c\u5b83\u7531\u540c\u4e00\u7c7b\u578b\u7684\u6570\u636e\u5143\u7d20\uff08\u6216\u8bb0\u5f55\uff09\u7ec4\u6210\u3002 \u5173\u952e\u5b57 \uff1a\u6570\u636e\u5143\u7d20\u4e2d\u552f\u4e00\u6807\u8bc6\u8be5\u5143\u7d20\u7684\u67d0\u4e2a\u6570\u636e\u9879\u7684\u503c\uff0c\u4f7f\u7528\u57fa\u4e8e\u5173\u952e\u5b57\u7684\u67e5\u627e\uff0c\u67e5\u627e\u7ed3\u679c\u5e94\u8be5\u662f\u552f\u4e00\u7684\u3002 \u4e8c\u3001\u5bf9\u67e5\u627e\u8868\u7684\u5e38\u89c1\u64cd\u4f5c \u00b6 \u67e5\u627e\u548c\u63d2\u5165\u3001\u5220\u9664 \u9759\u6001\u67e5\u627e\u8868 \u53ea\u5173\u6ce8 \u67e5\u627e\u901f\u5ea6 \uff0c \u52a8\u6001\u67e5\u627e\u8868 \u65e2\u5173\u6ce8 \u67e5\u627e\u901f\u5ea6 \u53c8\u5173\u6ce8 \u63d2\u5165\u5220\u9664\u662f\u5426\u65b9\u4fbf \u3002 \u4e09\u3001\u67e5\u627e\u7b97\u6cd5\u7684\u8bc4\u4ef7\u6307\u6807 \u00b6 \u67e5\u627e\u957f\u5ea6 \uff1a\u5bf9\u6bd4\u5173\u952e\u5b57\u7684\u6b21\u6570 \u5e73\u5747\u67e5\u627e\u957f\u5ea6(ASL) \uff1a\u5bf9\u6bd4\u5173\u952e\u5b57\u6b21\u6570\u7684\u5e73\u5747\u503c\u3002 \\( \\(ASL=\\sum_{i=1}^{n}{P_iC_i}\\) \\) \u2014\u2014\u67e5\u627e\u6982\u7387\u00d7\u67e5\u627e\u957f\u5ea6\u7684\u603b\u548c ASL\u53cd\u6620\u4e86\u67e5\u627e\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u67e5\u627e\u6210\u529f\u548c\u67e5\u627e\u5931\u8d25\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff1a \u00b6","title":"6.1\u67e5\u627e"},{"location":"06-%E6%9F%A5%E6%89%BE/7.1%E6%9F%A5%E6%89%BE/#search","text":"","title":"\u67e5\u627e\u2014\u2014Search"},{"location":"06-%E6%9F%A5%E6%89%BE/7.1%E6%9F%A5%E6%89%BE/#_1","text":"\u67e5\u627e \uff1a\u5728\u6570\u636e\u96c6\u5408\u4e2d\u5bfb\u627e\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u7684\u6570\u636e\u5143\u7d20\u7684\u8fc7\u7a0b\u79f0\u4e3a\u67e5\u627e\u3002 \u67e5\u627e\u8868 \uff08\u67e5\u627e\u7ed3\u6784\uff09\uff1a\u7528\u4e8e\u67e5\u627e\u7684\u6570\u636e\u96c6\u5408\u79f0\u4e3a\u67e5\u627e\u8868\uff0c\u5b83\u7531\u540c\u4e00\u7c7b\u578b\u7684\u6570\u636e\u5143\u7d20\uff08\u6216\u8bb0\u5f55\uff09\u7ec4\u6210\u3002 \u5173\u952e\u5b57 \uff1a\u6570\u636e\u5143\u7d20\u4e2d\u552f\u4e00\u6807\u8bc6\u8be5\u5143\u7d20\u7684\u67d0\u4e2a\u6570\u636e\u9879\u7684\u503c\uff0c\u4f7f\u7528\u57fa\u4e8e\u5173\u952e\u5b57\u7684\u67e5\u627e\uff0c\u67e5\u627e\u7ed3\u679c\u5e94\u8be5\u662f\u552f\u4e00\u7684\u3002","title":"\u4e00\u3001\u67e5\u627e\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.1%E6%9F%A5%E6%89%BE/#_2","text":"\u67e5\u627e\u548c\u63d2\u5165\u3001\u5220\u9664 \u9759\u6001\u67e5\u627e\u8868 \u53ea\u5173\u6ce8 \u67e5\u627e\u901f\u5ea6 \uff0c \u52a8\u6001\u67e5\u627e\u8868 \u65e2\u5173\u6ce8 \u67e5\u627e\u901f\u5ea6 \u53c8\u5173\u6ce8 \u63d2\u5165\u5220\u9664\u662f\u5426\u65b9\u4fbf \u3002","title":"\u4e8c\u3001\u5bf9\u67e5\u627e\u8868\u7684\u5e38\u89c1\u64cd\u4f5c"},{"location":"06-%E6%9F%A5%E6%89%BE/7.1%E6%9F%A5%E6%89%BE/#_3","text":"\u67e5\u627e\u957f\u5ea6 \uff1a\u5bf9\u6bd4\u5173\u952e\u5b57\u7684\u6b21\u6570 \u5e73\u5747\u67e5\u627e\u957f\u5ea6(ASL) \uff1a\u5bf9\u6bd4\u5173\u952e\u5b57\u6b21\u6570\u7684\u5e73\u5747\u503c\u3002 \\( \\(ASL=\\sum_{i=1}^{n}{P_iC_i}\\) \\) \u2014\u2014\u67e5\u627e\u6982\u7387\u00d7\u67e5\u627e\u957f\u5ea6\u7684\u603b\u548c ASL\u53cd\u6620\u4e86\u67e5\u627e\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002","title":"\u4e09\u3001\u67e5\u627e\u7b97\u6cd5\u7684\u8bc4\u4ef7\u6307\u6807"},{"location":"06-%E6%9F%A5%E6%89%BE/7.1%E6%9F%A5%E6%89%BE/#_4","text":"","title":"\u67e5\u627e\u6210\u529f\u548c\u67e5\u627e\u5931\u8d25\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff1a"},{"location":"06-%E6%9F%A5%E6%89%BE/7.2%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/","text":"\u987a\u5e8f\u67e5\u627e\u2014\u2014Sequential Search \u00b6 \u4e00\u3001\u987a\u5e8f\u67e5\u627e\u7684\u5b9a\u4e49 \u00b6 \u987a\u5e8f\u67e5\u627e \uff0c\u53c8\u53eb \u7ebf\u6027\u67e5\u627e \u3002 \u4e8c\u3001\u987a\u5e8f\u67e5\u627e\u7684\u5b9e\u73b0 \u00b6 \u7b97\u6cd5\u601d\u60f3 \uff1a\u4ece\u5934\u6328\u4e2a\u67e5\u627e\u3002 \u666e\u901a\u4ee3\u7801\uff1a //\u67e5\u627e\u8868\u7684\u6570\u636e\u7ed3\u6784\uff08\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\uff09 typedef struct { ElemType * elem ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u6570\u7ec4\u7684\u6307\u9488 int TableLen ; //\u67e5\u627e\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SSTable ; //\u987a\u5e8f\u67e5\u627e int Search_Seq ( SSTable ST , ElemType key ){ int i ; for ( i = 0 ; i < ST . TableLen && ST . elem [ i ] != key ; ++ i ){ //\u4ece\u524d\u5f80\u540e\u627e\uff0c\u5224\u65ad\u662f\u5426\u8d8a\u754c return i == ST . TableLen ? -1 : i ; //\u67e5\u627e\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5143\u7d20\u4e0b\u6807\uff1b\u67e5\u627e\u5931\u8d25\uff0c\u5219\u8fd4\u56de-1 } } \u6709\u54e8\u5175\u7684\u4ee3\u7801\uff1a\u4e0d\u7528\u5224\u65ad\u8d8a\u754c\uff0c\u6548\u7387\u66f4\u9ad8 //\u67e5\u627e\u8868\u7684\u6570\u636e\u7ed3\u6784\uff08\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\uff09 typedef struct { ElemType * elem ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u6570\u7ec4\u7684\u6307\u9488 int TableLen ; //\u67e5\u627e\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SSTable ; //\u987a\u5e8f\u67e5\u627e int Search_Seq ( SSTable ST , ElemType key ){ ST . elem [ 0 ] = key ; //\u8bbe\u7f6e\"\u54e8\u5175\" int i ; for ( i = ST . TableLen ; ST . elem [ i ] != key ; -- i ){ //\u4ece\u540e\u5f80\u524d\u627e\uff0c\u4e0d\u7528\u5224\u65ad\u8d8a\u754c return i ; //\u67e5\u627e\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5143\u7d20\u4e0b\u6807\uff1b\u67e5\u627e\u5931\u8d25\uff0c\u5219\u8fd4\u56de0 } } \u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790 \u00b6 \u67e5\u627e\u6210\u529f \uff1a \\( \\(ASL_{\u6210\u529f}=\\frac{1}{n}+\\frac{2}{n}+\\cdots+\\frac{n}{n}=\\frac{n+1}{2}\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u67e5\u627e\u6210\u529f \uff1a \\( \\(ASL_{\u5931\u8d25}=n+1\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u5219\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n)\\) \\) \u56db\u3001\u987a\u5e8f\u67e5\u627e\u7684\u4f18\u5316 \u00b6 \u82e5\u67e5\u627e\u8868\u662f \u6709\u5e8f\u8868 \uff0c\u53ef \u4f18\u5316\u67e5\u627e\u5931\u8d25 \u7684ASL \u82e5\u67e5\u627e\u5143\u7d20\u7684 \u67e5\u627e\u6982\u7387\u4e0d\u540c \uff0c\u5c06 \u6982\u7387\u9ad8\u7684\u653e\u524d\u9762 \u6392\u5e8f\uff0c\u53ef \u4f18\u5316\u67e5\u627e\u6210\u529f \u7684ASL","title":"6.2\u987a\u5e8f\u67e5\u627e"},{"location":"06-%E6%9F%A5%E6%89%BE/7.2%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/#sequential-search","text":"","title":"\u987a\u5e8f\u67e5\u627e\u2014\u2014Sequential Search"},{"location":"06-%E6%9F%A5%E6%89%BE/7.2%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/#_1","text":"\u987a\u5e8f\u67e5\u627e \uff0c\u53c8\u53eb \u7ebf\u6027\u67e5\u627e \u3002","title":"\u4e00\u3001\u987a\u5e8f\u67e5\u627e\u7684\u5b9a\u4e49"},{"location":"06-%E6%9F%A5%E6%89%BE/7.2%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/#_2","text":"\u7b97\u6cd5\u601d\u60f3 \uff1a\u4ece\u5934\u6328\u4e2a\u67e5\u627e\u3002 \u666e\u901a\u4ee3\u7801\uff1a //\u67e5\u627e\u8868\u7684\u6570\u636e\u7ed3\u6784\uff08\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\uff09 typedef struct { ElemType * elem ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u6570\u7ec4\u7684\u6307\u9488 int TableLen ; //\u67e5\u627e\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SSTable ; //\u987a\u5e8f\u67e5\u627e int Search_Seq ( SSTable ST , ElemType key ){ int i ; for ( i = 0 ; i < ST . TableLen && ST . elem [ i ] != key ; ++ i ){ //\u4ece\u524d\u5f80\u540e\u627e\uff0c\u5224\u65ad\u662f\u5426\u8d8a\u754c return i == ST . TableLen ? -1 : i ; //\u67e5\u627e\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5143\u7d20\u4e0b\u6807\uff1b\u67e5\u627e\u5931\u8d25\uff0c\u5219\u8fd4\u56de-1 } } \u6709\u54e8\u5175\u7684\u4ee3\u7801\uff1a\u4e0d\u7528\u5224\u65ad\u8d8a\u754c\uff0c\u6548\u7387\u66f4\u9ad8 //\u67e5\u627e\u8868\u7684\u6570\u636e\u7ed3\u6784\uff08\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\uff09 typedef struct { ElemType * elem ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u6570\u7ec4\u7684\u6307\u9488 int TableLen ; //\u67e5\u627e\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SSTable ; //\u987a\u5e8f\u67e5\u627e int Search_Seq ( SSTable ST , ElemType key ){ ST . elem [ 0 ] = key ; //\u8bbe\u7f6e\"\u54e8\u5175\" int i ; for ( i = ST . TableLen ; ST . elem [ i ] != key ; -- i ){ //\u4ece\u540e\u5f80\u524d\u627e\uff0c\u4e0d\u7528\u5224\u65ad\u8d8a\u754c return i ; //\u67e5\u627e\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5143\u7d20\u4e0b\u6807\uff1b\u67e5\u627e\u5931\u8d25\uff0c\u5219\u8fd4\u56de0 } }","title":"\u4e8c\u3001\u987a\u5e8f\u67e5\u627e\u7684\u5b9e\u73b0"},{"location":"06-%E6%9F%A5%E6%89%BE/7.2%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/#_3","text":"\u67e5\u627e\u6210\u529f \uff1a \\( \\(ASL_{\u6210\u529f}=\\frac{1}{n}+\\frac{2}{n}+\\cdots+\\frac{n}{n}=\\frac{n+1}{2}\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u67e5\u627e\u6210\u529f \uff1a \\( \\(ASL_{\u5931\u8d25}=n+1\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u5219\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n)\\) \\)","title":"\u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790"},{"location":"06-%E6%9F%A5%E6%89%BE/7.2%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/#_4","text":"\u82e5\u67e5\u627e\u8868\u662f \u6709\u5e8f\u8868 \uff0c\u53ef \u4f18\u5316\u67e5\u627e\u5931\u8d25 \u7684ASL \u82e5\u67e5\u627e\u5143\u7d20\u7684 \u67e5\u627e\u6982\u7387\u4e0d\u540c \uff0c\u5c06 \u6982\u7387\u9ad8\u7684\u653e\u524d\u9762 \u6392\u5e8f\uff0c\u53ef \u4f18\u5316\u67e5\u627e\u6210\u529f \u7684ASL","title":"\u56db\u3001\u987a\u5e8f\u67e5\u627e\u7684\u4f18\u5316"},{"location":"06-%E6%9F%A5%E6%89%BE/7.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/","text":"\u6298\u534a\u67e5\u627e\u2014\u2014Binary Search \u00b6 \u4e00\u3001\u6298\u534a\u67e5\u627e\u7684\u5b9a\u4e49 \u00b6 \u6298\u534a\u67e5\u627e \uff0c\u53c8\u53eb \u4e8c\u5206\u67e5\u627e \u3002\u4ec5\u9002\u7528\u4e8e \u6709\u5e8f\u7684\u987a\u5e8f\u8868 \u3002 \u4e8c\u3001\u6298\u534a\u67e5\u627e\u7684\u5b9e\u73b0 \u00b6 \u7b97\u6cd5\u601d\u60f3 \uff1a\u6bcf\u6b21\u4ece\u4e2d\u95f4\u5206\uff0c\u5224\u65ad\u81ea\u5df1\u662f\u54ea\u4e00\u534a \u666e\u901a\u4ee3\u7801\uff1a //\u67e5\u627e\u8868\u7684\u6570\u636e\u7ed3\u6784\uff08\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\uff09 typedef struct { ElemType * elem ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u6570\u7ec4\u7684\u6307\u9488 int TableLen ; //\u67e5\u627e\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SSTable ; //\u6298\u534a\u67e5\u627e int Binary_Search ( SSTable L , ElemType key ){ int low = 0 , high = L . TableLen -1 , mid ; while ( low <= high ){ mid = ( low + high ) / 2 ; //\u53d6\u4e2d\u95f4\u503c if ( L . elem [ mid ] == key ){ return mid ; //\u67e5\u627e\u6210\u529f\uff0c\u5219\u8fd4\u56de\u6240\u5728\u4f4d\u7f6e } else if ( L . elem [ mid ] > key ){ high = mid - 1 ; //\u4ece\u524d\u534a\u90e8\u5206\u7ee7\u7eed\u67e5 } else { low = mid + 1 ; //\u4ece\u540e\u534a\u90e8\u5206\u7ee7\u7eed\u67e5 } } return -1 ; //\u67e5\u627e\u5931\u8d25\uff0c\u8fd4\u56de-1 } \u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790 \u00b6 \u56db\u3001\u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811\u7684\u6784\u9020 \u00b6 \u6784\u9020\uff1a \u00b6 \u7279\u6027\uff1a \u00b6 \u67e5\u627e\u8868\u6709n\u4e2a\u5173\u952e\u5b57\uff0c\u5219\u5931\u8d25\u7ed3\u70b9\u6709n+1\u4e2a \u4e0e \u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811 \u7684\u9ad8\u5ea6h\u6709\u5173\u3002\u9ad8\u5ea6\u8d8a\u5c0f\uff0c\u67e5\u627e\u6548\u7387\u8d8a\u9ad8 \u6700\u597d\u60c5\u51b5\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6= \\( \\(O(log_2n)\\) \\) \u6700\u574f\u60c5\u51b5\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6= \\( \\(O(n)\\) \\) \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(log_2n)\\) \\)","title":"6.3\u6298\u534a\u67e5\u627e"},{"location":"06-%E6%9F%A5%E6%89%BE/7.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/#binary-search","text":"","title":"\u6298\u534a\u67e5\u627e\u2014\u2014Binary Search"},{"location":"06-%E6%9F%A5%E6%89%BE/7.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/#_1","text":"\u6298\u534a\u67e5\u627e \uff0c\u53c8\u53eb \u4e8c\u5206\u67e5\u627e \u3002\u4ec5\u9002\u7528\u4e8e \u6709\u5e8f\u7684\u987a\u5e8f\u8868 \u3002","title":"\u4e00\u3001\u6298\u534a\u67e5\u627e\u7684\u5b9a\u4e49"},{"location":"06-%E6%9F%A5%E6%89%BE/7.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/#_2","text":"\u7b97\u6cd5\u601d\u60f3 \uff1a\u6bcf\u6b21\u4ece\u4e2d\u95f4\u5206\uff0c\u5224\u65ad\u81ea\u5df1\u662f\u54ea\u4e00\u534a \u666e\u901a\u4ee3\u7801\uff1a //\u67e5\u627e\u8868\u7684\u6570\u636e\u7ed3\u6784\uff08\u52a8\u6001\u5206\u914d\u7684\u987a\u5e8f\u8868\uff09 typedef struct { ElemType * elem ; //\u6307\u5411\u201c\u52a8\u6001\u201d\u5206\u914d\u7684\u6570\u7ec4\u7684\u6307\u9488 int TableLen ; //\u67e5\u627e\u8868\u7684\u5f53\u524d\u957f\u5ea6 } SSTable ; //\u6298\u534a\u67e5\u627e int Binary_Search ( SSTable L , ElemType key ){ int low = 0 , high = L . TableLen -1 , mid ; while ( low <= high ){ mid = ( low + high ) / 2 ; //\u53d6\u4e2d\u95f4\u503c if ( L . elem [ mid ] == key ){ return mid ; //\u67e5\u627e\u6210\u529f\uff0c\u5219\u8fd4\u56de\u6240\u5728\u4f4d\u7f6e } else if ( L . elem [ mid ] > key ){ high = mid - 1 ; //\u4ece\u524d\u534a\u90e8\u5206\u7ee7\u7eed\u67e5 } else { low = mid + 1 ; //\u4ece\u540e\u534a\u90e8\u5206\u7ee7\u7eed\u67e5 } } return -1 ; //\u67e5\u627e\u5931\u8d25\uff0c\u8fd4\u56de-1 }","title":"\u4e8c\u3001\u6298\u534a\u67e5\u627e\u7684\u5b9e\u73b0"},{"location":"06-%E6%9F%A5%E6%89%BE/7.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/#_3","text":"","title":"\u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790"},{"location":"06-%E6%9F%A5%E6%89%BE/7.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/#_4","text":"","title":"\u56db\u3001\u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811\u7684\u6784\u9020"},{"location":"06-%E6%9F%A5%E6%89%BE/7.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/#_5","text":"","title":"\u6784\u9020\uff1a"},{"location":"06-%E6%9F%A5%E6%89%BE/7.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/#_6","text":"\u67e5\u627e\u8868\u6709n\u4e2a\u5173\u952e\u5b57\uff0c\u5219\u5931\u8d25\u7ed3\u70b9\u6709n+1\u4e2a \u4e0e \u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811 \u7684\u9ad8\u5ea6h\u6709\u5173\u3002\u9ad8\u5ea6\u8d8a\u5c0f\uff0c\u67e5\u627e\u6548\u7387\u8d8a\u9ad8 \u6700\u597d\u60c5\u51b5\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6= \\( \\(O(log_2n)\\) \\) \u6700\u574f\u60c5\u51b5\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6= \\( \\(O(n)\\) \\) \u5219 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(log_2n)\\) \\)","title":"\u7279\u6027\uff1a"},{"location":"06-%E6%9F%A5%E6%89%BE/7.4%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/","text":"\u5206\u5757\u67e5\u627e\u2014\u2014Block Search \u00b6 \u4e00\u3001\u5206\u5757\u67e5\u627e\u7684\u5b9a\u4e49 \u00b6 \u5206\u5757\u67e5\u627e \uff0c\u53c8\u53eb \u7d22\u5f15\u987a\u5e8f\u67e5\u627e \u3002 \u4e8c\u3001\u6298\u534a\u67e5\u627e\u7684\u5b9e\u73b0 \u00b6 \u7b97\u6cd5\u601d\u60f3 \uff1a\u7528\u4e00\u4e2a \u7d22\u5f15\u8868 \u7ed9\u6570\u636e\u5f52\u7c7b\u3002 \u7b97\u6cd5\u8fc7\u7a0b\uff1a \u2460\u5728 \u7d22\u5f15\u8868 \u4e2d\u786e\u5b9a\u5f85\u67e5\u8bb0\u5f55\u6240\u5c5e\u7684\u5206\u5757\uff08 \u53ef\u987a\u5e8f\u3001\u53ef\u6298\u534a \uff09 \u2461\u5728 \u5757\u5185\u987a\u5e8f\u67e5\u627e \u7528\u6298\u534a\u67e5\u627e\u7d22\u5f15\u8868\uff1a \u00b6 \u82e5\u7d22\u5f15\u8868\u4e2d\u4e0d\u5305\u542b\u76ee\u6807\u5173\u952e\u5b57\uff0c\u5219\u6298\u534a\u67e5\u627e\u7d22\u5f15\u8868 \u6700\u7ec8\u505c\u5728low>high \uff0c\u8981 \u5728low\u6240\u6307\u5206\u5757\u4e2d\u67e5\u627e \u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790 \u00b6 \u56db\u3001\u5206\u5757\u67e5\u627e\u7684\u4f18\u5316 \u00b6 \u4e0a\u9762\u7684\u5206\u5757\u67e5\u627e\u5bf9\u63d2\u5165\u5220\u9664\u4e0d\u53cb\u597d\u3002 \u6539\u8fdb\uff1a\u7d22\u5f15\u8868\u4e3a\u987a\u5e8f\u8868\uff0c\u67e5\u627e\u8868\u4e3a\u94fe\u8868\u3002","title":"6.4\u5206\u5757\u67e5\u627e"},{"location":"06-%E6%9F%A5%E6%89%BE/7.4%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/#block-search","text":"","title":"\u5206\u5757\u67e5\u627e\u2014\u2014Block Search"},{"location":"06-%E6%9F%A5%E6%89%BE/7.4%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/#_1","text":"\u5206\u5757\u67e5\u627e \uff0c\u53c8\u53eb \u7d22\u5f15\u987a\u5e8f\u67e5\u627e \u3002","title":"\u4e00\u3001\u5206\u5757\u67e5\u627e\u7684\u5b9a\u4e49"},{"location":"06-%E6%9F%A5%E6%89%BE/7.4%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/#_2","text":"\u7b97\u6cd5\u601d\u60f3 \uff1a\u7528\u4e00\u4e2a \u7d22\u5f15\u8868 \u7ed9\u6570\u636e\u5f52\u7c7b\u3002 \u7b97\u6cd5\u8fc7\u7a0b\uff1a \u2460\u5728 \u7d22\u5f15\u8868 \u4e2d\u786e\u5b9a\u5f85\u67e5\u8bb0\u5f55\u6240\u5c5e\u7684\u5206\u5757\uff08 \u53ef\u987a\u5e8f\u3001\u53ef\u6298\u534a \uff09 \u2461\u5728 \u5757\u5185\u987a\u5e8f\u67e5\u627e","title":"\u4e8c\u3001\u6298\u534a\u67e5\u627e\u7684\u5b9e\u73b0"},{"location":"06-%E6%9F%A5%E6%89%BE/7.4%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/#_3","text":"\u82e5\u7d22\u5f15\u8868\u4e2d\u4e0d\u5305\u542b\u76ee\u6807\u5173\u952e\u5b57\uff0c\u5219\u6298\u534a\u67e5\u627e\u7d22\u5f15\u8868 \u6700\u7ec8\u505c\u5728low>high \uff0c\u8981 \u5728low\u6240\u6307\u5206\u5757\u4e2d\u67e5\u627e","title":"\u7528\u6298\u534a\u67e5\u627e\u7d22\u5f15\u8868\uff1a"},{"location":"06-%E6%9F%A5%E6%89%BE/7.4%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/#_4","text":"","title":"\u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790"},{"location":"06-%E6%9F%A5%E6%89%BE/7.4%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/#_5","text":"\u4e0a\u9762\u7684\u5206\u5757\u67e5\u627e\u5bf9\u63d2\u5165\u5220\u9664\u4e0d\u53cb\u597d\u3002 \u6539\u8fdb\uff1a\u7d22\u5f15\u8868\u4e3a\u987a\u5e8f\u8868\uff0c\u67e5\u627e\u8868\u4e3a\u94fe\u8868\u3002","title":"\u56db\u3001\u5206\u5757\u67e5\u627e\u7684\u4f18\u5316"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/","text":"B\u6811\u2014\u2014B-Tree \u00b6 \u4e00\u3001B\u6811\u7684\u5b9a\u4e49 \u00b6 B\u6811 \uff0c\u53c8\u540d \u591a\u8def\u5e73\u8861\u67e5\u627e\u6811 \uff08 m\u53c9\u67e5\u627e\u6811 \uff09 \u6570\u636e\u5e93\u7d22\u5f15\u6280\u672f\u91cc\u5927\u91cf\u4f7f\u7528\u8005B\u6811\u548cB+\u6811\u7684\u6570\u636e\u7ed3\u6784. B\u6811\u662f\u7531 \u4e8c\u53c9\u6392\u5e8f\u6811 \u5347\u7ea7\u4e3a m\u53c9\u67e5\u627e\u6811 \u6838\u5fc3\u7279\u5f81 \u00b6 \u4e8c\u3001B\u6811\u7684\u5b9e\u73b0 \u00b6 \u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u7c7b\u578b\u8868\u8ff0\uff08\u4e0e\u4e8c\u53c9\u6811\u4e00\u6837\uff09\uff08\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09 \u00b6 typedef struct TreeNode { int data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BSTNode , * BSTree ; B\u6811\u7684\u7c7b\u578b\u8868\u8ff0\uff08m\u53c9\u67e5\u627e\u6811\uff09 \u00b6 typedef struct TreeNode { int datas [ m -1 ]; //zui struct BiTNode * child [ m ]; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BSTNode , * BSTree ; 5\u53c9\u67e5\u627e\u6811 \u00b6 \u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790 \u00b6 \u4fdd\u8bc1\u67e5\u627e\u6548\u7387\uff1a \u00b6 \u6bcf\u4e2a\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u592a\u5c11\uff0c\u5bfc\u81f4\u6811\u53d8\u9ad8\uff0c\u67e5\u627e\u6548\u7387\u5c31\u4f1a\u4e0b\u964d\u3002 B\u6811\u7684\u9ad8\u5ea6 \u00b6 \u6700\u5c0f\u9ad8\u5ea6\uff1a \u6700\u5927\u9ad8\u5ea6\uff1a \u7efc\u4e0a\uff0c\u9ad8\u5ea6\u4e3a\uff1a \u56db\u3001B\u6811\u7684\u63d2\u5165 \u00b6 \u63d2\u5165\u6ee1\u4e00\u4e2a\u7ed3\u70b9\u540e\uff0c\u4ece\u4e2d\u95f4\u62c6\u5f00\uff0c\u8ba9\u4e2d\u95f4\u4f4d\u7f6e\uff08 \\( \\(\\lceil m/2 \\rceil\\) \\) \uff09\u5411\u4e0a\u4ea7\u751f\u7236\u7ed3\u70b9\uff0c\u4e24\u8fb9\u6210\u4e3a\u5176\u5b69\u5b50\u7ed3\u70b9\uff0c\u4f9d\u6b21\u7c7b\u63a8 \u4e94\u3001B\u6811\u7684\u5220\u9664 \u00b6 \u60c5\u51b5\u4e00\uff1a\u5220\u9664 \u975e\u7ec8\u7aef\u7ed3\u70b9 \u4e2d\u7684\u5173\u952e\u5b57 \u60c5\u51b5\u4e00\uff1a\u5220\u9664 \u7ec8\u7aef\u7ed3\u70b9 \u4e2d\u7684\u5173\u952e\u5b57 \u2460\u5220\u966433\u65f6\u53f3\u8fb9\u7ed3\u70b9\u591f\u501f\uff1a \u2461\u5220\u966449\u65f6\uff0c\u53f3\u8fb9\u7684\u7ed3\u70b9\u4e0d\u591f\u501f\uff1a \u89e3\u51b3\u65b9\u6cd5\uff1a\u5c06 \u7236\u7ed3\u70b9\u4e2d\u5939\u7684\u5173\u952e\u5b57 \u53d6\u4e0b\u4e0e\u5de6\u53f3\u5b69\u5b50 \u5408\u5e76 \u3002","title":"6.5B\u6811"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#bb-tree","text":"","title":"B\u6811\u2014\u2014B-Tree"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#b","text":"B\u6811 \uff0c\u53c8\u540d \u591a\u8def\u5e73\u8861\u67e5\u627e\u6811 \uff08 m\u53c9\u67e5\u627e\u6811 \uff09 \u6570\u636e\u5e93\u7d22\u5f15\u6280\u672f\u91cc\u5927\u91cf\u4f7f\u7528\u8005B\u6811\u548cB+\u6811\u7684\u6570\u636e\u7ed3\u6784. B\u6811\u662f\u7531 \u4e8c\u53c9\u6392\u5e8f\u6811 \u5347\u7ea7\u4e3a m\u53c9\u67e5\u627e\u6811","title":"\u4e00\u3001B\u6811\u7684\u5b9a\u4e49"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#_1","text":"","title":"\u6838\u5fc3\u7279\u5f81"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#b_1","text":"","title":"\u4e8c\u3001B\u6811\u7684\u5b9e\u73b0"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#_2","text":"typedef struct TreeNode { int data ; //\u6570\u636e\u57df struct BiTNode * lchide , * rchild ; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BSTNode , * BSTree ;","title":"\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u7c7b\u578b\u8868\u8ff0\uff08\u4e0e\u4e8c\u53c9\u6811\u4e00\u6837\uff09\uff08\u4e8c\u53c9\u6811\u7684\u94fe\u5f0f\u5b58\u50a8\uff09"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#bm","text":"typedef struct TreeNode { int datas [ m -1 ]; //zui struct BiTNode * child [ m ]; //\u5de6\u3001\u53f3\u5b69\u5b50\u6307\u9488 } BSTNode , * BSTree ;","title":"B\u6811\u7684\u7c7b\u578b\u8868\u8ff0\uff08m\u53c9\u67e5\u627e\u6811\uff09"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#5","text":"","title":"5\u53c9\u67e5\u627e\u6811"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#_3","text":"","title":"\u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#_4","text":"\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u592a\u5c11\uff0c\u5bfc\u81f4\u6811\u53d8\u9ad8\uff0c\u67e5\u627e\u6548\u7387\u5c31\u4f1a\u4e0b\u964d\u3002","title":"\u4fdd\u8bc1\u67e5\u627e\u6548\u7387\uff1a"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#b_2","text":"\u6700\u5c0f\u9ad8\u5ea6\uff1a \u6700\u5927\u9ad8\u5ea6\uff1a \u7efc\u4e0a\uff0c\u9ad8\u5ea6\u4e3a\uff1a","title":"B\u6811\u7684\u9ad8\u5ea6"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#b_3","text":"\u63d2\u5165\u6ee1\u4e00\u4e2a\u7ed3\u70b9\u540e\uff0c\u4ece\u4e2d\u95f4\u62c6\u5f00\uff0c\u8ba9\u4e2d\u95f4\u4f4d\u7f6e\uff08 \\( \\(\\lceil m/2 \\rceil\\) \\) \uff09\u5411\u4e0a\u4ea7\u751f\u7236\u7ed3\u70b9\uff0c\u4e24\u8fb9\u6210\u4e3a\u5176\u5b69\u5b50\u7ed3\u70b9\uff0c\u4f9d\u6b21\u7c7b\u63a8","title":"\u56db\u3001B\u6811\u7684\u63d2\u5165"},{"location":"06-%E6%9F%A5%E6%89%BE/7.5B%E6%A0%91/#b_4","text":"\u60c5\u51b5\u4e00\uff1a\u5220\u9664 \u975e\u7ec8\u7aef\u7ed3\u70b9 \u4e2d\u7684\u5173\u952e\u5b57 \u60c5\u51b5\u4e00\uff1a\u5220\u9664 \u7ec8\u7aef\u7ed3\u70b9 \u4e2d\u7684\u5173\u952e\u5b57 \u2460\u5220\u966433\u65f6\u53f3\u8fb9\u7ed3\u70b9\u591f\u501f\uff1a \u2461\u5220\u966449\u65f6\uff0c\u53f3\u8fb9\u7684\u7ed3\u70b9\u4e0d\u591f\u501f\uff1a \u89e3\u51b3\u65b9\u6cd5\uff1a\u5c06 \u7236\u7ed3\u70b9\u4e2d\u5939\u7684\u5173\u952e\u5b57 \u53d6\u4e0b\u4e0e\u5de6\u53f3\u5b69\u5b50 \u5408\u5e76 \u3002","title":"\u4e94\u3001B\u6811\u7684\u5220\u9664"},{"location":"06-%E6%9F%A5%E6%89%BE/7.6B%2B%E6%A0%91/","text":"B+\u6811\u2014\u2014B-Plus-Tree \u00b6 \u4e00\u3001B\u6811\u7684\u5b9a\u4e49 \u00b6 B+\u6811 \uff0c\u53c8\u540d \u591a\u7ea7\u5206\u5757\u67e5\u627e \u3002 \u6570\u636e\u5e93\u7d22\u5f15\u6280\u672f\u91cc\u5927\u91cf\u4f7f\u7528\u8005B\u6811\u548cB+\u6811\u7684\u6570\u636e\u7ed3\u6784. B+\u6811\u662f\u7531 \u5206\u5757\u67e5\u627e \u5347\u7ea7\u4e3a \u67e5\u627e\u6811 B\u6811\u4efb\u4f55\u4e00\u5c42\u90fd\u53ef\u4ee5\u627e\u5230\uff0c\u56e0\u4e3a\u6bcf\u4e00\u5c42\u90fd\u662f\u6570\u636e \u800cB+\u6811\u9664\u53f6\u5b50\u7ed3\u70b9\u5916\uff0c\u5176\u4f59\u90fd\u662f\u5206\u7c7b\uff0c\u53ea\u6709\u6700\u5e95\u5c42\u624d\u4f1a\u6307\u5411\u6570\u636e\uff0c\u5fc5\u987b\u627e\u5230\u6700\u5e95\u5c42\u624d\u80fd\u77e5\u9053\u662f\u5426\u6210\u529f\u3002 B+\u6811\u6709\u4e24\u79cd\u67e5\u627e\u65b9\u5f0f\uff1a\u2460\u5206\u5757\u67e5\u627e\uff1a\u4ece\u6839\u7ed3\u70b9\u67e5 \u2461\u987a\u5e8f\u67e5\u627e\uff1a\u4eceP\u5f00\u59cb\u6a2a\u7740\u67e5\u3002 \u4e8c\u3001B+\u6811\u7684\u5b9e\u73b0 \u00b6 \u65e0 \u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790 \u00b6 \u4e0eB\u6811\u4e00\u6837 \u56db\u3001B+\u6811\u7684\u63d2\u5165 \u00b6 \u4e94\u3001B+\u6811\u7684\u5220\u9664 \u00b6 \u4e0eB\u6811\u4e00\u6837 \u516d\u3001B\u6811\u4e0eB+\u6811\u7684\u5bf9\u6bd4 \u00b6","title":"6.6B+\u6811"},{"location":"06-%E6%9F%A5%E6%89%BE/7.6B%2B%E6%A0%91/#bb-plus-tree","text":"","title":"B+\u6811\u2014\u2014B-Plus-Tree"},{"location":"06-%E6%9F%A5%E6%89%BE/7.6B%2B%E6%A0%91/#b","text":"B+\u6811 \uff0c\u53c8\u540d \u591a\u7ea7\u5206\u5757\u67e5\u627e \u3002 \u6570\u636e\u5e93\u7d22\u5f15\u6280\u672f\u91cc\u5927\u91cf\u4f7f\u7528\u8005B\u6811\u548cB+\u6811\u7684\u6570\u636e\u7ed3\u6784. B+\u6811\u662f\u7531 \u5206\u5757\u67e5\u627e \u5347\u7ea7\u4e3a \u67e5\u627e\u6811 B\u6811\u4efb\u4f55\u4e00\u5c42\u90fd\u53ef\u4ee5\u627e\u5230\uff0c\u56e0\u4e3a\u6bcf\u4e00\u5c42\u90fd\u662f\u6570\u636e \u800cB+\u6811\u9664\u53f6\u5b50\u7ed3\u70b9\u5916\uff0c\u5176\u4f59\u90fd\u662f\u5206\u7c7b\uff0c\u53ea\u6709\u6700\u5e95\u5c42\u624d\u4f1a\u6307\u5411\u6570\u636e\uff0c\u5fc5\u987b\u627e\u5230\u6700\u5e95\u5c42\u624d\u80fd\u77e5\u9053\u662f\u5426\u6210\u529f\u3002 B+\u6811\u6709\u4e24\u79cd\u67e5\u627e\u65b9\u5f0f\uff1a\u2460\u5206\u5757\u67e5\u627e\uff1a\u4ece\u6839\u7ed3\u70b9\u67e5 \u2461\u987a\u5e8f\u67e5\u627e\uff1a\u4eceP\u5f00\u59cb\u6a2a\u7740\u67e5\u3002","title":"\u4e00\u3001B\u6811\u7684\u5b9a\u4e49"},{"location":"06-%E6%9F%A5%E6%89%BE/7.6B%2B%E6%A0%91/#b_1","text":"\u65e0","title":"\u4e8c\u3001B+\u6811\u7684\u5b9e\u73b0"},{"location":"06-%E6%9F%A5%E6%89%BE/7.6B%2B%E6%A0%91/#_1","text":"\u4e0eB\u6811\u4e00\u6837","title":"\u4e09\u3001\u67e5\u627e\u6548\u7387\u5206\u6790"},{"location":"06-%E6%9F%A5%E6%89%BE/7.6B%2B%E6%A0%91/#b_2","text":"","title":"\u56db\u3001B+\u6811\u7684\u63d2\u5165"},{"location":"06-%E6%9F%A5%E6%89%BE/7.6B%2B%E6%A0%91/#b_3","text":"\u4e0eB\u6811\u4e00\u6837","title":"\u4e94\u3001B+\u6811\u7684\u5220\u9664"},{"location":"06-%E6%9F%A5%E6%89%BE/7.6B%2B%E6%A0%91/#bb","text":"","title":"\u516d\u3001B\u6811\u4e0eB+\u6811\u7684\u5bf9\u6bd4"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/","text":"\u6563\u5217\u67e5\u627e(\u54c8\u5e0c\u67e5\u627e)\u2014\u2014Hash Search \u00b6 \u4e00\u3001\u54c8\u5e0c\u67e5\u627e\u7684\u5b9a\u4e49 \u00b6 \u6563\u5217\u8868 \uff08Hash Table\uff09\uff0c\u53c8\u540d \u54c8\u5e0c\u8868 \uff0c\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u7279\u70b9 \uff1a\u6570\u636e\u5143\u7d20\u7684 \u5173\u952e\u5b57\u4e0e\u5176\u5b58\u50a8\u5730\u5740\u76f4\u63a5\u76f8\u5173 \u3002 \u901a\u8fc7 \u6563\u5217\u51fd\u6570\uff08\u54c8\u5e0c\u51fd\u6570\uff09 \u5c06\u5173\u952e\u5b57\u4e0e\u5b58\u50a8\u5730\u5740\u4e00\u4e00\u6620\u5c04\u3002 \u6563\u5217\u67e5\u627e\u662f\u5178\u578b\u7684 \u201c\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u201d\u7684\u7b97\u6cd5 \u88c5\u586b\u56e0\u5b50\u03b1 = \u8868\u4e2d\u8bb0\u5f55\u4e2a\u6570/\u6563\u5217\u8868\u8868\u957f \u67e5\u627e\u6548\u7387 \uff1a\u53d6\u51b3\u4e8e \u6563\u5217\u51fd\u6570 \u3001 \u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5 \u3001 \u88c5\u586b\u56e0\u5b50\u03b1 \u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5\u2014\u2014\u62c9\u94fe\u6cd5 \u00b6 \u4e8c\u3001\u5e38\u89c1\u7684\u6563\u5217\u51fd\u6570\uff08\u54c8\u5e0c\u51fd\u6570\uff09 \u00b6 \u51b2\u7a81\u662f\u7531\u6563\u5217\u51fd\u6570\u5bfc\u81f4\u7684\uff0c \u51b2\u7a81\u8d8a\u591a\uff0c\u67e5\u627e\u6548\u7387\u8d8a\u4f4e \u6563\u5217\u51fd\u6570\u7684\u8bbe\u8ba1\u76ee\u7684\uff1a\u8ba9\u4e0d\u540c\u7684\u5173\u952e\u5b57\u7684\u51b2\u7a81\u5c3d\u53ef\u80fd\u5c11\u3002 \u2460\u9664\u7559\u4f59\u6570\u6cd5 \u2461\u76f4\u63a5\u5b9a\u5740\u6cd5 \u2462\u6570\u5b57\u5206\u6790\u6cd5 \u2463\u5e73\u65b9\u53d6\u4e2d\u6cd5 \u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5\uff1a\u4ee5\u62c9\u94fe\u6cd5\u4e3a\u4e3b\u3002 1.\u9664\u7559\u4f59\u6570\u6cd5 \u00b6 \\[H(key)=key\\mod{p}\\] \u9664\u6570p\u53d6\u6cd5\uff1a\u6563\u5217\u8868\u8868\u957f\u4e3am\uff0c\u53d6\u4e00\u4e2a\u4e0d\u5927\u4e8em\u4f46\u6700\u63a5\u8fd1\u6216\u7b49\u4e8em\u7684 \u8d28\u6570p \u67e5\u627e\u65b9\u6cd5\uff1a\u5f53p=13\u65f6\uff0c\u67e5\u627e66\uff0c66%13=1\uff0c\u5219\u5728a[1]\u4e0b\u7684\u94fe\u8868\u4e2d\u5bfb\u627e\u3002 \u67e5\u627e\u6548\u7387\u5206\u6790 \uff1a 2.\u76f4\u63a5\u5b9a\u5740\u6cd5 \u00b6 \\[H(key)=key$$ \u6216 $$H(key)=a*key+b\\] \u8fd9\u79cd\u8ba1\u7b97\u6700\u7b80\u5355\uff0c\u9002\u5408 \u5173\u952e\u5b57\u5206\u5e03\u8fde\u7eed \u7684\u60c5\u51b5 3.\u6570\u5b57\u5206\u6790\u6cd5 \u00b6 \u9009\u53d6\u6570\u7801 \u5206\u5e03\u8f83\u4e3a\u5747\u5300\u7684\u82e5\u5e72\u4f4d \u4f5c\u4e3a\u6563\u5217\u5730\u5740\u3002 4.\u5e73\u65b9\u53d6\u4e2d\u6cd5 \u00b6 \u53d6 \u5173\u952e\u5b57\u7684\u5e73\u65b9\u503c\u7684\u4e2d\u95f4\u51e0\u4f4d \u4f5c\u4e3a\u6563\u5217\u5730\u5740\u3002 \u5177\u4f53\u53d6\u591a\u5c11\u4f4d\u8981\u89c6\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\u3002\u8fd9\u79cd\u65b9\u6cd5\u5f97\u5230\u7684 \u6563\u5217\u5730\u5740\u4e0e\u5173\u952e\u5b57\u7684\u6bcf\u4f4d\u90fd\u6709\u5173\u7cfb \uff0c\u56e0\u6b64\u4f7f\u5f97 \u6563\u5217\u5730\u5740\u5206\u5e03\u6bd4\u8f83\u5747\u5300\uff0c\u9002\u7528\u4e8e\u5173\u952e\u5b57\u7684\u6bcf\u4f4d\u53d6\u503c\u90fd\u4e0d\u591f\u5747\u5300\u6216\u5747\u5c0f\u4e8e\u6563\u5217\u5730\u5740\u6240\u9700\u7684\u4f4d\u6570\u3002 \u4e09\u3001\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5 \u00b6 \u2460\u62c9\u94fe\u6cd5 \u2461\u5f00\u653e\u5b9a\u5740\u6cd5 \u2462\u518d\u6563\u5217\u6cd5 1.\u62c9\u94fe\u6cd5 \u00b6 \u4e0a\u9762\u8bb2\u4e86 2.\u5f00\u653e\u5b9a\u5740\u6cd5 \u00b6 d\u7684\u4e0d\u540c\u53d6\u6cd5 \uff1a \u2460\u7ebf\u6027\u63a2\u6d4b\u6cd5 \u00b6 \u2461\u5e73\u65b9\u63a2\u6d4b\u6cd5 \u00b6 \u6563\u5217\u8868\u957f\u5fc5\u987b\u662f \\( \\(4j+3\\) \\) \u2462\u4f2a\u968f\u673a\u5e8f\u5217\u6cd5 \u00b6 d\u53d6\u968f\u673a\u503c 3.\u518d\u6563\u5217\u6cd5 \u00b6","title":"6.7\u6563\u5217\u67e5\u627e(\u54c8\u5e0c\u67e5\u627e)"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#hash-search","text":"","title":"\u6563\u5217\u67e5\u627e(\u54c8\u5e0c\u67e5\u627e)\u2014\u2014Hash Search"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#_1","text":"\u6563\u5217\u8868 \uff08Hash Table\uff09\uff0c\u53c8\u540d \u54c8\u5e0c\u8868 \uff0c\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u7279\u70b9 \uff1a\u6570\u636e\u5143\u7d20\u7684 \u5173\u952e\u5b57\u4e0e\u5176\u5b58\u50a8\u5730\u5740\u76f4\u63a5\u76f8\u5173 \u3002 \u901a\u8fc7 \u6563\u5217\u51fd\u6570\uff08\u54c8\u5e0c\u51fd\u6570\uff09 \u5c06\u5173\u952e\u5b57\u4e0e\u5b58\u50a8\u5730\u5740\u4e00\u4e00\u6620\u5c04\u3002 \u6563\u5217\u67e5\u627e\u662f\u5178\u578b\u7684 \u201c\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u201d\u7684\u7b97\u6cd5 \u88c5\u586b\u56e0\u5b50\u03b1 = \u8868\u4e2d\u8bb0\u5f55\u4e2a\u6570/\u6563\u5217\u8868\u8868\u957f \u67e5\u627e\u6548\u7387 \uff1a\u53d6\u51b3\u4e8e \u6563\u5217\u51fd\u6570 \u3001 \u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5 \u3001 \u88c5\u586b\u56e0\u5b50\u03b1","title":"\u4e00\u3001\u54c8\u5e0c\u67e5\u627e\u7684\u5b9a\u4e49"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#_2","text":"","title":"\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5\u2014\u2014\u62c9\u94fe\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#_3","text":"\u51b2\u7a81\u662f\u7531\u6563\u5217\u51fd\u6570\u5bfc\u81f4\u7684\uff0c \u51b2\u7a81\u8d8a\u591a\uff0c\u67e5\u627e\u6548\u7387\u8d8a\u4f4e \u6563\u5217\u51fd\u6570\u7684\u8bbe\u8ba1\u76ee\u7684\uff1a\u8ba9\u4e0d\u540c\u7684\u5173\u952e\u5b57\u7684\u51b2\u7a81\u5c3d\u53ef\u80fd\u5c11\u3002 \u2460\u9664\u7559\u4f59\u6570\u6cd5 \u2461\u76f4\u63a5\u5b9a\u5740\u6cd5 \u2462\u6570\u5b57\u5206\u6790\u6cd5 \u2463\u5e73\u65b9\u53d6\u4e2d\u6cd5 \u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5\uff1a\u4ee5\u62c9\u94fe\u6cd5\u4e3a\u4e3b\u3002","title":"\u4e8c\u3001\u5e38\u89c1\u7684\u6563\u5217\u51fd\u6570\uff08\u54c8\u5e0c\u51fd\u6570\uff09"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#1","text":"\\[H(key)=key\\mod{p}\\] \u9664\u6570p\u53d6\u6cd5\uff1a\u6563\u5217\u8868\u8868\u957f\u4e3am\uff0c\u53d6\u4e00\u4e2a\u4e0d\u5927\u4e8em\u4f46\u6700\u63a5\u8fd1\u6216\u7b49\u4e8em\u7684 \u8d28\u6570p \u67e5\u627e\u65b9\u6cd5\uff1a\u5f53p=13\u65f6\uff0c\u67e5\u627e66\uff0c66%13=1\uff0c\u5219\u5728a[1]\u4e0b\u7684\u94fe\u8868\u4e2d\u5bfb\u627e\u3002 \u67e5\u627e\u6548\u7387\u5206\u6790 \uff1a","title":"1.\u9664\u7559\u4f59\u6570\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#2","text":"\\[H(key)=key$$ \u6216 $$H(key)=a*key+b\\] \u8fd9\u79cd\u8ba1\u7b97\u6700\u7b80\u5355\uff0c\u9002\u5408 \u5173\u952e\u5b57\u5206\u5e03\u8fde\u7eed \u7684\u60c5\u51b5","title":"2.\u76f4\u63a5\u5b9a\u5740\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#3","text":"\u9009\u53d6\u6570\u7801 \u5206\u5e03\u8f83\u4e3a\u5747\u5300\u7684\u82e5\u5e72\u4f4d \u4f5c\u4e3a\u6563\u5217\u5730\u5740\u3002","title":"3.\u6570\u5b57\u5206\u6790\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#4","text":"\u53d6 \u5173\u952e\u5b57\u7684\u5e73\u65b9\u503c\u7684\u4e2d\u95f4\u51e0\u4f4d \u4f5c\u4e3a\u6563\u5217\u5730\u5740\u3002 \u5177\u4f53\u53d6\u591a\u5c11\u4f4d\u8981\u89c6\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\u3002\u8fd9\u79cd\u65b9\u6cd5\u5f97\u5230\u7684 \u6563\u5217\u5730\u5740\u4e0e\u5173\u952e\u5b57\u7684\u6bcf\u4f4d\u90fd\u6709\u5173\u7cfb \uff0c\u56e0\u6b64\u4f7f\u5f97 \u6563\u5217\u5730\u5740\u5206\u5e03\u6bd4\u8f83\u5747\u5300\uff0c\u9002\u7528\u4e8e\u5173\u952e\u5b57\u7684\u6bcf\u4f4d\u53d6\u503c\u90fd\u4e0d\u591f\u5747\u5300\u6216\u5747\u5c0f\u4e8e\u6563\u5217\u5730\u5740\u6240\u9700\u7684\u4f4d\u6570\u3002","title":"4.\u5e73\u65b9\u53d6\u4e2d\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#_4","text":"\u2460\u62c9\u94fe\u6cd5 \u2461\u5f00\u653e\u5b9a\u5740\u6cd5 \u2462\u518d\u6563\u5217\u6cd5","title":"\u4e09\u3001\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#1_1","text":"\u4e0a\u9762\u8bb2\u4e86","title":"1.\u62c9\u94fe\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#2_1","text":"d\u7684\u4e0d\u540c\u53d6\u6cd5 \uff1a","title":"2.\u5f00\u653e\u5b9a\u5740\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#1_2","text":"","title":"\u2460\u7ebf\u6027\u63a2\u6d4b\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#2_2","text":"\u6563\u5217\u8868\u957f\u5fc5\u987b\u662f \\( \\(4j+3\\) \\)","title":"\u2461\u5e73\u65b9\u63a2\u6d4b\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#3_1","text":"d\u53d6\u968f\u673a\u503c","title":"\u2462\u4f2a\u968f\u673a\u5e8f\u5217\u6cd5"},{"location":"06-%E6%9F%A5%E6%89%BE/7.7%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%28%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE%29/#3_2","text":"","title":"3.\u518d\u6563\u5217\u6cd5"},{"location":"07-%E6%8E%92%E5%BA%8F/8.1%E6%8E%92%E5%BA%8F/","text":"\u6392\u5e8f\u2014\u2014Sort \u00b6 \u5e38\u89c1\u6392\u5e8f\u7b97\u6cd5\u4e0e\u5176\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u00b6 \u4e00\u3001\u6392\u5e8f\u7684\u5b9a\u4e49 \u00b6 \u6392\u5e8f \uff0c\u5c31\u662f\u91cd\u65b0\u6392\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u8868\u4e2d\u7684\u5143\u7d20\u6ee1\u8db3 \u6309\u5173\u952e\u5b57\u6709\u5e8f \u7684\u8fc7\u7a0b\u3002 \u4e8c\u3001\u6392\u5e8f\u7b97\u6cd5\u7684\u5e94\u7528 \u00b6 \u5bf9\u6570\u636e\u8fdb\u884c\u5927\u5c0f\u6392\u5e8f \u4e09\u3001\u6392\u5e8f\u7684\u7b97\u6cd5\u8bc4\u4ef7\u6307\u6807 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001 \u7a33\u5b9a\u6027 \u56db\u3001\u6392\u5e8f\u7b97\u6cd5\u7684\u5206\u7c7b \u00b6","title":"7.1\u6392\u5e8f"},{"location":"07-%E6%8E%92%E5%BA%8F/8.1%E6%8E%92%E5%BA%8F/#sort","text":"","title":"\u6392\u5e8f\u2014\u2014Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.1%E6%8E%92%E5%BA%8F/#_1","text":"","title":"\u5e38\u89c1\u6392\u5e8f\u7b97\u6cd5\u4e0e\u5176\u65f6\u95f4\u590d\u6742\u5ea6\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.1%E6%8E%92%E5%BA%8F/#_2","text":"\u6392\u5e8f \uff0c\u5c31\u662f\u91cd\u65b0\u6392\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u8868\u4e2d\u7684\u5143\u7d20\u6ee1\u8db3 \u6309\u5173\u952e\u5b57\u6709\u5e8f \u7684\u8fc7\u7a0b\u3002","title":"\u4e00\u3001\u6392\u5e8f\u7684\u5b9a\u4e49"},{"location":"07-%E6%8E%92%E5%BA%8F/8.1%E6%8E%92%E5%BA%8F/#_3","text":"\u5bf9\u6570\u636e\u8fdb\u884c\u5927\u5c0f\u6392\u5e8f","title":"\u4e8c\u3001\u6392\u5e8f\u7b97\u6cd5\u7684\u5e94\u7528"},{"location":"07-%E6%8E%92%E5%BA%8F/8.1%E6%8E%92%E5%BA%8F/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001 \u7a33\u5b9a\u6027","title":"\u4e09\u3001\u6392\u5e8f\u7684\u7b97\u6cd5\u8bc4\u4ef7\u6307\u6807"},{"location":"07-%E6%8E%92%E5%BA%8F/8.1%E6%8E%92%E5%BA%8F/#_5","text":"","title":"\u56db\u3001\u6392\u5e8f\u7b97\u6cd5\u7684\u5206\u7c7b"},{"location":"07-%E6%8E%92%E5%BA%8F/8.2%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/","text":"\u63d2\u5165\u6392\u5e8f\u2014\u2014Insertion Sort \u00b6 \u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a \u00b6 \u6bcf\u6b21\u5c06\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u6309\u5176\u5173\u952e\u5b57\u5927\u5c0f\u63d2\u5165\u5230\u524d\u9762\u5df2\u6392\u597d\u5e8f\u7684\u5b50\u5e8f\u5217\u4e2d\uff0c\u76f4\u5230\u5168\u90e8\u8bb0\u5f55\u63d2\u5165\u5b8c\u6210\u3002 \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a \u00b6 \u666e\u901a\uff1a // \u76f4\u63a5\u63d2\u5165\u6392\u5e8f void InsertSort ( int A [], int n ){ int i , j , temp ; for ( i = 1 ; i < n ; i ++ ){ //\u8bb2\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u6392\u597d\u7684\u5e8f\u5217\u4e2d if ( A [ i ] < A [ i -1 ]){ //\u82e5A[i]\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u524d\u9a71 temp = A [ i ]; //\u7528temp\u6682\u5b58A[i] for ( j = i -1 ; i >= 0 && A [ j ] < temp ; -- j ){ //\u68c0\u67e5\u6240\u6709\u524d\u9762\u5df2\u6392\u597d\u5e8f\u7684\u5143\u7d20 A [ j + 1 ] = A [ j ]; //\u6240\u6709\u5927\u4e8etemp\u7684\u90fd\u540e\u79fb } A [ j + 1 ] = temp ; //\u590d\u5236\u5230\u63d2\u5165\u4f4d\u7f6e } } } \u5e26\u54e8\u5175\uff1a // \u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff08\u5e26\u54e8\u5175\uff09 void InsertSort ( int A [], int n ){ int i , j ; for ( i = 2 ; i <= n ; i ++ ){ //\u8bb2\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u6392\u597d\u7684\u5e8f\u5217\u4e2d if ( A [ i ] < A [ i -1 ]){ //\u82e5A[i]\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u524d\u9a71 A [ 0 ] = A [ i ]; //\u590d\u5236\u4e3a\u54e8\u5175\uff0cA[0]\u4f5c\u4e3a\u54e8\u5175 for ( j = i -1 ; A [ 0 ] < A [ j ]; -- j ){ //\u4ece\u540e\u5f80\u524d\u67e5\u627e\u5f85\u63d2\u5165\u4f4d\u7f6e A [ j + 1 ] = A [ j ]; //\u6240\u6709\u5927\u4e8eA[0]\u7684\u90fd\u540e\u79fb } A [ j + 1 ] = A [ 0 ]; //\u590d\u5236\u5230\u63d2\u5165\u4f4d\u7f6e } } } \u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u53d8\u91cf\u4e3aint i\uff0cj\uff0ctemp\uff0c \u65f6\u95f4\u590d\u6742\u5ea6: \u6700\u597d\u60c5\u51b5= \\( \\(n-1\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u6700\u574f\u60c5\u51b5= \\( \\(2+3+\\cdots+n+(n+1)=\\frac{n(n+3)}{2}\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n^2)\\) \\) \u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n^2)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a \u56db\u3001\u4f18\u5316\u2014\u2014\u6298\u534a\u63d2\u5165\u6392\u5e8f \u00b6 \u6298\u534a\u67e5\u627e\u627e\u51fa\u63d2\u5165\u7684\u4f4d\u7f6e \u5f53A[mid]=A[0]\u65f6\uff0c\u5c06[mid\uff0ci-1]\u5185\u7684\u5143\u7d20\u5168\u90e8\u540e\u79fb\uff0c\u5e76\u5c06A[0]\u590d\u5236\u5230mid\u6240\u5728\u4f4d\u7f6e\u3002 Low>high\u65f6\u505c\u6b62\uff0c\u5c06[low\uff0ci-1]\u5185\u7684\u5143\u7d20\u5168\u90e8\u540e\u79fb\uff0c\u5e76\u5c06A[0]\u590d\u5236\u5230low\u6240\u5728\u4f4d\u7f6e\u3002 \u5e26\u54e8\u5175\uff1a // \u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff08\u5e26\u54e8\u5175\uff09 void InsertSort ( int A [], int n ){ int i , j , low \uff0c high \uff0c mid ; for ( i = 2 ; i <= n ; i ++ ){ //\u8bb2\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u6392\u597d\u7684\u5e8f\u5217\u4e2d if ( A [ i ] < A [ i -1 ]){ //\u82e5A[i]\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u524d\u9a71 A [ 0 ] = A [ i ]; //\u590d\u5236\u4e3a\u54e8\u5175\uff0cA[0]\u4f5c\u4e3a\u54e8\u5175 low = 1 ; high = i -1 ; while ( low <= high ){ mid = ( low + high ) / 2 ; if ( A [ mid ] > A [ 0 ]) high = mid - 1 ; else low = mid + 1 ; } for ( j = i -1 ; j > high + 1 ; -- j ){ //\u4ece\u540e\u5f80\u524d\u67e5\u627e\u5f85\u63d2\u5165\u4f4d\u7f6e A [ j + 1 ] = A [ j ]; //\u6240\u6709\u5927\u4e8eA[0]\u7684\u90fd\u540e\u79fb } A [ high + 1 ] = A [ 0 ]; //\u590d\u5236\u5230\u63d2\u5165\u4f4d\u7f6e } } } \u867d\u7136\u5bf9\u6bd4\u5173\u952e\u5b57\u6b21\u6570\u53d8\u5c11\uff0c\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u6570\u91cf\u7ea7\u4f9d\u7136\u6ca1\u53d8\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n^2)\\) \\)","title":"7.2\u63d2\u5165\u6392\u5e8f\uff08\u7a33\u5b9a\uff09"},{"location":"07-%E6%8E%92%E5%BA%8F/8.2%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#insertion-sort","text":"","title":"\u63d2\u5165\u6392\u5e8f\u2014\u2014Insertion Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.2%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_1","text":"\u6bcf\u6b21\u5c06\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u6309\u5176\u5173\u952e\u5b57\u5927\u5c0f\u63d2\u5165\u5230\u524d\u9762\u5df2\u6392\u597d\u5e8f\u7684\u5b50\u5e8f\u5217\u4e2d\uff0c\u76f4\u5230\u5168\u90e8\u8bb0\u5f55\u63d2\u5165\u5b8c\u6210\u3002","title":"\u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.2%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_2","text":"\u666e\u901a\uff1a // \u76f4\u63a5\u63d2\u5165\u6392\u5e8f void InsertSort ( int A [], int n ){ int i , j , temp ; for ( i = 1 ; i < n ; i ++ ){ //\u8bb2\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u6392\u597d\u7684\u5e8f\u5217\u4e2d if ( A [ i ] < A [ i -1 ]){ //\u82e5A[i]\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u524d\u9a71 temp = A [ i ]; //\u7528temp\u6682\u5b58A[i] for ( j = i -1 ; i >= 0 && A [ j ] < temp ; -- j ){ //\u68c0\u67e5\u6240\u6709\u524d\u9762\u5df2\u6392\u597d\u5e8f\u7684\u5143\u7d20 A [ j + 1 ] = A [ j ]; //\u6240\u6709\u5927\u4e8etemp\u7684\u90fd\u540e\u79fb } A [ j + 1 ] = temp ; //\u590d\u5236\u5230\u63d2\u5165\u4f4d\u7f6e } } } \u5e26\u54e8\u5175\uff1a // \u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff08\u5e26\u54e8\u5175\uff09 void InsertSort ( int A [], int n ){ int i , j ; for ( i = 2 ; i <= n ; i ++ ){ //\u8bb2\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u6392\u597d\u7684\u5e8f\u5217\u4e2d if ( A [ i ] < A [ i -1 ]){ //\u82e5A[i]\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u524d\u9a71 A [ 0 ] = A [ i ]; //\u590d\u5236\u4e3a\u54e8\u5175\uff0cA[0]\u4f5c\u4e3a\u54e8\u5175 for ( j = i -1 ; A [ 0 ] < A [ j ]; -- j ){ //\u4ece\u540e\u5f80\u524d\u67e5\u627e\u5f85\u63d2\u5165\u4f4d\u7f6e A [ j + 1 ] = A [ j ]; //\u6240\u6709\u5927\u4e8eA[0]\u7684\u90fd\u540e\u79fb } A [ j + 1 ] = A [ 0 ]; //\u590d\u5236\u5230\u63d2\u5165\u4f4d\u7f6e } } }","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.2%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_3","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u53d8\u91cf\u4e3aint i\uff0cj\uff0ctemp\uff0c \u65f6\u95f4\u590d\u6742\u5ea6: \u6700\u597d\u60c5\u51b5= \\( \\(n-1\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u6700\u574f\u60c5\u51b5= \\( \\(2+3+\\cdots+n+(n+1)=\\frac{n(n+3)}{2}\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n^2)\\) \\) \u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n^2)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a","title":"\u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790"},{"location":"07-%E6%8E%92%E5%BA%8F/8.2%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_4","text":"\u6298\u534a\u67e5\u627e\u627e\u51fa\u63d2\u5165\u7684\u4f4d\u7f6e \u5f53A[mid]=A[0]\u65f6\uff0c\u5c06[mid\uff0ci-1]\u5185\u7684\u5143\u7d20\u5168\u90e8\u540e\u79fb\uff0c\u5e76\u5c06A[0]\u590d\u5236\u5230mid\u6240\u5728\u4f4d\u7f6e\u3002 Low>high\u65f6\u505c\u6b62\uff0c\u5c06[low\uff0ci-1]\u5185\u7684\u5143\u7d20\u5168\u90e8\u540e\u79fb\uff0c\u5e76\u5c06A[0]\u590d\u5236\u5230low\u6240\u5728\u4f4d\u7f6e\u3002 \u5e26\u54e8\u5175\uff1a // \u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff08\u5e26\u54e8\u5175\uff09 void InsertSort ( int A [], int n ){ int i , j , low \uff0c high \uff0c mid ; for ( i = 2 ; i <= n ; i ++ ){ //\u8bb2\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u6392\u597d\u7684\u5e8f\u5217\u4e2d if ( A [ i ] < A [ i -1 ]){ //\u82e5A[i]\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u524d\u9a71 A [ 0 ] = A [ i ]; //\u590d\u5236\u4e3a\u54e8\u5175\uff0cA[0]\u4f5c\u4e3a\u54e8\u5175 low = 1 ; high = i -1 ; while ( low <= high ){ mid = ( low + high ) / 2 ; if ( A [ mid ] > A [ 0 ]) high = mid - 1 ; else low = mid + 1 ; } for ( j = i -1 ; j > high + 1 ; -- j ){ //\u4ece\u540e\u5f80\u524d\u67e5\u627e\u5f85\u63d2\u5165\u4f4d\u7f6e A [ j + 1 ] = A [ j ]; //\u6240\u6709\u5927\u4e8eA[0]\u7684\u90fd\u540e\u79fb } A [ high + 1 ] = A [ 0 ]; //\u590d\u5236\u5230\u63d2\u5165\u4f4d\u7f6e } } } \u867d\u7136\u5bf9\u6bd4\u5173\u952e\u5b57\u6b21\u6570\u53d8\u5c11\uff0c\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u6570\u91cf\u7ea7\u4f9d\u7136\u6ca1\u53d8\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n^2)\\) \\)","title":"\u56db\u3001\u4f18\u5316\u2014\u2014\u6298\u534a\u63d2\u5165\u6392\u5e8f"},{"location":"07-%E6%8E%92%E5%BA%8F/8.3%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/","text":"\u5e0c\u5c14\u6392\u5e8f\u2014\u2014Shell's Sort \u00b6 \u5e0c\u5c14\u6392\u5e8f \u53c8\u53eb \u7f29\u5c0f\u589e\u91cf\u6392\u5e8f \u3002 1959\u5e74Shell\u53d1\u660e\uff0c\u7b2c\u4e00\u4e2a\u7a81\u7834 \\( \\(O(n^2)\\) \\) \u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u662f \u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u6539\u8fdb\u7248 \u3002\u5b83\u4e0e\u63d2\u5165\u6392\u5e8f\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4f1a \u4f18\u5148\u6bd4\u8f83\u8ddd\u79bb\u8f83\u8fdc\u7684\u5143\u7d20 \u3002 \u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a \u00b6 \u5148\u5c06\u6574\u4e2a\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u5e8f\u5217\u5206\u5272\u6210\u4e3a\u82e5\u5e72\u5b50\u5e8f\u5217\u5206\u522b\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff0c\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\uff1a \u9009\u62e9\u4e00\u4e2a\u589e\u91cf\u5e8f\u5217t1\uff0ct2\uff0c\u2026\uff0ctk\uff0c\u5176\u4e2dti>tj\uff0ctk=1\uff1b \u6309\u589e\u91cf\u5e8f\u5217\u4e2a\u6570k\uff0c\u5bf9\u5e8f\u5217\u8fdb\u884ck \u8d9f\u6392\u5e8f\uff1b \u6bcf\u8d9f\u6392\u5e8f\uff0c\u6839\u636e\u5bf9\u5e94\u7684\u589e\u91cfti\uff0c\u5c06\u5f85\u6392\u5e8f\u5217\u5206\u5272\u6210\u82e5\u5e72\u957f\u5ea6\u4e3am \u7684\u5b50\u5e8f\u5217\uff0c\u5206\u522b\u5bf9\u5404\u5b50\u8868\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u3002\u4ec5\u589e\u91cf\u56e0\u5b50\u4e3a1 \u65f6\uff0c\u6574\u4e2a\u5e8f\u5217\u4f5c\u4e3a\u4e00\u4e2a\u8868\u6765\u5904\u7406\uff0c\u8868\u957f\u5ea6\u5373\u4e3a\u6574\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a \u00b6 \u5728\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u5916\u52a0\u4e86 \u6b65\u957f\u53d8\u5316 //\u5e0c\u5c14\u6392\u5e8f void InsertSort ( int A [], int n ){ int d , i , j ; for ( d = n / 2 ; d > 1 ; d = d / 2 ){ //\u6b65\u957f\u53d8\u5316 for ( i = d + 1 ; i <= n ; ++ i ){ //\u8bb2\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u6392\u597d\u7684\u5e8f\u5217\u4e2d if ( A [ i ] < A [ i - d ]){ //\u82e5A[i]\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u524d\u9a71 A [ 0 ] = A [ i ]; //\u590d\u5236\u4e3a\u54e8\u5175\uff0cA[0]\u4f5c\u4e3a\u54e8\u5175 for ( j = i - d ; j > 0 && A [ 0 ] < A [ j ]; j -= d ){ //\u4ece\u540e\u5f80\u524d\u67e5\u627e\u5f85\u63d2\u5165\u4f4d\u7f6e A [ j + d ] = A [ j ]; //\u6240\u6709\u5927\u4e8eA[0]\u7684\u90fd\u540e\u79fb } A [ j + d ] = A [ 0 ]; //\u590d\u5236\u5230\u63d2\u5165\u4f4d\u7f6e } } } } \u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u53d8\u91cf\u4e3aint d\uff0ci\uff0cj\uff0c \u65f6\u95f4\u590d\u6742\u5ea6: \u65e0\u6cd5\u8ba1\u7b97\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 \u5927\u6982\u4e3a= \\( \\(O(n^{1.3})\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u4e0d\u7a33\u5b9a \u4ec5\u9002\u7528\u4e8e\u987a\u5e8f\u8868\uff0c\u4e0d\u9002\u7528\u4e8e\u94fe\u8868","title":"7.3\u5e0c\u5c14\u6392\u5e8f\uff08\u4e0d\u7a33\u5b9a\uff09"},{"location":"07-%E6%8E%92%E5%BA%8F/8.3%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#shells-sort","text":"\u5e0c\u5c14\u6392\u5e8f \u53c8\u53eb \u7f29\u5c0f\u589e\u91cf\u6392\u5e8f \u3002 1959\u5e74Shell\u53d1\u660e\uff0c\u7b2c\u4e00\u4e2a\u7a81\u7834 \\( \\(O(n^2)\\) \\) \u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u662f \u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u6539\u8fdb\u7248 \u3002\u5b83\u4e0e\u63d2\u5165\u6392\u5e8f\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4f1a \u4f18\u5148\u6bd4\u8f83\u8ddd\u79bb\u8f83\u8fdc\u7684\u5143\u7d20 \u3002","title":"\u5e0c\u5c14\u6392\u5e8f\u2014\u2014Shell's Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.3%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_1","text":"\u5148\u5c06\u6574\u4e2a\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u5e8f\u5217\u5206\u5272\u6210\u4e3a\u82e5\u5e72\u5b50\u5e8f\u5217\u5206\u522b\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff0c\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\uff1a \u9009\u62e9\u4e00\u4e2a\u589e\u91cf\u5e8f\u5217t1\uff0ct2\uff0c\u2026\uff0ctk\uff0c\u5176\u4e2dti>tj\uff0ctk=1\uff1b \u6309\u589e\u91cf\u5e8f\u5217\u4e2a\u6570k\uff0c\u5bf9\u5e8f\u5217\u8fdb\u884ck \u8d9f\u6392\u5e8f\uff1b \u6bcf\u8d9f\u6392\u5e8f\uff0c\u6839\u636e\u5bf9\u5e94\u7684\u589e\u91cfti\uff0c\u5c06\u5f85\u6392\u5e8f\u5217\u5206\u5272\u6210\u82e5\u5e72\u957f\u5ea6\u4e3am \u7684\u5b50\u5e8f\u5217\uff0c\u5206\u522b\u5bf9\u5404\u5b50\u8868\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u3002\u4ec5\u589e\u91cf\u56e0\u5b50\u4e3a1 \u65f6\uff0c\u6574\u4e2a\u5e8f\u5217\u4f5c\u4e3a\u4e00\u4e2a\u8868\u6765\u5904\u7406\uff0c\u8868\u957f\u5ea6\u5373\u4e3a\u6574\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u3002","title":"\u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.3%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_2","text":"\u5728\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u5916\u52a0\u4e86 \u6b65\u957f\u53d8\u5316 //\u5e0c\u5c14\u6392\u5e8f void InsertSort ( int A [], int n ){ int d , i , j ; for ( d = n / 2 ; d > 1 ; d = d / 2 ){ //\u6b65\u957f\u53d8\u5316 for ( i = d + 1 ; i <= n ; ++ i ){ //\u8bb2\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u6392\u597d\u7684\u5e8f\u5217\u4e2d if ( A [ i ] < A [ i - d ]){ //\u82e5A[i]\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u524d\u9a71 A [ 0 ] = A [ i ]; //\u590d\u5236\u4e3a\u54e8\u5175\uff0cA[0]\u4f5c\u4e3a\u54e8\u5175 for ( j = i - d ; j > 0 && A [ 0 ] < A [ j ]; j -= d ){ //\u4ece\u540e\u5f80\u524d\u67e5\u627e\u5f85\u63d2\u5165\u4f4d\u7f6e A [ j + d ] = A [ j ]; //\u6240\u6709\u5927\u4e8eA[0]\u7684\u90fd\u540e\u79fb } A [ j + d ] = A [ 0 ]; //\u590d\u5236\u5230\u63d2\u5165\u4f4d\u7f6e } } } }","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.3%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_3","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u53d8\u91cf\u4e3aint d\uff0ci\uff0cj\uff0c \u65f6\u95f4\u590d\u6742\u5ea6: \u65e0\u6cd5\u8ba1\u7b97\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 \u5927\u6982\u4e3a= \\( \\(O(n^{1.3})\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u4e0d\u7a33\u5b9a \u4ec5\u9002\u7528\u4e8e\u987a\u5e8f\u8868\uff0c\u4e0d\u9002\u7528\u4e8e\u94fe\u8868","title":"\u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790"},{"location":"07-%E6%8E%92%E5%BA%8F/8.4%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/","text":"\u5192\u6ce1\u6392\u5e8f\u2014\u2014Bubble Sort \u00b6 \u5192\u6ce1\u6392\u5e8f \u662f\u4e00\u79cd\u7b80\u5355\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83\u91cd\u590d\u5730\u8d70\u8bbf\u8fc7\u8981\u6392\u5e8f\u7684\u6570\u5217\uff0c \u4e00\u6b21\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20 \uff0c\u5982\u679c\u5b83\u4eec\u7684\u987a\u5e8f\u9519\u8bef\u5c31\u628a\u5b83\u4eec\u4ea4\u6362\u8fc7\u6765\u3002\u8d70\u8bbf\u6570\u5217\u7684\u5de5\u4f5c\u662f\u91cd\u590d\u5730\u8fdb\u884c\u76f4\u5230\u6ca1\u6709\u518d\u9700\u8981\u4ea4\u6362\uff0c\u4e5f\u5c31\u662f\u8bf4\u8be5\u6570\u5217\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u540d\u5b57\u7531\u6765\u662f\u56e0\u4e3a \u8d8a\u5c0f\u7684\u5143\u7d20\u4f1a\u7ecf\u7531\u4ea4\u6362\u6162\u6162\u201c\u6d6e\u201d\u5230\u6570\u5217\u7684\u9876\u7aef \u3002 \u786e\u5b9a\u6700\u5c0f\u6570\u6216\u6700\u5927\u6570\u7684\u4f4d\u7f6e \u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a \u00b6 \u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u6bd4\u7b2c\u4e8c\u4e2a\u5927\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\u4e24\u4e2a\uff1b \u5bf9\u6bcf\u4e00\u5bf9\u76f8\u90bb\u5143\u7d20\u4f5c\u540c\u6837\u7684\u5de5\u4f5c\uff0c\u4ece\u5f00\u59cb\u7b2c\u4e00\u5bf9\u5230\u7ed3\u5c3e\u7684\u6700\u540e\u4e00\u5bf9\uff0c\u8fd9\u6837\u5728\u6700\u540e\u7684\u5143\u7d20\u5e94\u8be5\u4f1a\u662f\u6700\u5927\u7684\u6570\uff1b \u9488\u5bf9\u6240\u6709\u7684\u5143\u7d20\u91cd\u590d\u4ee5\u4e0a\u7684\u6b65\u9aa4\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\uff1b \u91cd\u590d\u6b65\u9aa41~3\uff0c\u76f4\u5230\u6392\u5e8f\u5b8c\u6210\u3002 \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a \u00b6 \u4ece\u540e\u5f80\u524d\u4e24\u4e24\u6bd4\u8f83\uff0c\u9006\u5e8f\u5219\u4ea4\u6362\uff0c\u6bd4\u8f83\u5b8c\u53ef\u5c06\u6700\u5c0f\u7684\u653e\u524d\u9762\uff0c\u5c06\u7b2c\u4e00\u4e2a\u53bb\u9664\uff0c\u6bd4\u8f83\u5269\u4e0b\u7684\uff0c\u518d\u786e\u5b9a\u6b21\u5c0f\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 //\u4ea4\u6362 void swap (( int & a , int & b ){ int temp = a ; a = b ; b = temp ; } //\u5192\u6ce1\u6392\u5e8f void BubbleSort ( int A [], int n ){ for ( int i = 0 ; i < n ; i ++ ){ bool flag = false ; for ( int j = n -1 ; j > i ; j -- ) //\u4e00\u8d9f\u5192\u6ce1\u6392\u5e8f\uff1a\u4ece\u540e\u5f80\u524d\u4e24\u4e24\u6bd4\u8f83 if ( A [ j -1 ] > A [ j ]){ //\u82e5\u9006\u5e8f swqp ( A [ j -1 ], A [ j ]); //\u5219\u4ea4\u6362 flag = true ; } if ( flag == false ){ return ; //\u672c\u8d9f\u904d\u5386\u540e\u6ca1\u6709\u53d1\u751f\u4ea4\u6362\uff0c\u8bf4\u660e\u8868\u5df2\u7ecf\u6709\u5e8f } } } \u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u53d8\u91cf\u4e3abool flag \u65f6\u95f4\u590d\u6742\u5ea6: \u6700\u597d\u60c5\u51b5= \\( \\(n-1\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u6700\u574f\u60c5\u51b5= \\( \\((n-1)+(n-2)+\\cdots+2+1=\\frac{n(n-1)}{2}\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n^2)\\) \\) \u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n^2)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a \u987a\u5e8f\u8868\u548c\u94fe\u8868\u90fd\u53ef\u4ee5\u3002","title":"7.4\u5192\u6ce1\u6392\u5e8f\uff08\u7a33\u5b9a\uff09"},{"location":"07-%E6%8E%92%E5%BA%8F/8.4%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#bubble-sort","text":"\u5192\u6ce1\u6392\u5e8f \u662f\u4e00\u79cd\u7b80\u5355\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83\u91cd\u590d\u5730\u8d70\u8bbf\u8fc7\u8981\u6392\u5e8f\u7684\u6570\u5217\uff0c \u4e00\u6b21\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20 \uff0c\u5982\u679c\u5b83\u4eec\u7684\u987a\u5e8f\u9519\u8bef\u5c31\u628a\u5b83\u4eec\u4ea4\u6362\u8fc7\u6765\u3002\u8d70\u8bbf\u6570\u5217\u7684\u5de5\u4f5c\u662f\u91cd\u590d\u5730\u8fdb\u884c\u76f4\u5230\u6ca1\u6709\u518d\u9700\u8981\u4ea4\u6362\uff0c\u4e5f\u5c31\u662f\u8bf4\u8be5\u6570\u5217\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u540d\u5b57\u7531\u6765\u662f\u56e0\u4e3a \u8d8a\u5c0f\u7684\u5143\u7d20\u4f1a\u7ecf\u7531\u4ea4\u6362\u6162\u6162\u201c\u6d6e\u201d\u5230\u6570\u5217\u7684\u9876\u7aef \u3002 \u786e\u5b9a\u6700\u5c0f\u6570\u6216\u6700\u5927\u6570\u7684\u4f4d\u7f6e","title":"\u5192\u6ce1\u6392\u5e8f\u2014\u2014Bubble Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.4%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_1","text":"\u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u6bd4\u7b2c\u4e8c\u4e2a\u5927\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\u4e24\u4e2a\uff1b \u5bf9\u6bcf\u4e00\u5bf9\u76f8\u90bb\u5143\u7d20\u4f5c\u540c\u6837\u7684\u5de5\u4f5c\uff0c\u4ece\u5f00\u59cb\u7b2c\u4e00\u5bf9\u5230\u7ed3\u5c3e\u7684\u6700\u540e\u4e00\u5bf9\uff0c\u8fd9\u6837\u5728\u6700\u540e\u7684\u5143\u7d20\u5e94\u8be5\u4f1a\u662f\u6700\u5927\u7684\u6570\uff1b \u9488\u5bf9\u6240\u6709\u7684\u5143\u7d20\u91cd\u590d\u4ee5\u4e0a\u7684\u6b65\u9aa4\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\uff1b \u91cd\u590d\u6b65\u9aa41~3\uff0c\u76f4\u5230\u6392\u5e8f\u5b8c\u6210\u3002","title":"\u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.4%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_2","text":"\u4ece\u540e\u5f80\u524d\u4e24\u4e24\u6bd4\u8f83\uff0c\u9006\u5e8f\u5219\u4ea4\u6362\uff0c\u6bd4\u8f83\u5b8c\u53ef\u5c06\u6700\u5c0f\u7684\u653e\u524d\u9762\uff0c\u5c06\u7b2c\u4e00\u4e2a\u53bb\u9664\uff0c\u6bd4\u8f83\u5269\u4e0b\u7684\uff0c\u518d\u786e\u5b9a\u6b21\u5c0f\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 //\u4ea4\u6362 void swap (( int & a , int & b ){ int temp = a ; a = b ; b = temp ; } //\u5192\u6ce1\u6392\u5e8f void BubbleSort ( int A [], int n ){ for ( int i = 0 ; i < n ; i ++ ){ bool flag = false ; for ( int j = n -1 ; j > i ; j -- ) //\u4e00\u8d9f\u5192\u6ce1\u6392\u5e8f\uff1a\u4ece\u540e\u5f80\u524d\u4e24\u4e24\u6bd4\u8f83 if ( A [ j -1 ] > A [ j ]){ //\u82e5\u9006\u5e8f swqp ( A [ j -1 ], A [ j ]); //\u5219\u4ea4\u6362 flag = true ; } if ( flag == false ){ return ; //\u672c\u8d9f\u904d\u5386\u540e\u6ca1\u6709\u53d1\u751f\u4ea4\u6362\uff0c\u8bf4\u660e\u8868\u5df2\u7ecf\u6709\u5e8f } } }","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.4%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_3","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u53d8\u91cf\u4e3abool flag \u65f6\u95f4\u590d\u6742\u5ea6: \u6700\u597d\u60c5\u51b5= \\( \\(n-1\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u6700\u574f\u60c5\u51b5= \\( \\((n-1)+(n-2)+\\cdots+2+1=\\frac{n(n-1)}{2}\\) \\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n^2)\\) \\) \u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n^2)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a \u987a\u5e8f\u8868\u548c\u94fe\u8868\u90fd\u53ef\u4ee5\u3002","title":"\u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790"},{"location":"07-%E6%8E%92%E5%BA%8F/8.5%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/","text":"\u5feb\u901f\u6392\u5e8f\u2014\u2014Quick Sort \u00b6 \u5feb\u901f\u6392\u5e8f \u7684\u57fa\u672c\u601d\u60f3\uff1a\u901a\u8fc7\u4e00\u8d9f\u6392\u5e8f\u5c06\u5f85\u6392\u8bb0\u5f55 \u5206\u9694\u6210\u72ec\u7acb\u7684\u4e24\u90e8\u5206 \uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u8bb0\u5f55\u7684\u5173\u952e\u5b57\u5747\u6bd4\u53e6\u4e00\u90e8\u5206\u7684\u5173\u952e\u5b57\u5c0f\uff0c\u5219 \u53ef\u5206\u522b\u5bf9\u8fd9\u4e24\u90e8\u5206\u8bb0\u5f55\u7ee7\u7eed\u8fdb\u884c\u6392\u5e8f \uff0c\u4ee5\u8fbe\u5230\u6574\u4e2a\u5e8f\u5217\u6709\u5e8f\u3002 \u786e\u5b9a\u4e2d\u95f4\u6570\u7684\u4f4d\u7f6e \u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a \u00b6 \u5feb\u901f\u6392\u5e8f\u4f7f\u7528\u5206\u6cbb\u6cd5\u6765\u628a\u4e00\u4e2a\u4e32\uff08list\uff09\u5206\u4e3a\u4e24\u4e2a\u5b50\u4e32\uff08sub-lists\uff09\u3002\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a \u4ece\u6570\u5217\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a \u201c\u57fa\u51c6\u201d\uff08pivot\uff09\uff1b \u91cd\u65b0\u6392\u5e8f\u6570\u5217\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u6446\u5728\u57fa\u51c6\u7684\u540e\u9762\uff08\u76f8\u540c\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u533a\u9000\u51fa\u4e4b\u540e\uff0c\u8be5\u57fa\u51c6\u5c31\u5904\u4e8e\u6570\u5217\u7684\u4e2d\u95f4\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u79f0\u4e3a\u5206\u533a\uff08partition\uff09\u64cd\u4f5c\uff1b \u9012\u5f52\u5730\uff08recursive\uff09\u628a\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u548c\u5927\u4e8e \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a \u00b6 \u5c06\u7b2c\u4e00\u4e2a\u4f5c\u4e3a\u67a2\u8f74\uff0c\u540e\u9762\u7684\u5143\u7d20\u4e0e\u67a2\u8f74\u6bd4\u8f83\uff0c\u4e00\u6b64low\uff0c\u4e00high\u6bd4\u8f83\uff0clow\u7684\u5927\u5219\u653e\u5230high\u5904\uff0chigh\u7684\u5c0f\u5219\u653e\u5230low\u5904\uff0c\u76f4\u5230low=high\uff0c\u627e\u5230\u67a2\u8f74\u4f4d\u7f6e\u3002 \u6309\u67a2\u8f74\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5206\u522b\u505a\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff08\u9012\u5f52\uff09\u3002 //\u7528\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c06\u5f85\u6392\u5e8f\u5e8f\u5217\u5212\u5206\u6210\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206 int Partition ( int A [], int low , int high ){ int pivot = A [ Low ]; //\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u67a2\u8f74 while ( low < high ){ //\u752810w\u3001high\u641c\u7d22\u67a2\u8f74\u7684\u6700\u7ec8\u4f4d\u7f6e while ( low < high && A [ high ] >= pivot ) -- high ; A [ Low ] = A [ high ]; //\u6bd4\u67a2\u8f74\u5c0f\u7684\u5143\u7d20\u79fb\u52a8\u5230\u5de6\u7aef while ( low < high && A [ Low ] <= pivot \uff09 ++ low ; A [ high ] = A [ low ]; //\u6bd4\u67a2\u8f74\u5927\u7684\u5143\u7d20\u79fb\u52a8\u5230\u53f3\u7aef } A [ low ] = pivot ; //\u67a2\u8f74\u5143\u7d20\u5b58\u653e\u5230\u6700\u7ec8\u4f4d\u7f6e return low ; //\u8fd4\u56de\u5b58\u653e\u67a2\u8f74\u7684\u6700\u7ec8\u4f4d\u7f6e } //\u5feb\u901f\u6392\u5e8f void QuickSort ( int A [], int low , int high ){ if ( low < high ){ //\u9012\u5f52\u8df3\u51fa\u7684\u6761\u4ef6 int pivotpos = Partition ( A , Low , high ); //\u5212\u5206 QuickSort ( A , low , pivotpos -1 ); //\u5212\u5206\u5de6\u5b50\u8868 QuickSort ( A , pivotpos + 1 , high ); //\u5212\u5206\u53f3\u5b50\u8868 } \u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790 \u00b6 \u4e0e\u9012\u5f52\u6df1\u5ea6\u6709\u5173 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(\u9012\u5f52\u6df1\u5ea6)\\) \\) \u6700\u597d\u7a7a\u95f4\u590d\u6742\u5ea6= \\( \\(O(log_2n)\\) \\) \u6700\u574f \u7a7a\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n*\u9012\u5f52\u6df1\u5ea6)\\) \\) \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(nlog_2n)\\) \\) \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n^2)\\) \\) \u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(nlog_2n)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u4e0d\u7a33\u5b9a","title":"7.5\u5feb\u901f\u6392\u5e8f\uff08\u4e0d\u7a33\u5b9a\uff09"},{"location":"07-%E6%8E%92%E5%BA%8F/8.5%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#quick-sort","text":"\u5feb\u901f\u6392\u5e8f \u7684\u57fa\u672c\u601d\u60f3\uff1a\u901a\u8fc7\u4e00\u8d9f\u6392\u5e8f\u5c06\u5f85\u6392\u8bb0\u5f55 \u5206\u9694\u6210\u72ec\u7acb\u7684\u4e24\u90e8\u5206 \uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u8bb0\u5f55\u7684\u5173\u952e\u5b57\u5747\u6bd4\u53e6\u4e00\u90e8\u5206\u7684\u5173\u952e\u5b57\u5c0f\uff0c\u5219 \u53ef\u5206\u522b\u5bf9\u8fd9\u4e24\u90e8\u5206\u8bb0\u5f55\u7ee7\u7eed\u8fdb\u884c\u6392\u5e8f \uff0c\u4ee5\u8fbe\u5230\u6574\u4e2a\u5e8f\u5217\u6709\u5e8f\u3002 \u786e\u5b9a\u4e2d\u95f4\u6570\u7684\u4f4d\u7f6e","title":"\u5feb\u901f\u6392\u5e8f\u2014\u2014Quick Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.5%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_1","text":"\u5feb\u901f\u6392\u5e8f\u4f7f\u7528\u5206\u6cbb\u6cd5\u6765\u628a\u4e00\u4e2a\u4e32\uff08list\uff09\u5206\u4e3a\u4e24\u4e2a\u5b50\u4e32\uff08sub-lists\uff09\u3002\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a \u4ece\u6570\u5217\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a \u201c\u57fa\u51c6\u201d\uff08pivot\uff09\uff1b \u91cd\u65b0\u6392\u5e8f\u6570\u5217\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u6446\u5728\u57fa\u51c6\u7684\u540e\u9762\uff08\u76f8\u540c\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u533a\u9000\u51fa\u4e4b\u540e\uff0c\u8be5\u57fa\u51c6\u5c31\u5904\u4e8e\u6570\u5217\u7684\u4e2d\u95f4\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u79f0\u4e3a\u5206\u533a\uff08partition\uff09\u64cd\u4f5c\uff1b \u9012\u5f52\u5730\uff08recursive\uff09\u628a\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u548c\u5927\u4e8e","title":"\u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.5%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_2","text":"\u5c06\u7b2c\u4e00\u4e2a\u4f5c\u4e3a\u67a2\u8f74\uff0c\u540e\u9762\u7684\u5143\u7d20\u4e0e\u67a2\u8f74\u6bd4\u8f83\uff0c\u4e00\u6b64low\uff0c\u4e00high\u6bd4\u8f83\uff0clow\u7684\u5927\u5219\u653e\u5230high\u5904\uff0chigh\u7684\u5c0f\u5219\u653e\u5230low\u5904\uff0c\u76f4\u5230low=high\uff0c\u627e\u5230\u67a2\u8f74\u4f4d\u7f6e\u3002 \u6309\u67a2\u8f74\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5206\u522b\u505a\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff08\u9012\u5f52\uff09\u3002 //\u7528\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c06\u5f85\u6392\u5e8f\u5e8f\u5217\u5212\u5206\u6210\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206 int Partition ( int A [], int low , int high ){ int pivot = A [ Low ]; //\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u67a2\u8f74 while ( low < high ){ //\u752810w\u3001high\u641c\u7d22\u67a2\u8f74\u7684\u6700\u7ec8\u4f4d\u7f6e while ( low < high && A [ high ] >= pivot ) -- high ; A [ Low ] = A [ high ]; //\u6bd4\u67a2\u8f74\u5c0f\u7684\u5143\u7d20\u79fb\u52a8\u5230\u5de6\u7aef while ( low < high && A [ Low ] <= pivot \uff09 ++ low ; A [ high ] = A [ low ]; //\u6bd4\u67a2\u8f74\u5927\u7684\u5143\u7d20\u79fb\u52a8\u5230\u53f3\u7aef } A [ low ] = pivot ; //\u67a2\u8f74\u5143\u7d20\u5b58\u653e\u5230\u6700\u7ec8\u4f4d\u7f6e return low ; //\u8fd4\u56de\u5b58\u653e\u67a2\u8f74\u7684\u6700\u7ec8\u4f4d\u7f6e } //\u5feb\u901f\u6392\u5e8f void QuickSort ( int A [], int low , int high ){ if ( low < high ){ //\u9012\u5f52\u8df3\u51fa\u7684\u6761\u4ef6 int pivotpos = Partition ( A , Low , high ); //\u5212\u5206 QuickSort ( A , low , pivotpos -1 ); //\u5212\u5206\u5de6\u5b50\u8868 QuickSort ( A , pivotpos + 1 , high ); //\u5212\u5206\u53f3\u5b50\u8868 }","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.5%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_3","text":"\u4e0e\u9012\u5f52\u6df1\u5ea6\u6709\u5173 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(\u9012\u5f52\u6df1\u5ea6)\\) \\) \u6700\u597d\u7a7a\u95f4\u590d\u6742\u5ea6= \\( \\(O(log_2n)\\) \\) \u6700\u574f \u7a7a\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n*\u9012\u5f52\u6df1\u5ea6)\\) \\) \u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(nlog_2n)\\) \\) \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n^2)\\) \\) \u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(nlog_2n)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u4e0d\u7a33\u5b9a","title":"\u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790"},{"location":"07-%E6%8E%92%E5%BA%8F/8.6%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/","text":"\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u2014\u2014Select Sort \u00b6 \u9009\u62e9\u6392\u5e8f \u662f\u4e00\u79cd\u7b80\u5355\u76f4\u89c2\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\uff1a\u9996\u5148\u5728\u672a\u6392\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u5b58\u653e\u5230\u6392\u5e8f\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7136\u540e\uff0c\u518d\u4ece\u5269\u4f59\u672a\u6392\u5e8f\u5143\u7d20\u4e2d\u7ee7\u7eed\u5bfb\u627e\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u7136\u540e\u653e\u5230\u5df2\u6392\u5e8f\u5e8f\u5217\u7684\u672b\u5c3e\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u5747\u6392\u5e8f\u5b8c\u6bd5\u3002 \u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a \u00b6 n\u4e2a\u8bb0\u5f55\u7684\u76f4\u63a5\u9009\u62e9\u6392\u5e8f\u53ef\u7ecf\u8fc7n-1\u8d9f\u76f4\u63a5\u9009\u62e9\u6392\u5e8f\u5f97\u5230\u6709\u5e8f\u7ed3\u679c\u3002\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a \u521d\u59cb\u72b6\u6001\uff1a\u65e0\u5e8f\u533a\u4e3aR[1..n]\uff0c\u6709\u5e8f\u533a\u4e3a\u7a7a\uff1b \u7b2ci\u8d9f\u6392\u5e8f(i=1,2,3\u2026n-1)\u5f00\u59cb\u65f6\uff0c\u5f53\u524d\u6709\u5e8f\u533a\u548c\u65e0\u5e8f\u533a\u5206\u522b\u4e3aR[1..i-1]\u548cR(i..n\uff09\u3002\u8be5\u8d9f\u6392\u5e8f\u4ece\u5f53\u524d\u65e0\u5e8f\u533a\u4e2d-\u9009\u51fa\u5173\u952e\u5b57\u6700\u5c0f\u7684\u8bb0\u5f55 R[k]\uff0c\u5c06\u5b83\u4e0e\u65e0\u5e8f\u533a\u7684\u7b2c1\u4e2a\u8bb0\u5f55R\u4ea4\u6362\uff0c\u4f7fR[1..i]\u548cR[i+1..n)\u5206\u522b\u53d8\u4e3a\u8bb0\u5f55\u4e2a\u6570\u589e\u52a01\u4e2a\u7684\u65b0\u6709\u5e8f\u533a\u548c\u8bb0\u5f55\u4e2a\u6570\u51cf\u5c111\u4e2a\u7684\u65b0\u65e0\u5e8f\u533a\uff1b n-1\u8d9f\u7ed3\u675f\uff0c\u6570\u7ec4\u6709\u5e8f\u5316\u4e86\u3002 \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a \u00b6 //\u7b80\u5355\u9009\u62e9\u6392\u5e8f void SelectSort ( int A [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( A [ j ] < A [ min ]) min = j ; } if ( min != i ) swap ( A [ i ], A [ min ]); } } \u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u53d8\u91cf\u4e3aint i\uff0cj \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\((n-1)+(n-2)+\\cdots+2+1=\\frac{n(n-1)}{2}\\) \\) \uff0c \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n^2)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a \u987a\u5e8f\u8868\u548c\u94fe\u8868\u90fd\u53ef\u4ee5","title":"7.6\u7b80\u5355\u9009\u62e9\u6392\u5e8f\uff08\u7a33\u5b9a\uff09"},{"location":"07-%E6%8E%92%E5%BA%8F/8.6%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#select-sort","text":"\u9009\u62e9\u6392\u5e8f \u662f\u4e00\u79cd\u7b80\u5355\u76f4\u89c2\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\uff1a\u9996\u5148\u5728\u672a\u6392\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u5b58\u653e\u5230\u6392\u5e8f\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7136\u540e\uff0c\u518d\u4ece\u5269\u4f59\u672a\u6392\u5e8f\u5143\u7d20\u4e2d\u7ee7\u7eed\u5bfb\u627e\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u7136\u540e\u653e\u5230\u5df2\u6392\u5e8f\u5e8f\u5217\u7684\u672b\u5c3e\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u5747\u6392\u5e8f\u5b8c\u6bd5\u3002","title":"\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u2014\u2014Select Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.6%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_1","text":"n\u4e2a\u8bb0\u5f55\u7684\u76f4\u63a5\u9009\u62e9\u6392\u5e8f\u53ef\u7ecf\u8fc7n-1\u8d9f\u76f4\u63a5\u9009\u62e9\u6392\u5e8f\u5f97\u5230\u6709\u5e8f\u7ed3\u679c\u3002\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a \u521d\u59cb\u72b6\u6001\uff1a\u65e0\u5e8f\u533a\u4e3aR[1..n]\uff0c\u6709\u5e8f\u533a\u4e3a\u7a7a\uff1b \u7b2ci\u8d9f\u6392\u5e8f(i=1,2,3\u2026n-1)\u5f00\u59cb\u65f6\uff0c\u5f53\u524d\u6709\u5e8f\u533a\u548c\u65e0\u5e8f\u533a\u5206\u522b\u4e3aR[1..i-1]\u548cR(i..n\uff09\u3002\u8be5\u8d9f\u6392\u5e8f\u4ece\u5f53\u524d\u65e0\u5e8f\u533a\u4e2d-\u9009\u51fa\u5173\u952e\u5b57\u6700\u5c0f\u7684\u8bb0\u5f55 R[k]\uff0c\u5c06\u5b83\u4e0e\u65e0\u5e8f\u533a\u7684\u7b2c1\u4e2a\u8bb0\u5f55R\u4ea4\u6362\uff0c\u4f7fR[1..i]\u548cR[i+1..n)\u5206\u522b\u53d8\u4e3a\u8bb0\u5f55\u4e2a\u6570\u589e\u52a01\u4e2a\u7684\u65b0\u6709\u5e8f\u533a\u548c\u8bb0\u5f55\u4e2a\u6570\u51cf\u5c111\u4e2a\u7684\u65b0\u65e0\u5e8f\u533a\uff1b n-1\u8d9f\u7ed3\u675f\uff0c\u6570\u7ec4\u6709\u5e8f\u5316\u4e86\u3002","title":"\u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.6%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_2","text":"//\u7b80\u5355\u9009\u62e9\u6392\u5e8f void SelectSort ( int A [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( A [ j ] < A [ min ]) min = j ; } if ( min != i ) swap ( A [ i ], A [ min ]); } }","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.6%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_3","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u53d8\u91cf\u4e3aint i\uff0cj \u65f6\u95f4\u590d\u6742\u5ea6= \\( \\((n-1)+(n-2)+\\cdots+2+1=\\frac{n(n-1)}{2}\\) \\) \uff0c \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n^2)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a \u987a\u5e8f\u8868\u548c\u94fe\u8868\u90fd\u53ef\u4ee5","title":"\u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790"},{"location":"07-%E6%8E%92%E5%BA%8F/8.7%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/","text":"\u5806\u6392\u5e8f\u2014\u2014Heap Sort \u00b6 \u5806\u6392\u5e8f \u662f\u6307\u5229\u7528\u5806\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u6240\u8bbe\u8ba1\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\u3002\u5806\u79ef\u662f\u4e00\u4e2a\u8fd1\u4f3c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u5e76\u540c\u65f6\u6ee1\u8db3\u5806\u79ef\u7684\u6027\u8d28\uff1a\u5373\u5b50\u7ed3\u70b9\u7684\u952e\u503c\u6216\u7d22\u5f15\u603b\u662f\u5c0f\u4e8e\uff08\u6216\u8005\u5927\u4e8e\uff09\u5b83\u7684\u7236\u8282\u70b9\u3002 \u5927\u6839\u5806\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u6839>=\u5de6\u3001\u53f3\u3002 \u5c0f\u6839\u5806\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u6839<=\u5de6\u3001\u53f3\u3002 \u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a \u00b6 \u5c06\u521d\u59cb\u5f85\u6392\u5e8f\u5173\u952e\u5b57\u5e8f\u5217(R1,R2\u2026.Rn)\u6784\u5efa\u6210\u5927\u9876\u5806\uff0c\u6b64\u5806\u4e3a\u521d\u59cb\u7684\u65e0\u5e8f\u533a\uff1b \u5c06\u5806\u9876\u5143\u7d20R[1]\u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20R[n]\u4ea4\u6362\uff0c\u6b64\u65f6\u5f97\u5230\u65b0\u7684\u65e0\u5e8f\u533a(R1,R2,\u2026\u2026Rn-1)\u548c\u65b0\u7684\u6709\u5e8f\u533a(Rn),\u4e14\u6ee1\u8db3R[1,2\u2026n-1]<=R[n]\uff1b \u7531\u4e8e\u4ea4\u6362\u540e\u65b0\u7684\u5806\u9876R[1]\u53ef\u80fd\u8fdd\u53cd\u5806\u7684\u6027\u8d28\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5f53\u524d\u65e0\u5e8f\u533a(R1,R2,\u2026\u2026Rn-1)\u8c03\u6574\u4e3a\u65b0\u5806\uff0c\u7136\u540e\u518d\u6b21\u5c06R[1]\u4e0e\u65e0\u5e8f\u533a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u5f97\u5230\u65b0\u7684\u65e0\u5e8f\u533a(R1,R2\u2026.Rn-2)\u548c\u65b0\u7684\u6709\u5e8f\u533a(Rn-1,Rn)\u3002\u4e0d\u65ad\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u6709\u5e8f\u533a\u7684\u5143\u7d20\u4e2a\u6570\u4e3an-1\uff0c\u5219\u6574\u4e2a\u6392\u5e8f\u8fc7\u7a0b\u5b8c\u6210\u3002 \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a \u00b6 1.\u5148\u5efa\u7acb\u5927\u6839\u5806\uff1a \u00b6 \u2460\u5efa\u7acb\u5927\u6839\u5806\uff0c\u53ea\u9700\u68c0\u67e5\u6240\u6709\u975e\u7ec8\u7aef\u7ed3\u70b9\u662f\u5426\u6ee1\u8db3\u5927\u6839\u5806\u8981\u6c42\u3002\u987a\u5e8f\u5b58\u50a8\u7684\u4e8c\u53c9\u6811\u4e2d\u975e\u7ec8\u7aef\u7ed3\u70b9\u7f16\u53f7\u4e3a \\( \\(i<\\lfloor n/2 \\rfloor\\) \\) \u2461\u4ece \\( \\(i=\\lfloor n/2 \\rfloor\\) \\) \u5f00\u59cb\uff0c\u4ece\u540e\u5f80\u524d\u5904\u7406\u975e\u7ec8\u7aef\u7ed3\u70b9\uff0c\u5224\u65ad\u7b2ci\u4e2a\u7ed3\u70b9\u4e0e\u5b83\u7684\u5b69\u5b50\u7ed3\u70b92i\uff0c2i+1\u662f\u5426\u6ee1\u8db3\u5927\u6839\u5806\u8981\u6c42\u3002\u4e0d\u6ee1\u8db3\uff0c\u5219\u6839\u4e0e\u6700\u5927\u7684\u5b69\u5b50\u4e92\u6362\u3002 \u2462\u6362\u4e86\u7684\u5b69\u5b50\u8fd8\u8981\u7ee7\u7eed\u5224\u65ad\u4e0e\u5b83\u7684\u5b69\u5b50\u662f\u5426\u6ee1\u8db3\uff0c\u4f9d\u6b21\u5f80\u4e0b\u5224\u65ad\u3002\u76f4\u5230\u6ca1\u6709\u53ef\u4ee5\u6362\u7684\u3002\uff08 \u5c0f\u5143\u7d20\u4e0d\u65ad\u4e0b\u5760 \uff09 2.\u57fa\u4e8e\u5927\u6839\u5806\u8fdb\u884c\u6392\u5e8f \u00b6 \u2460\u5927\u6839\u5806\u53ef\u77e5\u6700\u524d\u9762\u662f\u6700\u5927\u7684\uff0c\u5219\u4ea4\u6362\u6700\u524d\u4e0e\u6700\u540e\u5143\u7d20 \u2461\u6392\u9664\u6700\u540e\u5143\u7d20\uff0c\u91cd\u65b0\u5efa\u7acb\u5927\u6839\u5806\uff0c\u5efa\u597d\u540e\u518d\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff08\u6392\u9664\u6700\u540e\u5df2\u786e\u5b9a\u7684\u5143\u7d20\uff09\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 //\u5efa\u7acb\u5927\u6839\u5806\uff08\u5904\u7406\u6240\u6709\u7684\u975e\u7ec8\u7aef\u7ed3\u70b9\uff09(\u521d\u59cb\u8c03\u6574\u8303\u56f4) void BuildMaxHeap ( int A [], int len ){ for ( int i = len / 2 ; i > 0 ; i -- ){ HeadAdjust ( A , i , len ); } } //\u5c06\u4ee5k\u4e3a\u6839\u7684\u5b50\u6811\u8c03\u6574\u4e3a\u5927\u6839\u5806\uff08\u8c03\u6574\u65b9\u6cd5\uff1a\u4e0b\u5760\uff09 void HeadAdjust ( int A [], int k ; int len ){ A [ 0 ] = A [ k ]; //k\u6307\u5411\u6839\u7ed3\u70b9\uff0c\u7528A[0]\u6682\u5b58 for ( int i = 2 * k ; i <= len ; i *= 2 ){ //\u6cbfkey\u8f83\u5927\u7684\u5b50\u7ed3\u70b9\u4e0b\u4e0b\u7b5b\u9009 if ( i < len && A [ i ] < A [ i + 1 ]) i ++ ; //\u53f3\u5b69\u5b50\u66f4\u5927\uff0c\u5219i++ if ( A [ 0 ] >= A [ i ]) break ; //\u6ee1\u8db3\u6839>\u5de6\u3001\u53f3\u5b69\u5b50 else { A [ k ] = A [ i ]; //\u5c06\u5927\u7684\u5b69\u5b50\u6210\u4e3a\u6839 k = i ; //k\u6307\u5411\u65b0\u7684\u6839 } } A [ k ] = A [ 0 ]; //\u88ab\u7b5b\u9009\u7ed3\u70b9\u7684\u503c\u653e\u5165\u6700\u7ec8\u4f4d\u7f6e } //\u5806\u6392\u5e8f\u7684\u5b8c\u6574\u903b\u8f91 void HeapSort ( int A [], int len ){ BuildMaxHeap ( A , len ); //\u521d\u59cb\u5efa\u7acb\u5927\u6839\u5806 for ( int i = len ; i > 1 ; i -- ){ //\u627en-1\u6b21\u6700\u5927\u5143\u7d20 swap ( A [ i ], A [ 1 ]); //\u5806\u9876\u5143\u7d20\u4e0e\u5806\u9876\u5143\u7d20\u4ea4\u6362 HeadAdjust ( A , 1 , i -1 ); //\u4ea4\u6362\u540e\u53ea\u6709A[1]\u4e0d\u6ee1\u8db3\u5927\u6839\u5806\u8981\u6c42\uff0c\u5219\u8c03\u6574A[1]\u5373\u53ef } } \u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u5efa\u5806\uff1a \u4e00\u4e2a\u7ed3\u70b9\uff0c\u6bcf\u4e0b\u5760\u4e00\u5c42\uff0c\u6700\u591a\u53ea\u5bf9\u6bd4\u5173\u952e\u5b57\u4e24\u6b21\u3002 \u6811\u9ad8\u4e3a \\( \\(h\\) \\) \uff0c\u5728i\u5c42\u7684\u7ed3\u70b9\u6700\u591a\u4e0b\u5760 \\( \\(h-i\\) \\) \u5c42\uff0c\u5219\u5bf9\u6bd4\u5173\u952e\u5b57 \\( \\(2*(h-i)\\) \\) \u7b2c\u4e00\u5c42\u5bf9\u6bd4 \\( \\(2^0*2*(h-1)\\) \\) \uff0c\u7b2c\u4e8c\u5c42\u5bf9\u6bd4 \\( \\(2^1*2*(h-2)\\) \\) \uff0c\u5219\u7b2ci\u5c42\u5bf9\u6bd4 \\( \\(2^{i-1}*2*(h-i)\\) \\) \uff0c\u5171h-1\u5c42 \u6c42\u548c\u540e\u4e0d\u8d85\u8fc7 \\( \\(4n\\) \\) \uff0c\u5219 \u5efa\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n)\\) \\) \u4e0b\u5760\uff1a n-1\u6b21\u4e0b\u5760\uff0c\u6bcf\u6b21\u6700\u591a\u4e0bh\u5c42\uff0c\u56e0 \\( \\(h=log_2n\\) \\) \uff0c\u5219 \u4e0b\u5760\u7684\u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(nlog_2n)\\) \\) \u5219\u5806\u6392\u5e8f\u7684 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n)\\) \\) + \\( \\(O(nlog_2n)\\) \\) = \\( \\(O(nlog_2n)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u4e0d\u7a33\u5b9a","title":"7.7\u5806\u6392\u5e8f\uff08\u4e0d\u7a33\u5b9a\uff09"},{"location":"07-%E6%8E%92%E5%BA%8F/8.7%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#heap-sort","text":"\u5806\u6392\u5e8f \u662f\u6307\u5229\u7528\u5806\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u6240\u8bbe\u8ba1\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\u3002\u5806\u79ef\u662f\u4e00\u4e2a\u8fd1\u4f3c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u5e76\u540c\u65f6\u6ee1\u8db3\u5806\u79ef\u7684\u6027\u8d28\uff1a\u5373\u5b50\u7ed3\u70b9\u7684\u952e\u503c\u6216\u7d22\u5f15\u603b\u662f\u5c0f\u4e8e\uff08\u6216\u8005\u5927\u4e8e\uff09\u5b83\u7684\u7236\u8282\u70b9\u3002 \u5927\u6839\u5806\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u6839>=\u5de6\u3001\u53f3\u3002 \u5c0f\u6839\u5806\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u6839<=\u5de6\u3001\u53f3\u3002","title":"\u5806\u6392\u5e8f\u2014\u2014Heap Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.7%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_1","text":"\u5c06\u521d\u59cb\u5f85\u6392\u5e8f\u5173\u952e\u5b57\u5e8f\u5217(R1,R2\u2026.Rn)\u6784\u5efa\u6210\u5927\u9876\u5806\uff0c\u6b64\u5806\u4e3a\u521d\u59cb\u7684\u65e0\u5e8f\u533a\uff1b \u5c06\u5806\u9876\u5143\u7d20R[1]\u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20R[n]\u4ea4\u6362\uff0c\u6b64\u65f6\u5f97\u5230\u65b0\u7684\u65e0\u5e8f\u533a(R1,R2,\u2026\u2026Rn-1)\u548c\u65b0\u7684\u6709\u5e8f\u533a(Rn),\u4e14\u6ee1\u8db3R[1,2\u2026n-1]<=R[n]\uff1b \u7531\u4e8e\u4ea4\u6362\u540e\u65b0\u7684\u5806\u9876R[1]\u53ef\u80fd\u8fdd\u53cd\u5806\u7684\u6027\u8d28\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5f53\u524d\u65e0\u5e8f\u533a(R1,R2,\u2026\u2026Rn-1)\u8c03\u6574\u4e3a\u65b0\u5806\uff0c\u7136\u540e\u518d\u6b21\u5c06R[1]\u4e0e\u65e0\u5e8f\u533a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u5f97\u5230\u65b0\u7684\u65e0\u5e8f\u533a(R1,R2\u2026.Rn-2)\u548c\u65b0\u7684\u6709\u5e8f\u533a(Rn-1,Rn)\u3002\u4e0d\u65ad\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u6709\u5e8f\u533a\u7684\u5143\u7d20\u4e2a\u6570\u4e3an-1\uff0c\u5219\u6574\u4e2a\u6392\u5e8f\u8fc7\u7a0b\u5b8c\u6210\u3002","title":"\u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.7%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_2","text":"","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.7%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#1","text":"\u2460\u5efa\u7acb\u5927\u6839\u5806\uff0c\u53ea\u9700\u68c0\u67e5\u6240\u6709\u975e\u7ec8\u7aef\u7ed3\u70b9\u662f\u5426\u6ee1\u8db3\u5927\u6839\u5806\u8981\u6c42\u3002\u987a\u5e8f\u5b58\u50a8\u7684\u4e8c\u53c9\u6811\u4e2d\u975e\u7ec8\u7aef\u7ed3\u70b9\u7f16\u53f7\u4e3a \\( \\(i<\\lfloor n/2 \\rfloor\\) \\) \u2461\u4ece \\( \\(i=\\lfloor n/2 \\rfloor\\) \\) \u5f00\u59cb\uff0c\u4ece\u540e\u5f80\u524d\u5904\u7406\u975e\u7ec8\u7aef\u7ed3\u70b9\uff0c\u5224\u65ad\u7b2ci\u4e2a\u7ed3\u70b9\u4e0e\u5b83\u7684\u5b69\u5b50\u7ed3\u70b92i\uff0c2i+1\u662f\u5426\u6ee1\u8db3\u5927\u6839\u5806\u8981\u6c42\u3002\u4e0d\u6ee1\u8db3\uff0c\u5219\u6839\u4e0e\u6700\u5927\u7684\u5b69\u5b50\u4e92\u6362\u3002 \u2462\u6362\u4e86\u7684\u5b69\u5b50\u8fd8\u8981\u7ee7\u7eed\u5224\u65ad\u4e0e\u5b83\u7684\u5b69\u5b50\u662f\u5426\u6ee1\u8db3\uff0c\u4f9d\u6b21\u5f80\u4e0b\u5224\u65ad\u3002\u76f4\u5230\u6ca1\u6709\u53ef\u4ee5\u6362\u7684\u3002\uff08 \u5c0f\u5143\u7d20\u4e0d\u65ad\u4e0b\u5760 \uff09","title":"1.\u5148\u5efa\u7acb\u5927\u6839\u5806\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.7%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#2","text":"\u2460\u5927\u6839\u5806\u53ef\u77e5\u6700\u524d\u9762\u662f\u6700\u5927\u7684\uff0c\u5219\u4ea4\u6362\u6700\u524d\u4e0e\u6700\u540e\u5143\u7d20 \u2461\u6392\u9664\u6700\u540e\u5143\u7d20\uff0c\u91cd\u65b0\u5efa\u7acb\u5927\u6839\u5806\uff0c\u5efa\u597d\u540e\u518d\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff08\u6392\u9664\u6700\u540e\u5df2\u786e\u5b9a\u7684\u5143\u7d20\uff09\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 //\u5efa\u7acb\u5927\u6839\u5806\uff08\u5904\u7406\u6240\u6709\u7684\u975e\u7ec8\u7aef\u7ed3\u70b9\uff09(\u521d\u59cb\u8c03\u6574\u8303\u56f4) void BuildMaxHeap ( int A [], int len ){ for ( int i = len / 2 ; i > 0 ; i -- ){ HeadAdjust ( A , i , len ); } } //\u5c06\u4ee5k\u4e3a\u6839\u7684\u5b50\u6811\u8c03\u6574\u4e3a\u5927\u6839\u5806\uff08\u8c03\u6574\u65b9\u6cd5\uff1a\u4e0b\u5760\uff09 void HeadAdjust ( int A [], int k ; int len ){ A [ 0 ] = A [ k ]; //k\u6307\u5411\u6839\u7ed3\u70b9\uff0c\u7528A[0]\u6682\u5b58 for ( int i = 2 * k ; i <= len ; i *= 2 ){ //\u6cbfkey\u8f83\u5927\u7684\u5b50\u7ed3\u70b9\u4e0b\u4e0b\u7b5b\u9009 if ( i < len && A [ i ] < A [ i + 1 ]) i ++ ; //\u53f3\u5b69\u5b50\u66f4\u5927\uff0c\u5219i++ if ( A [ 0 ] >= A [ i ]) break ; //\u6ee1\u8db3\u6839>\u5de6\u3001\u53f3\u5b69\u5b50 else { A [ k ] = A [ i ]; //\u5c06\u5927\u7684\u5b69\u5b50\u6210\u4e3a\u6839 k = i ; //k\u6307\u5411\u65b0\u7684\u6839 } } A [ k ] = A [ 0 ]; //\u88ab\u7b5b\u9009\u7ed3\u70b9\u7684\u503c\u653e\u5165\u6700\u7ec8\u4f4d\u7f6e } //\u5806\u6392\u5e8f\u7684\u5b8c\u6574\u903b\u8f91 void HeapSort ( int A [], int len ){ BuildMaxHeap ( A , len ); //\u521d\u59cb\u5efa\u7acb\u5927\u6839\u5806 for ( int i = len ; i > 1 ; i -- ){ //\u627en-1\u6b21\u6700\u5927\u5143\u7d20 swap ( A [ i ], A [ 1 ]); //\u5806\u9876\u5143\u7d20\u4e0e\u5806\u9876\u5143\u7d20\u4ea4\u6362 HeadAdjust ( A , 1 , i -1 ); //\u4ea4\u6362\u540e\u53ea\u6709A[1]\u4e0d\u6ee1\u8db3\u5927\u6839\u5806\u8981\u6c42\uff0c\u5219\u8c03\u6574A[1]\u5373\u53ef } }","title":"2.\u57fa\u4e8e\u5927\u6839\u5806\u8fdb\u884c\u6392\u5e8f"},{"location":"07-%E6%8E%92%E5%BA%8F/8.7%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%89/#_3","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(1)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u5efa\u5806\uff1a \u4e00\u4e2a\u7ed3\u70b9\uff0c\u6bcf\u4e0b\u5760\u4e00\u5c42\uff0c\u6700\u591a\u53ea\u5bf9\u6bd4\u5173\u952e\u5b57\u4e24\u6b21\u3002 \u6811\u9ad8\u4e3a \\( \\(h\\) \\) \uff0c\u5728i\u5c42\u7684\u7ed3\u70b9\u6700\u591a\u4e0b\u5760 \\( \\(h-i\\) \\) \u5c42\uff0c\u5219\u5bf9\u6bd4\u5173\u952e\u5b57 \\( \\(2*(h-i)\\) \\) \u7b2c\u4e00\u5c42\u5bf9\u6bd4 \\( \\(2^0*2*(h-1)\\) \\) \uff0c\u7b2c\u4e8c\u5c42\u5bf9\u6bd4 \\( \\(2^1*2*(h-2)\\) \\) \uff0c\u5219\u7b2ci\u5c42\u5bf9\u6bd4 \\( \\(2^{i-1}*2*(h-i)\\) \\) \uff0c\u5171h-1\u5c42 \u6c42\u548c\u540e\u4e0d\u8d85\u8fc7 \\( \\(4n\\) \\) \uff0c\u5219 \u5efa\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n)\\) \\) \u4e0b\u5760\uff1a n-1\u6b21\u4e0b\u5760\uff0c\u6bcf\u6b21\u6700\u591a\u4e0bh\u5c42\uff0c\u56e0 \\( \\(h=log_2n\\) \\) \uff0c\u5219 \u4e0b\u5760\u7684\u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(nlog_2n)\\) \\) \u5219\u5806\u6392\u5e8f\u7684 \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n)\\) \\) + \\( \\(O(nlog_2n)\\) \\) = \\( \\(O(nlog_2n)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u4e0d\u7a33\u5b9a","title":"\u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790"},{"location":"07-%E6%8E%92%E5%BA%8F/8.8%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/","text":"\u5f52\u5e76\u6392\u5e8f\u2014\u2014Merge Sort \u00b6 \u5f52\u5e76\u6392\u5e8f \u662f\u5efa\u7acb\u5728\u5f52\u5e76\u64cd\u4f5c\u4e0a\u7684\u4e00\u79cd\u6709\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u662f\u91c7\u7528 \u5206\u6cbb\u6cd5 \uff08Divide and Conquer\uff09\u7684\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u5e94\u7528\u3002\u5c06\u5df2\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\uff0c\u5f97\u5230\u5b8c\u5168\u6709\u5e8f\u7684\u5e8f\u5217\uff1b\u5373\u5148\u4f7f\u6bcf\u4e2a\u5b50\u5e8f\u5217\u6709\u5e8f\uff0c\u518d\u4f7f\u5b50\u5e8f\u5217\u6bb5\u95f4\u6709\u5e8f\u3002 \u5f52\u5e76\uff1a\u628a\u4e24\u4e2a\u6216\u591a\u4e2a\u5df2\u7ecf\u6709\u5e8f\u7684\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u3002 m\u8def\u5f52\u5e76\uff1a\u5c06m\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\uff0c\u6bcf\u9009\u51fa\u4e00\u4e2a\u5143\u7d20\u9700\u8981\u5bf9\u6bd4\u5173\u952e\u5b57m-1\u6b21\u3002 2\u8def\u5f52\u5e76\uff1a \u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a \u00b6 \u628a\u957f\u5ea6\u4e3an\u7684\u8f93\u5165\u5e8f\u5217\u5206\u6210\u4e24\u4e2a\u957f\u5ea6\u4e3an/2\u7684\u5b50\u5e8f\u5217\uff1b \u5bf9\u8fd9\u4e24\u4e2a\u5b50\u5e8f\u5217\u5206\u522b\u91c7\u7528\u5f52\u5e76\u6392\u5e8f\uff1b \u5c06\u4e24\u4e2a\u6392\u5e8f\u597d\u7684\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u6392\u5e8f\u5e8f\u5217\u3002 \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a \u00b6 int * B = ( int * ) malloc ( n * sizeof ( int )); //\u8f85\u52a9\u6570\u7ec4B //\u5c06\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5f52\u5e76\uff08A[low...mid]\u548cA[mid+1...high]\u5404\u81ea\u6709\u5e8f\uff0c\u5c06\u4e24\u4e2a\u90e8\u5206\u5f52\u5e76\uff09 void Merge ( int A [], int low , int mid , int high ){ int i , j , k ; for ( k = low ; k <= high ; k ++ ){ B [ k ] = A [ k ]; } for ( i = low , j = mid + 1 , k = i ; i <= mid && j <= high ; k ++ ){ if ( B [ i ] <= B [ j ]) A [ k ] = B [ i ++ ]; //\u5c06\u8f83\u5c0f\u7684\u590d\u5236\u5230A\u4e2d\uff0c\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 else A [ k ] = B [ j ++ ]; } while ( j <= mid ) A [ k ++ ] = B [ i ++ ]; //\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 while ( j <= high ) A [ k ++ ] = B [ j ++ ]; //\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 } //\u5f52\u5e76\u6392\u5e8f void MergeSort ( int A [], int low , int high ){ if ( low < high ){ int mid = ( low + high ) / 2 ; //\u4ece\u4e2d\u95f4\u5212\u5206 MergeSort ( A , low , mid ); //\u5bf9\u5de6\u534a\u90e8\u5206\u5f52\u5e76\u6392\u5e8f MergeSort ( A , mid + 1 , high ); //\u5bf9\u53f3\u534a\u90e8\u5206\u5f52\u5e76\u6392\u5e8f Merge ( A , low , mid , high ); //\u5f52\u5e76 } } \u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790 \u00b6 \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u6570\u7ec4B \u65f6\u95f4\u590d\u6742\u5ea6\uff1a n\u4e2a\u5143\u7d20\u8fdb\u884c\u4e8c\u8def\u5f52\u5e76\uff0c\u9700\u8fdb\u884c \\( \\(\\lceil log_2n \\rceil\\) \\) \u8d9f \u6bcf\u8d9f\u5f52\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(nlog_2n)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a \u987a\u5e8f\u8868\u548c\u94fe\u8868\u90fd\u53ef\u4ee5\u3002","title":"7.8\u5f52\u5e76\u6392\u5e8f\uff08\u7a33\u5b9a\uff09"},{"location":"07-%E6%8E%92%E5%BA%8F/8.8%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#merge-sort","text":"\u5f52\u5e76\u6392\u5e8f \u662f\u5efa\u7acb\u5728\u5f52\u5e76\u64cd\u4f5c\u4e0a\u7684\u4e00\u79cd\u6709\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u662f\u91c7\u7528 \u5206\u6cbb\u6cd5 \uff08Divide and Conquer\uff09\u7684\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u5e94\u7528\u3002\u5c06\u5df2\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\uff0c\u5f97\u5230\u5b8c\u5168\u6709\u5e8f\u7684\u5e8f\u5217\uff1b\u5373\u5148\u4f7f\u6bcf\u4e2a\u5b50\u5e8f\u5217\u6709\u5e8f\uff0c\u518d\u4f7f\u5b50\u5e8f\u5217\u6bb5\u95f4\u6709\u5e8f\u3002 \u5f52\u5e76\uff1a\u628a\u4e24\u4e2a\u6216\u591a\u4e2a\u5df2\u7ecf\u6709\u5e8f\u7684\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u3002 m\u8def\u5f52\u5e76\uff1a\u5c06m\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\uff0c\u6bcf\u9009\u51fa\u4e00\u4e2a\u5143\u7d20\u9700\u8981\u5bf9\u6bd4\u5173\u952e\u5b57m-1\u6b21\u3002 2\u8def\u5f52\u5e76\uff1a","title":"\u5f52\u5e76\u6392\u5e8f\u2014\u2014Merge Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.8%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_1","text":"\u628a\u957f\u5ea6\u4e3an\u7684\u8f93\u5165\u5e8f\u5217\u5206\u6210\u4e24\u4e2a\u957f\u5ea6\u4e3an/2\u7684\u5b50\u5e8f\u5217\uff1b \u5bf9\u8fd9\u4e24\u4e2a\u5b50\u5e8f\u5217\u5206\u522b\u91c7\u7528\u5f52\u5e76\u6392\u5e8f\uff1b \u5c06\u4e24\u4e2a\u6392\u5e8f\u597d\u7684\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u6392\u5e8f\u5e8f\u5217\u3002","title":"\u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.8%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_2","text":"int * B = ( int * ) malloc ( n * sizeof ( int )); //\u8f85\u52a9\u6570\u7ec4B //\u5c06\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5f52\u5e76\uff08A[low...mid]\u548cA[mid+1...high]\u5404\u81ea\u6709\u5e8f\uff0c\u5c06\u4e24\u4e2a\u90e8\u5206\u5f52\u5e76\uff09 void Merge ( int A [], int low , int mid , int high ){ int i , j , k ; for ( k = low ; k <= high ; k ++ ){ B [ k ] = A [ k ]; } for ( i = low , j = mid + 1 , k = i ; i <= mid && j <= high ; k ++ ){ if ( B [ i ] <= B [ j ]) A [ k ] = B [ i ++ ]; //\u5c06\u8f83\u5c0f\u7684\u590d\u5236\u5230A\u4e2d\uff0c\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 else A [ k ] = B [ j ++ ]; } while ( j <= mid ) A [ k ++ ] = B [ i ++ ]; //\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 while ( j <= high ) A [ k ++ ] = B [ j ++ ]; //\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 } //\u5f52\u5e76\u6392\u5e8f void MergeSort ( int A [], int low , int high ){ if ( low < high ){ int mid = ( low + high ) / 2 ; //\u4ece\u4e2d\u95f4\u5212\u5206 MergeSort ( A , low , mid ); //\u5bf9\u5de6\u534a\u90e8\u5206\u5f52\u5e76\u6392\u5e8f MergeSort ( A , mid + 1 , high ); //\u5bf9\u53f3\u534a\u90e8\u5206\u5f52\u5e76\u6392\u5e8f Merge ( A , low , mid , high ); //\u5f52\u5e76 } }","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.8%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_3","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(n)\\) \\) \uff0c\u56e0\u4e3a\u9700\u8981\u7684\u8f85\u52a9\u6570\u7ec4B \u65f6\u95f4\u590d\u6742\u5ea6\uff1a n\u4e2a\u5143\u7d20\u8fdb\u884c\u4e8c\u8def\u5f52\u5e76\uff0c\u9700\u8fdb\u884c \\( \\(\\lceil log_2n \\rceil\\) \\) \u8d9f \u6bcf\u8d9f\u5f52\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6= \\( \\(O(n)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(nlog_2n)\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a \u987a\u5e8f\u8868\u548c\u94fe\u8868\u90fd\u53ef\u4ee5\u3002","title":"\u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790"},{"location":"07-%E6%8E%92%E5%BA%8F/8.9%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/","text":"\u57fa\u6570\u6392\u5e8f\u2014\u2014Radix Sort \u00b6 \u57fa\u6570\u6392\u5e8f \u662f\u6309\u7167\u4f4e\u4f4d\u5148\u6392\u5e8f\uff0c\u7136\u540e\u6536\u96c6\uff1b\u518d\u6309\u7167\u9ad8\u4f4d\u6392\u5e8f\uff0c\u7136\u540e\u518d\u6536\u96c6\uff1b\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6700\u9ad8\u4f4d\u3002\u6709\u65f6\u5019\u6709\u4e9b\u5c5e\u6027\u662f\u6709\u4f18\u5148\u7ea7\u987a\u5e8f\u7684\uff0c\u5148\u6309\u4f4e\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u518d\u6309\u9ad8\u4f18\u5148\u7ea7\u6392\u5e8f\u3002\u6700\u540e\u7684\u6b21\u5e8f\u5c31\u662f\u9ad8\u4f18\u5148\u7ea7\u9ad8\u7684\u5728\u524d\uff0c\u9ad8\u4f18\u5148\u7ea7\u76f8\u540c\u7684\u4f4e\u4f18\u5148\u7ea7\u9ad8\u7684\u5728\u524d\u3002 r\u4e3a\u57fa\u6570 \uff0c\u57fa\u6570\u662f\u6bcf\u4e00\u4f4d\u53ef\u4ee5\u53d6\u7684\u6570\u7684\u8303\u56f4\uff0c\u4f8b\u598210\u8fdb\u5236\u7684\u4e00\u4f4d\u6570\u53ef\u4ee5\u53d60~9\uff0c\u5219 \u5341\u8fdb\u5236\u7684\u57fa\u6570r=10 \u3002 d\u4e3a\u5173\u952e\u5b57\u4e2a\u6570\uff0c\u4e5f\u662f\u8d9f\u6570\uff0c\u4f8b\u5982 10\u8fdb\u5236\u7684\u4e00\u4f4d\u6570\u4e3a\u4e00\u4e2ad \u3002 n\u4e3a\u5143\u7d20\u4e2a\u6570 \u57fa\u6570\u6392\u5e8f\u64c5\u957f\u6811\u7acbd\u5c0f\uff0cr\u5c0f\uff0cn\u5927\u7684\u5143\u7d20\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\u3002 \u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a \u00b6 \u53d6\u5f97\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u6570\uff0c\u5e76\u53d6\u5f97\u4f4d\u6570\uff1b arr\u4e3a\u539f\u59cb\u6570\u7ec4\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u53d6\u6bcf\u4e2a\u4f4d\u7ec4\u6210radix\u6570\u7ec4\uff1b \u5bf9radix\u8fdb\u884c\u8ba1\u6570\u6392\u5e8f\uff08\u5229\u7528\u8ba1\u6570\u6392\u5e8f\u9002\u7528\u4e8e\u5c0f\u8303\u56f4\u6570\u7684 \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a \u00b6 \u9700\u4e00\u4e2a\u8f85\u52a9\u94fe\u961f\u5217\u6765\u5b9e\u73b0 int * B = ( int * ) malloc ( n * sizeof ( int )); //\u8f85\u52a9\u6570\u7ec4B //\u5c06\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5f52\u5e76\uff08A[low...mid]\u548cA[mid+1...high]\u5404\u81ea\u6709\u5e8f\uff0c\u5c06\u4e24\u4e2a\u90e8\u5206\u5f52\u5e76\uff09 void Merge ( int A [], int low , int mid , int high ){ int i , j , k ; for ( k = low ; k <= high ; k ++ ){ B [ k ] = A [ k ]; } for ( i = low , j = mid + 1 , k = i ; i <= mid && j <= high ; k ++ ){ if ( B [ i ] <= B [ j ]) A [ k ] = B [ i ++ ]; //\u5c06\u8f83\u5c0f\u7684\u590d\u5236\u5230A\u4e2d\uff0c\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 else A [ k ] = B [ j ++ ]; } while ( j <= mid ) A [ k ++ ] = B [ i ++ ]; //\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 while ( j <= high ) A [ k ++ ] = B [ j ++ ]; //\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 } //\u5f52\u5e76\u6392\u5e8f void MergeSort ( int A [], int low , int high ){ if ( low < high ){ int mid = ( low + high ) / 2 ; //\u4ece\u4e2d\u95f4\u5212\u5206 MergeSort ( A , low , mid ); //\u5bf9\u5de6\u534a\u90e8\u5206\u5f52\u5e76\u6392\u5e8f MergeSort ( A , mid + 1 , high ); //\u5bf9\u53f3\u534a\u90e8\u5206\u5f52\u5e76\u6392\u5e8f Merge ( A , low , mid , high ); //\u5f52\u5e76 } } \u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790 \u00b6 \u7a7a\u95f4\u3001\u65f6\u95f4\u590d\u6742\u5ea6 \u53d6\u51b3\u4e8e\u57fa\u6570r \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(r)\\) \\) \uff0c \u56e0\u4e3a\u9700\u8981r\u4e2a\u8f85\u52a9\u961f\u5217\uff0c\u94fe\u961f\u5217\u662f\u589e\u52a0\u6307\u9488\u57df\uff0c\u5219\u6bcf\u4e2a\u94fe\u961f\u5217\u7684\u7a7a\u95f4\u590d\u6742\u5ea6= \\( \\(O(1)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(d(n+r))\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a \u56db\u3001\u57fa\u6570\u6392\u5e8f\u7684\u5e94\u7528 \u00b6","title":"7.9\u57fa\u6570\u6392\u5e8f\uff08\u7a33\u5b9a\uff09"},{"location":"07-%E6%8E%92%E5%BA%8F/8.9%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#radix-sort","text":"\u57fa\u6570\u6392\u5e8f \u662f\u6309\u7167\u4f4e\u4f4d\u5148\u6392\u5e8f\uff0c\u7136\u540e\u6536\u96c6\uff1b\u518d\u6309\u7167\u9ad8\u4f4d\u6392\u5e8f\uff0c\u7136\u540e\u518d\u6536\u96c6\uff1b\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6700\u9ad8\u4f4d\u3002\u6709\u65f6\u5019\u6709\u4e9b\u5c5e\u6027\u662f\u6709\u4f18\u5148\u7ea7\u987a\u5e8f\u7684\uff0c\u5148\u6309\u4f4e\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u518d\u6309\u9ad8\u4f18\u5148\u7ea7\u6392\u5e8f\u3002\u6700\u540e\u7684\u6b21\u5e8f\u5c31\u662f\u9ad8\u4f18\u5148\u7ea7\u9ad8\u7684\u5728\u524d\uff0c\u9ad8\u4f18\u5148\u7ea7\u76f8\u540c\u7684\u4f4e\u4f18\u5148\u7ea7\u9ad8\u7684\u5728\u524d\u3002 r\u4e3a\u57fa\u6570 \uff0c\u57fa\u6570\u662f\u6bcf\u4e00\u4f4d\u53ef\u4ee5\u53d6\u7684\u6570\u7684\u8303\u56f4\uff0c\u4f8b\u598210\u8fdb\u5236\u7684\u4e00\u4f4d\u6570\u53ef\u4ee5\u53d60~9\uff0c\u5219 \u5341\u8fdb\u5236\u7684\u57fa\u6570r=10 \u3002 d\u4e3a\u5173\u952e\u5b57\u4e2a\u6570\uff0c\u4e5f\u662f\u8d9f\u6570\uff0c\u4f8b\u5982 10\u8fdb\u5236\u7684\u4e00\u4f4d\u6570\u4e3a\u4e00\u4e2ad \u3002 n\u4e3a\u5143\u7d20\u4e2a\u6570 \u57fa\u6570\u6392\u5e8f\u64c5\u957f\u6811\u7acbd\u5c0f\uff0cr\u5c0f\uff0cn\u5927\u7684\u5143\u7d20\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\u3002","title":"\u57fa\u6570\u6392\u5e8f\u2014\u2014Radix Sort"},{"location":"07-%E6%8E%92%E5%BA%8F/8.9%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_1","text":"\u53d6\u5f97\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u6570\uff0c\u5e76\u53d6\u5f97\u4f4d\u6570\uff1b arr\u4e3a\u539f\u59cb\u6570\u7ec4\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u53d6\u6bcf\u4e2a\u4f4d\u7ec4\u6210radix\u6570\u7ec4\uff1b \u5bf9radix\u8fdb\u884c\u8ba1\u6570\u6392\u5e8f\uff08\u5229\u7528\u8ba1\u6570\u6392\u5e8f\u9002\u7528\u4e8e\u5c0f\u8303\u56f4\u6570\u7684","title":"\u4e00\u3001\u7b97\u6cd5\u601d\u60f3\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.9%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_2","text":"\u9700\u4e00\u4e2a\u8f85\u52a9\u94fe\u961f\u5217\u6765\u5b9e\u73b0 int * B = ( int * ) malloc ( n * sizeof ( int )); //\u8f85\u52a9\u6570\u7ec4B //\u5c06\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5f52\u5e76\uff08A[low...mid]\u548cA[mid+1...high]\u5404\u81ea\u6709\u5e8f\uff0c\u5c06\u4e24\u4e2a\u90e8\u5206\u5f52\u5e76\uff09 void Merge ( int A [], int low , int mid , int high ){ int i , j , k ; for ( k = low ; k <= high ; k ++ ){ B [ k ] = A [ k ]; } for ( i = low , j = mid + 1 , k = i ; i <= mid && j <= high ; k ++ ){ if ( B [ i ] <= B [ j ]) A [ k ] = B [ i ++ ]; //\u5c06\u8f83\u5c0f\u7684\u590d\u5236\u5230A\u4e2d\uff0c\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 else A [ k ] = B [ j ++ ]; } while ( j <= mid ) A [ k ++ ] = B [ i ++ ]; //\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 while ( j <= high ) A [ k ++ ] = B [ j ++ ]; //\u5148\u8d4b\u503c\uff0c\u518d\u5c06\u6307\u9488\u540e\u79fb\u3002 } //\u5f52\u5e76\u6392\u5e8f void MergeSort ( int A [], int low , int high ){ if ( low < high ){ int mid = ( low + high ) / 2 ; //\u4ece\u4e2d\u95f4\u5212\u5206 MergeSort ( A , low , mid ); //\u5bf9\u5de6\u534a\u90e8\u5206\u5f52\u5e76\u6392\u5e8f MergeSort ( A , mid + 1 , high ); //\u5bf9\u53f3\u534a\u90e8\u5206\u5f52\u5e76\u6392\u5e8f Merge ( A , low , mid , high ); //\u5f52\u5e76 } }","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\uff1a"},{"location":"07-%E6%8E%92%E5%BA%8F/8.9%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_3","text":"\u7a7a\u95f4\u3001\u65f6\u95f4\u590d\u6742\u5ea6 \u53d6\u51b3\u4e8e\u57fa\u6570r \u7a7a\u95f4\u590d\u6742\u5ea6 = \\( \\(O(r)\\) \\) \uff0c \u56e0\u4e3a\u9700\u8981r\u4e2a\u8f85\u52a9\u961f\u5217\uff0c\u94fe\u961f\u5217\u662f\u589e\u52a0\u6307\u9488\u57df\uff0c\u5219\u6bcf\u4e2a\u94fe\u961f\u5217\u7684\u7a7a\u95f4\u590d\u6742\u5ea6= \\( \\(O(1)\\) \\) \u65f6\u95f4\u590d\u6742\u5ea6 = \\( \\(O(d(n+r))\\) \\) \u7b97\u6cd5\u7a33\u5b9a\u6027\uff1a \u7a33\u5b9a","title":"\u4e09\u3001\u7b97\u6cd5\u6548\u7387\u5206\u6790"},{"location":"07-%E6%8E%92%E5%BA%8F/8.9%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%88%E7%A8%B3%E5%AE%9A%EF%BC%89/#_4","text":"","title":"\u56db\u3001\u57fa\u6570\u6392\u5e8f\u7684\u5e94\u7528"}]}